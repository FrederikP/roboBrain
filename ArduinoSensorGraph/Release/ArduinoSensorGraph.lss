
ArduinoSensorGraph.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  000022fc  00002390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ee  008001b6  008001b6  00002446  2**0
                  ALLOC
  3 .debug_aranges 000007f0  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001546  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ad4c  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001dc7  00000000  00000000  0000eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000465e  00000000  00000000  00010c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e60  00000000  00000000  000152f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000255a  00000000  00000000  00016150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004e56  00000000  00000000  000186aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000820  00000000  00000000  0001d500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    SREG = oldSREG;
    return true;
  }

  return false;
}
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
#include "URMSerial.h"
#include <HardwareSerial.h>

URMSerial::URMSerial(void)
{
}
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
	errorFunc = 0;
	init();
}
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_3>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_4>
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
}
      14:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_5>
}

void operator delete(void * ptr)
{
  free(ptr);
} 
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_18>
      4c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_19>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000068 <_ZL5table>:
      68:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
      78:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
      88:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
      98:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
      a8:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
      b8:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
      c8:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
      d8:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
      e8:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

000000f8 <port_to_mode_PGM>:
      f8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000102 <port_to_output_PGM>:
     102:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000010c <port_to_input_PGM>:
     10c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000116 <digital_pin_to_port_PGM>:
     116:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     126:	03 03 03 03                                         ....

0000012a <digital_pin_to_bit_mask_PGM>:
     12a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     13a:	04 08 10 20                                         ... 

0000013e <digital_pin_to_timer_PGM>:
     13e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     14e:	00 00 00 00                                         ....

00000152 <__ctors_start>:
     152:	72 09       	sbc	r23, r2
     154:	29 0c       	add	r2, r9

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	ec ef       	ldi	r30, 0xFC	; 252
     16a:	f2 e2       	ldi	r31, 0x22	; 34
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	a6 3b       	cpi	r26, 0xB6	; 182
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	13 e0       	ldi	r17, 0x03	; 3
     17a:	a6 eb       	ldi	r26, 0xB6	; 182
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a4 3a       	cpi	r26, 0xA4	; 164
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	c6 e5       	ldi	r28, 0x56	; 86
     18c:	d1 e0       	ldi	r29, 0x01	; 1
     18e:	04 c0       	rjmp	.+8      	; 0x198 <.do_global_ctors_start>

00000190 <.do_global_ctors_loop>:
     190:	22 97       	sbiw	r28, 0x02	; 2
     192:	fe 01       	movw	r30, r28
     194:	0e 94 41 11 	call	0x2282	; 0x2282 <__tablejump__>

00000198 <.do_global_ctors_start>:
     198:	c2 35       	cpi	r28, 0x52	; 82
     19a:	d1 07       	cpc	r29, r17
     19c:	c9 f7       	brne	.-14     	; 0x190 <.do_global_ctors_loop>
     19e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <main>
     1a2:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <malloc>:
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	bc 01       	movw	r22, r24
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	91 05       	cpc	r25, r1
     1b4:	10 f4       	brcc	.+4      	; 0x1ba <malloc+0x10>
     1b6:	62 e0       	ldi	r22, 0x02	; 2
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	a0 91 a2 03 	lds	r26, 0x03A2
     1be:	b0 91 a3 03 	lds	r27, 0x03A3
     1c2:	ed 01       	movw	r28, r26
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	21 c0       	rjmp	.+66     	; 0x210 <malloc+0x66>
     1ce:	88 81       	ld	r24, Y
     1d0:	99 81       	ldd	r25, Y+1	; 0x01
     1d2:	86 17       	cp	r24, r22
     1d4:	97 07       	cpc	r25, r23
     1d6:	69 f4       	brne	.+26     	; 0x1f2 <malloc+0x48>
     1d8:	8a 81       	ldd	r24, Y+2	; 0x02
     1da:	9b 81       	ldd	r25, Y+3	; 0x03
     1dc:	30 97       	sbiw	r30, 0x00	; 0
     1de:	19 f0       	breq	.+6      	; 0x1e6 <malloc+0x3c>
     1e0:	93 83       	std	Z+3, r25	; 0x03
     1e2:	82 83       	std	Z+2, r24	; 0x02
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <malloc+0x44>
     1e6:	90 93 a3 03 	sts	0x03A3, r25
     1ea:	80 93 a2 03 	sts	0x03A2, r24
     1ee:	fe 01       	movw	r30, r28
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <malloc+0xb0>
     1f2:	68 17       	cp	r22, r24
     1f4:	79 07       	cpc	r23, r25
     1f6:	38 f4       	brcc	.+14     	; 0x206 <malloc+0x5c>
     1f8:	41 15       	cp	r20, r1
     1fa:	51 05       	cpc	r21, r1
     1fc:	19 f0       	breq	.+6      	; 0x204 <malloc+0x5a>
     1fe:	84 17       	cp	r24, r20
     200:	95 07       	cpc	r25, r21
     202:	08 f4       	brcc	.+2      	; 0x206 <malloc+0x5c>
     204:	ac 01       	movw	r20, r24
     206:	fe 01       	movw	r30, r28
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	9c 01       	movw	r18, r24
     20e:	e9 01       	movw	r28, r18
     210:	20 97       	sbiw	r28, 0x00	; 0
     212:	e9 f6       	brne	.-70     	; 0x1ce <malloc+0x24>
     214:	41 15       	cp	r20, r1
     216:	51 05       	cpc	r21, r1
     218:	a9 f1       	breq	.+106    	; 0x284 <malloc+0xda>
     21a:	ca 01       	movw	r24, r20
     21c:	86 1b       	sub	r24, r22
     21e:	97 0b       	sbc	r25, r23
     220:	04 97       	sbiw	r24, 0x04	; 4
     222:	08 f4       	brcc	.+2      	; 0x226 <malloc+0x7c>
     224:	ba 01       	movw	r22, r20
     226:	e0 e0       	ldi	r30, 0x00	; 0
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	2a c0       	rjmp	.+84     	; 0x280 <malloc+0xd6>
     22c:	8d 91       	ld	r24, X+
     22e:	9c 91       	ld	r25, X
     230:	11 97       	sbiw	r26, 0x01	; 1
     232:	84 17       	cp	r24, r20
     234:	95 07       	cpc	r25, r21
     236:	f9 f4       	brne	.+62     	; 0x276 <malloc+0xcc>
     238:	64 17       	cp	r22, r20
     23a:	75 07       	cpc	r23, r21
     23c:	81 f4       	brne	.+32     	; 0x25e <malloc+0xb4>
     23e:	12 96       	adiw	r26, 0x02	; 2
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	13 97       	sbiw	r26, 0x03	; 3
     246:	30 97       	sbiw	r30, 0x00	; 0
     248:	19 f0       	breq	.+6      	; 0x250 <malloc+0xa6>
     24a:	93 83       	std	Z+3, r25	; 0x03
     24c:	82 83       	std	Z+2, r24	; 0x02
     24e:	04 c0       	rjmp	.+8      	; 0x258 <malloc+0xae>
     250:	90 93 a3 03 	sts	0x03A3, r25
     254:	80 93 a2 03 	sts	0x03A2, r24
     258:	fd 01       	movw	r30, r26
     25a:	32 96       	adiw	r30, 0x02	; 2
     25c:	4c c0       	rjmp	.+152    	; 0x2f6 <malloc+0x14c>
     25e:	ca 01       	movw	r24, r20
     260:	86 1b       	sub	r24, r22
     262:	97 0b       	sbc	r25, r23
     264:	fd 01       	movw	r30, r26
     266:	e8 0f       	add	r30, r24
     268:	f9 1f       	adc	r31, r25
     26a:	61 93       	st	Z+, r22
     26c:	71 93       	st	Z+, r23
     26e:	02 97       	sbiw	r24, 0x02	; 2
     270:	8d 93       	st	X+, r24
     272:	9c 93       	st	X, r25
     274:	40 c0       	rjmp	.+128    	; 0x2f6 <malloc+0x14c>
     276:	fd 01       	movw	r30, r26
     278:	82 81       	ldd	r24, Z+2	; 0x02
     27a:	93 81       	ldd	r25, Z+3	; 0x03
     27c:	9c 01       	movw	r18, r24
     27e:	d9 01       	movw	r26, r18
     280:	10 97       	sbiw	r26, 0x00	; 0
     282:	a1 f6       	brne	.-88     	; 0x22c <malloc+0x82>
     284:	80 91 a0 03 	lds	r24, 0x03A0
     288:	90 91 a1 03 	lds	r25, 0x03A1
     28c:	89 2b       	or	r24, r25
     28e:	41 f4       	brne	.+16     	; 0x2a0 <malloc+0xf6>
     290:	80 91 7c 01 	lds	r24, 0x017C
     294:	90 91 7d 01 	lds	r25, 0x017D
     298:	90 93 a1 03 	sts	0x03A1, r25
     29c:	80 93 a0 03 	sts	0x03A0, r24
     2a0:	40 91 7e 01 	lds	r20, 0x017E
     2a4:	50 91 7f 01 	lds	r21, 0x017F
     2a8:	41 15       	cp	r20, r1
     2aa:	51 05       	cpc	r21, r1
     2ac:	41 f4       	brne	.+16     	; 0x2be <malloc+0x114>
     2ae:	4d b7       	in	r20, 0x3d	; 61
     2b0:	5e b7       	in	r21, 0x3e	; 62
     2b2:	80 91 7a 01 	lds	r24, 0x017A
     2b6:	90 91 7b 01 	lds	r25, 0x017B
     2ba:	48 1b       	sub	r20, r24
     2bc:	59 0b       	sbc	r21, r25
     2be:	20 91 a0 03 	lds	r18, 0x03A0
     2c2:	30 91 a1 03 	lds	r19, 0x03A1
     2c6:	ca 01       	movw	r24, r20
     2c8:	82 1b       	sub	r24, r18
     2ca:	93 0b       	sbc	r25, r19
     2cc:	86 17       	cp	r24, r22
     2ce:	97 07       	cpc	r25, r23
     2d0:	80 f0       	brcs	.+32     	; 0x2f2 <malloc+0x148>
     2d2:	ab 01       	movw	r20, r22
     2d4:	4e 5f       	subi	r20, 0xFE	; 254
     2d6:	5f 4f       	sbci	r21, 0xFF	; 255
     2d8:	84 17       	cp	r24, r20
     2da:	95 07       	cpc	r25, r21
     2dc:	50 f0       	brcs	.+20     	; 0x2f2 <malloc+0x148>
     2de:	42 0f       	add	r20, r18
     2e0:	53 1f       	adc	r21, r19
     2e2:	50 93 a1 03 	sts	0x03A1, r21
     2e6:	40 93 a0 03 	sts	0x03A0, r20
     2ea:	f9 01       	movw	r30, r18
     2ec:	61 93       	st	Z+, r22
     2ee:	71 93       	st	Z+, r23
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <malloc+0x14c>
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	cf 01       	movw	r24, r30
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <free>:
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	09 f4       	brne	.+2      	; 0x308 <free+0xa>
     306:	50 c0       	rjmp	.+160    	; 0x3a8 <free+0xaa>
     308:	ec 01       	movw	r28, r24
     30a:	22 97       	sbiw	r28, 0x02	; 2
     30c:	1b 82       	std	Y+3, r1	; 0x03
     30e:	1a 82       	std	Y+2, r1	; 0x02
     310:	a0 91 a2 03 	lds	r26, 0x03A2
     314:	b0 91 a3 03 	lds	r27, 0x03A3
     318:	10 97       	sbiw	r26, 0x00	; 0
     31a:	09 f1       	breq	.+66     	; 0x35e <free+0x60>
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	ac 17       	cp	r26, r28
     322:	bd 07       	cpc	r27, r29
     324:	08 f1       	brcs	.+66     	; 0x368 <free+0x6a>
     326:	bb 83       	std	Y+3, r27	; 0x03
     328:	aa 83       	std	Y+2, r26	; 0x02
     32a:	fe 01       	movw	r30, r28
     32c:	21 91       	ld	r18, Z+
     32e:	31 91       	ld	r19, Z+
     330:	e2 0f       	add	r30, r18
     332:	f3 1f       	adc	r31, r19
     334:	ae 17       	cp	r26, r30
     336:	bf 07       	cpc	r27, r31
     338:	79 f4       	brne	.+30     	; 0x358 <free+0x5a>
     33a:	8d 91       	ld	r24, X+
     33c:	9c 91       	ld	r25, X
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	28 0f       	add	r18, r24
     342:	39 1f       	adc	r19, r25
     344:	2e 5f       	subi	r18, 0xFE	; 254
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	39 83       	std	Y+1, r19	; 0x01
     34a:	28 83       	st	Y, r18
     34c:	12 96       	adiw	r26, 0x02	; 2
     34e:	8d 91       	ld	r24, X+
     350:	9c 91       	ld	r25, X
     352:	13 97       	sbiw	r26, 0x03	; 3
     354:	9b 83       	std	Y+3, r25	; 0x03
     356:	8a 83       	std	Y+2, r24	; 0x02
     358:	41 15       	cp	r20, r1
     35a:	51 05       	cpc	r21, r1
     35c:	71 f4       	brne	.+28     	; 0x37a <free+0x7c>
     35e:	d0 93 a3 03 	sts	0x03A3, r29
     362:	c0 93 a2 03 	sts	0x03A2, r28
     366:	20 c0       	rjmp	.+64     	; 0x3a8 <free+0xaa>
     368:	12 96       	adiw	r26, 0x02	; 2
     36a:	8d 91       	ld	r24, X+
     36c:	9c 91       	ld	r25, X
     36e:	13 97       	sbiw	r26, 0x03	; 3
     370:	ad 01       	movw	r20, r26
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	11 f0       	breq	.+4      	; 0x37a <free+0x7c>
     376:	dc 01       	movw	r26, r24
     378:	d3 cf       	rjmp	.-90     	; 0x320 <free+0x22>
     37a:	fa 01       	movw	r30, r20
     37c:	d3 83       	std	Z+3, r29	; 0x03
     37e:	c2 83       	std	Z+2, r28	; 0x02
     380:	21 91       	ld	r18, Z+
     382:	31 91       	ld	r19, Z+
     384:	e2 0f       	add	r30, r18
     386:	f3 1f       	adc	r31, r19
     388:	ce 17       	cp	r28, r30
     38a:	df 07       	cpc	r29, r31
     38c:	69 f4       	brne	.+26     	; 0x3a8 <free+0xaa>
     38e:	88 81       	ld	r24, Y
     390:	99 81       	ldd	r25, Y+1	; 0x01
     392:	28 0f       	add	r18, r24
     394:	39 1f       	adc	r19, r25
     396:	2e 5f       	subi	r18, 0xFE	; 254
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	fa 01       	movw	r30, r20
     39c:	31 83       	std	Z+1, r19	; 0x01
     39e:	20 83       	st	Z, r18
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	9b 81       	ldd	r25, Y+3	; 0x03
     3a4:	93 83       	std	Z+3, r25	; 0x03
     3a6:	82 83       	std	Z+2, r24	; 0x02
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <realloc>:
     3ae:	a0 e0       	ldi	r26, 0x00	; 0
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	ed ed       	ldi	r30, 0xDD	; 221
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
     3b6:	0c 94 47 11 	jmp	0x228e	; 0x228e <__prologue_saves__+0x4>
     3ba:	6c 01       	movw	r12, r24
     3bc:	00 97       	sbiw	r24, 0x00	; 0
     3be:	29 f4       	brne	.+10     	; 0x3ca <realloc+0x1c>
     3c0:	cb 01       	movw	r24, r22
     3c2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <malloc>
     3c6:	6c 01       	movw	r12, r24
     3c8:	c1 c0       	rjmp	.+386    	; 0x54c <realloc+0x19e>
     3ca:	8e ef       	ldi	r24, 0xFE	; 254
     3cc:	88 2e       	mov	r8, r24
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	98 2e       	mov	r9, r24
     3d2:	8c 0c       	add	r8, r12
     3d4:	9d 1c       	adc	r9, r13
     3d6:	86 01       	movw	r16, r12
     3d8:	06 0f       	add	r16, r22
     3da:	17 1f       	adc	r17, r23
     3dc:	08 15       	cp	r16, r8
     3de:	19 05       	cpc	r17, r9
     3e0:	08 f4       	brcc	.+2      	; 0x3e4 <realloc+0x36>
     3e2:	b2 c0       	rjmp	.+356    	; 0x548 <realloc+0x19a>
     3e4:	f4 01       	movw	r30, r8
     3e6:	a0 81       	ld	r26, Z
     3e8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ea:	a6 17       	cp	r26, r22
     3ec:	b7 07       	cpc	r27, r23
     3ee:	b8 f0       	brcs	.+46     	; 0x41e <realloc+0x70>
     3f0:	a5 30       	cpi	r26, 0x05	; 5
     3f2:	b1 05       	cpc	r27, r1
     3f4:	08 f4       	brcc	.+2      	; 0x3f8 <realloc+0x4a>
     3f6:	aa c0       	rjmp	.+340    	; 0x54c <realloc+0x19e>
     3f8:	cd 01       	movw	r24, r26
     3fa:	04 97       	sbiw	r24, 0x04	; 4
     3fc:	86 17       	cp	r24, r22
     3fe:	97 07       	cpc	r25, r23
     400:	08 f4       	brcc	.+2      	; 0x404 <realloc+0x56>
     402:	a4 c0       	rjmp	.+328    	; 0x54c <realloc+0x19e>
     404:	12 97       	sbiw	r26, 0x02	; 2
     406:	a6 1b       	sub	r26, r22
     408:	b7 0b       	sbc	r27, r23
     40a:	f8 01       	movw	r30, r16
     40c:	a1 93       	st	Z+, r26
     40e:	b1 93       	st	Z+, r27
     410:	d4 01       	movw	r26, r8
     412:	6d 93       	st	X+, r22
     414:	7c 93       	st	X, r23
     416:	cf 01       	movw	r24, r30
     418:	0e 94 7f 01 	call	0x2fe	; 0x2fe <free>
     41c:	97 c0       	rjmp	.+302    	; 0x54c <realloc+0x19e>
     41e:	7b 01       	movw	r14, r22
     420:	ea 1a       	sub	r14, r26
     422:	fb 0a       	sbc	r15, r27
     424:	ee ef       	ldi	r30, 0xFE	; 254
     426:	ff ef       	ldi	r31, 0xFF	; 255
     428:	ee 0e       	add	r14, r30
     42a:	ff 1e       	adc	r15, r31
     42c:	36 01       	movw	r6, r12
     42e:	6a 0e       	add	r6, r26
     430:	7b 1e       	adc	r7, r27
     432:	c0 91 a2 03 	lds	r28, 0x03A2
     436:	d0 91 a3 03 	lds	r29, 0x03A3
     43a:	44 24       	eor	r4, r4
     43c:	55 24       	eor	r5, r5
     43e:	aa 24       	eor	r10, r10
     440:	bb 24       	eor	r11, r11
     442:	4a c0       	rjmp	.+148    	; 0x4d8 <realloc+0x12a>
     444:	c6 15       	cp	r28, r6
     446:	d7 05       	cpc	r29, r7
     448:	e1 f5       	brne	.+120    	; 0x4c2 <realloc+0x114>
     44a:	48 81       	ld	r20, Y
     44c:	59 81       	ldd	r21, Y+1	; 0x01
     44e:	4e 15       	cp	r20, r14
     450:	5f 05       	cpc	r21, r15
     452:	b8 f1       	brcs	.+110    	; 0x4c2 <realloc+0x114>
     454:	ca 01       	movw	r24, r20
     456:	04 97       	sbiw	r24, 0x04	; 4
     458:	8e 15       	cp	r24, r14
     45a:	9f 05       	cpc	r25, r15
     45c:	b0 f4       	brcc	.+44     	; 0x48a <realloc+0xdc>
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	a4 0f       	add	r26, r20
     462:	b5 1f       	adc	r27, r21
     464:	f4 01       	movw	r30, r8
     466:	b1 83       	std	Z+1, r27	; 0x01
     468:	a0 83       	st	Z, r26
     46a:	2a 81       	ldd	r18, Y+2	; 0x02
     46c:	3b 81       	ldd	r19, Y+3	; 0x03
     46e:	41 14       	cp	r4, r1
     470:	51 04       	cpc	r5, r1
     472:	31 f0       	breq	.+12     	; 0x480 <realloc+0xd2>
     474:	d2 01       	movw	r26, r4
     476:	13 96       	adiw	r26, 0x03	; 3
     478:	3c 93       	st	X, r19
     47a:	2e 93       	st	-X, r18
     47c:	12 97       	sbiw	r26, 0x02	; 2
     47e:	66 c0       	rjmp	.+204    	; 0x54c <realloc+0x19e>
     480:	30 93 a3 03 	sts	0x03A3, r19
     484:	20 93 a2 03 	sts	0x03A2, r18
     488:	61 c0       	rjmp	.+194    	; 0x54c <realloc+0x19e>
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	9b 81       	ldd	r25, Y+3	; 0x03
     48e:	f8 01       	movw	r30, r16
     490:	93 83       	std	Z+3, r25	; 0x03
     492:	82 83       	std	Z+2, r24	; 0x02
     494:	42 50       	subi	r20, 0x02	; 2
     496:	50 40       	sbci	r21, 0x00	; 0
     498:	4e 19       	sub	r20, r14
     49a:	5f 09       	sbc	r21, r15
     49c:	51 83       	std	Z+1, r21	; 0x01
     49e:	40 83       	st	Z, r20
     4a0:	41 14       	cp	r4, r1
     4a2:	51 04       	cpc	r5, r1
     4a4:	31 f0       	breq	.+12     	; 0x4b2 <realloc+0x104>
     4a6:	d2 01       	movw	r26, r4
     4a8:	13 96       	adiw	r26, 0x03	; 3
     4aa:	1c 93       	st	X, r17
     4ac:	0e 93       	st	-X, r16
     4ae:	12 97       	sbiw	r26, 0x02	; 2
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <realloc+0x10c>
     4b2:	10 93 a3 03 	sts	0x03A3, r17
     4b6:	00 93 a2 03 	sts	0x03A2, r16
     4ba:	f4 01       	movw	r30, r8
     4bc:	71 83       	std	Z+1, r23	; 0x01
     4be:	60 83       	st	Z, r22
     4c0:	45 c0       	rjmp	.+138    	; 0x54c <realloc+0x19e>
     4c2:	88 81       	ld	r24, Y
     4c4:	99 81       	ldd	r25, Y+1	; 0x01
     4c6:	a8 16       	cp	r10, r24
     4c8:	b9 06       	cpc	r11, r25
     4ca:	08 f4       	brcc	.+2      	; 0x4ce <realloc+0x120>
     4cc:	5c 01       	movw	r10, r24
     4ce:	2e 01       	movw	r4, r28
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	9b 81       	ldd	r25, Y+3	; 0x03
     4d4:	9c 01       	movw	r18, r24
     4d6:	e9 01       	movw	r28, r18
     4d8:	20 97       	sbiw	r28, 0x00	; 0
     4da:	09 f0       	breq	.+2      	; 0x4de <realloc+0x130>
     4dc:	b3 cf       	rjmp	.-154    	; 0x444 <realloc+0x96>
     4de:	80 91 a0 03 	lds	r24, 0x03A0
     4e2:	90 91 a1 03 	lds	r25, 0x03A1
     4e6:	86 15       	cp	r24, r6
     4e8:	97 05       	cpc	r25, r7
     4ea:	e9 f4       	brne	.+58     	; 0x526 <realloc+0x178>
     4ec:	a6 16       	cp	r10, r22
     4ee:	b7 06       	cpc	r11, r23
     4f0:	d0 f4       	brcc	.+52     	; 0x526 <realloc+0x178>
     4f2:	20 91 7e 01 	lds	r18, 0x017E
     4f6:	30 91 7f 01 	lds	r19, 0x017F
     4fa:	21 15       	cp	r18, r1
     4fc:	31 05       	cpc	r19, r1
     4fe:	41 f4       	brne	.+16     	; 0x510 <realloc+0x162>
     500:	2d b7       	in	r18, 0x3d	; 61
     502:	3e b7       	in	r19, 0x3e	; 62
     504:	80 91 7a 01 	lds	r24, 0x017A
     508:	90 91 7b 01 	lds	r25, 0x017B
     50c:	28 1b       	sub	r18, r24
     50e:	39 0b       	sbc	r19, r25
     510:	02 17       	cp	r16, r18
     512:	13 07       	cpc	r17, r19
     514:	c8 f4       	brcc	.+50     	; 0x548 <realloc+0x19a>
     516:	10 93 a1 03 	sts	0x03A1, r17
     51a:	00 93 a0 03 	sts	0x03A0, r16
     51e:	d4 01       	movw	r26, r8
     520:	6d 93       	st	X+, r22
     522:	7c 93       	st	X, r23
     524:	13 c0       	rjmp	.+38     	; 0x54c <realloc+0x19e>
     526:	cb 01       	movw	r24, r22
     528:	0e 94 d5 00 	call	0x1aa	; 0x1aa <malloc>
     52c:	ec 01       	movw	r28, r24
     52e:	00 97       	sbiw	r24, 0x00	; 0
     530:	59 f0       	breq	.+22     	; 0x548 <realloc+0x19a>
     532:	f4 01       	movw	r30, r8
     534:	40 81       	ld	r20, Z
     536:	51 81       	ldd	r21, Z+1	; 0x01
     538:	b6 01       	movw	r22, r12
     53a:	0e 94 ac 02 	call	0x558	; 0x558 <memcpy>
     53e:	c6 01       	movw	r24, r12
     540:	0e 94 7f 01 	call	0x2fe	; 0x2fe <free>
     544:	6e 01       	movw	r12, r28
     546:	02 c0       	rjmp	.+4      	; 0x54c <realloc+0x19e>
     548:	cc 24       	eor	r12, r12
     54a:	dd 24       	eor	r13, r13
     54c:	c6 01       	movw	r24, r12
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	e0 e1       	ldi	r30, 0x10	; 16
     554:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__epilogue_restores__+0x4>

00000558 <memcpy>:
     558:	fb 01       	movw	r30, r22
     55a:	dc 01       	movw	r26, r24
     55c:	02 c0       	rjmp	.+4      	; 0x562 <memcpy+0xa>
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	41 50       	subi	r20, 0x01	; 1
     564:	50 40       	sbci	r21, 0x00	; 0
     566:	d8 f7       	brcc	.-10     	; 0x55e <memcpy+0x6>
     568:	08 95       	ret

0000056a <strcpy>:
     56a:	fb 01       	movw	r30, r22
     56c:	dc 01       	movw	r26, r24
     56e:	01 90       	ld	r0, Z+
     570:	0d 92       	st	X+, r0
     572:	00 20       	and	r0, r0
     574:	e1 f7       	brne	.-8      	; 0x56e <strcpy+0x4>
     576:	08 95       	ret

00000578 <strncpy>:
     578:	fb 01       	movw	r30, r22
     57a:	dc 01       	movw	r26, r24
     57c:	41 50       	subi	r20, 0x01	; 1
     57e:	50 40       	sbci	r21, 0x00	; 0
     580:	48 f0       	brcs	.+18     	; 0x594 <strncpy+0x1c>
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	00 20       	and	r0, r0
     588:	c9 f7       	brne	.-14     	; 0x57c <strncpy+0x4>
     58a:	01 c0       	rjmp	.+2      	; 0x58e <strncpy+0x16>
     58c:	1d 92       	st	X+, r1
     58e:	41 50       	subi	r20, 0x01	; 1
     590:	50 40       	sbci	r21, 0x00	; 0
     592:	e0 f7       	brcc	.-8      	; 0x58c <strncpy+0x14>
     594:	08 95       	ret

00000596 <itoa>:
     596:	fb 01       	movw	r30, r22
     598:	9f 01       	movw	r18, r30
     59a:	e8 94       	clt
     59c:	42 30       	cpi	r20, 0x02	; 2
     59e:	c4 f0       	brlt	.+48     	; 0x5d0 <itoa+0x3a>
     5a0:	45 32       	cpi	r20, 0x25	; 37
     5a2:	b4 f4       	brge	.+44     	; 0x5d0 <itoa+0x3a>
     5a4:	4a 30       	cpi	r20, 0x0A	; 10
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <itoa+0x1c>
     5a8:	97 fb       	bst	r25, 7
     5aa:	1e f4       	brtc	.+6      	; 0x5b2 <itoa+0x1c>
     5ac:	90 95       	com	r25
     5ae:	81 95       	neg	r24
     5b0:	9f 4f       	sbci	r25, 0xFF	; 255
     5b2:	64 2f       	mov	r22, r20
     5b4:	77 27       	eor	r23, r23
     5b6:	0e 94 2b 11 	call	0x2256	; 0x2256 <__udivmodhi4>
     5ba:	80 5d       	subi	r24, 0xD0	; 208
     5bc:	8a 33       	cpi	r24, 0x3A	; 58
     5be:	0c f0       	brlt	.+2      	; 0x5c2 <itoa+0x2c>
     5c0:	89 5d       	subi	r24, 0xD9	; 217
     5c2:	81 93       	st	Z+, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	a1 f7       	brne	.-24     	; 0x5b2 <itoa+0x1c>
     5ca:	16 f4       	brtc	.+4      	; 0x5d0 <itoa+0x3a>
     5cc:	5d e2       	ldi	r21, 0x2D	; 45
     5ce:	51 93       	st	Z+, r21
     5d0:	10 82       	st	Z, r1
     5d2:	c9 01       	movw	r24, r18
     5d4:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <strrev>

000005d8 <strrev>:
     5d8:	dc 01       	movw	r26, r24
     5da:	fc 01       	movw	r30, r24
     5dc:	67 2f       	mov	r22, r23
     5de:	71 91       	ld	r23, Z+
     5e0:	77 23       	and	r23, r23
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <strrev+0x4>
     5e4:	32 97       	sbiw	r30, 0x02	; 2
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <strrev+0x18>
     5e8:	7c 91       	ld	r23, X
     5ea:	6d 93       	st	X+, r22
     5ec:	70 83       	st	Z, r23
     5ee:	62 91       	ld	r22, -Z
     5f0:	ae 17       	cp	r26, r30
     5f2:	bf 07       	cpc	r27, r31
     5f4:	c8 f3       	brcs	.-14     	; 0x5e8 <strrev+0x10>
     5f6:	08 95       	ret

000005f8 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	fc 01       	movw	r30, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     602:	73 8d       	ldd	r23, Z+27	; 0x1b
     604:	76 95       	lsr	r23
     606:	71 70       	andi	r23, 0x01	; 1
     608:	a6 85       	ldd	r26, Z+14	; 0x0e
     60a:	b7 85       	ldd	r27, Z+15	; 0x0f
     60c:	95 85       	ldd	r25, Z+13	; 0x0d
     60e:	77 23       	and	r23, r23
     610:	29 f0       	breq	.+10     	; 0x61c <_ZN14SoftwareSerial4recvEv+0x24>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     612:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     614:	89 23       	and	r24, r25
     616:	09 f4       	brne	.+2      	; 0x61a <_ZN14SoftwareSerial4recvEv+0x22>
     618:	54 c0       	rjmp	.+168    	; 0x6c2 <_ZN14SoftwareSerial4recvEv+0xca>
     61a:	04 c0       	rjmp	.+8      	; 0x624 <_ZN14SoftwareSerial4recvEv+0x2c>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     61c:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     61e:	89 23       	and	r24, r25
     620:	09 f0       	breq	.+2      	; 0x624 <_ZN14SoftwareSerial4recvEv+0x2c>
     622:	4f c0       	rjmp	.+158    	; 0x6c2 <_ZN14SoftwareSerial4recvEv+0xca>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     624:	83 89       	ldd	r24, Z+19	; 0x13
     626:	94 89       	ldd	r25, Z+20	; 0x14
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	8f 3f       	cpi	r24, 0xFF	; 255
     630:	92 07       	cpc	r25, r18
     632:	d9 f7       	brne	.-10     	; 0x62a <_ZN14SoftwareSerial4recvEv+0x32>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
     634:	c5 89       	ldd	r28, Z+21	; 0x15
     636:	d6 89       	ldd	r29, Z+22	; 0x16
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     638:	a6 85       	ldd	r26, Z+14	; 0x0e
     63a:	b7 85       	ldd	r27, Z+15	; 0x0f
     63c:	15 85       	ldd	r17, Z+13	; 0x0d
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	31 e0       	ldi	r19, 0x01	; 1
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	ce 01       	movw	r24, r28
     64a:	20 2f       	mov	r18, r16
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	2f ef       	ldi	r18, 0xFF	; 255
     650:	8f 3f       	cpi	r24, 0xFF	; 255
     652:	92 07       	cpc	r25, r18
     654:	d9 f7       	brne	.-10     	; 0x64c <_ZN14SoftwareSerial4recvEv+0x54>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     656:	8c 91       	ld	r24, X
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     658:	81 23       	and	r24, r17
     65a:	11 f0       	breq	.+4      	; 0x660 <_ZN14SoftwareSerial4recvEv+0x68>
        d |= i;
     65c:	63 2b       	or	r22, r19
     65e:	03 c0       	rjmp	.+6      	; 0x666 <_ZN14SoftwareSerial4recvEv+0x6e>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     660:	83 2f       	mov	r24, r19
     662:	80 95       	com	r24
     664:	68 23       	and	r22, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     666:	33 0f       	add	r19, r19
     668:	4f 5f       	subi	r20, 0xFF	; 255
     66a:	5f 4f       	sbci	r21, 0xFF	; 255
     66c:	48 30       	cpi	r20, 0x08	; 8
     66e:	51 05       	cpc	r21, r1
     670:	59 f7       	brne	.-42     	; 0x648 <_ZN14SoftwareSerial4recvEv+0x50>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     672:	87 89       	ldd	r24, Z+23	; 0x17
     674:	90 8d       	ldd	r25, Z+24	; 0x18
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	2f ef       	ldi	r18, 0xFF	; 255
     67c:	8f 3f       	cpi	r24, 0xFF	; 255
     67e:	92 07       	cpc	r25, r18
     680:	d9 f7       	brne	.-10     	; 0x678 <_ZN14SoftwareSerial4recvEv+0x80>

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     682:	71 11       	cpse	r23, r1
      d = ~d;
     684:	60 95       	com	r22

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     686:	80 91 f8 01 	lds	r24, 0x01F8
     68a:	20 91 f9 01 	lds	r18, 0x01F9
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	8f 73       	andi	r24, 0x3F	; 63
     694:	90 70       	andi	r25, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	82 17       	cp	r24, r18
     69a:	93 07       	cpc	r25, r19
     69c:	79 f0       	breq	.+30     	; 0x6bc <_ZN14SoftwareSerial4recvEv+0xc4>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     69e:	e0 91 f8 01 	lds	r30, 0x01F8
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	e8 54       	subi	r30, 0x48	; 72
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	60 83       	st	Z, r22
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     6aa:	80 91 f8 01 	lds	r24, 0x01F8
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	8f 73       	andi	r24, 0x3F	; 63
     6b4:	90 70       	andi	r25, 0x00	; 0
     6b6:	80 93 f8 01 	sts	0x01F8, r24
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <_ZN14SoftwareSerial4recvEv+0xca>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     6bc:	83 8d       	ldd	r24, Z+27	; 0x1b
     6be:	81 60       	ori	r24, 0x01	; 1
     6c0:	83 8f       	std	Z+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <__vector_3>:
    active_object->recv();
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	2f 93       	push	r18
     6d8:	3f 93       	push	r19
     6da:	4f 93       	push	r20
     6dc:	5f 93       	push	r21
     6de:	6f 93       	push	r22
     6e0:	7f 93       	push	r23
     6e2:	8f 93       	push	r24
     6e4:	9f 93       	push	r25
     6e6:	af 93       	push	r26
     6e8:	bf 93       	push	r27
     6ea:	ef 93       	push	r30
     6ec:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     6ee:	80 91 b6 01 	lds	r24, 0x01B6
     6f2:	90 91 b7 01 	lds	r25, 0x01B7
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	11 f0       	breq	.+4      	; 0x6fe <__vector_3+0x32>
  {
    active_object->recv();
     6fa:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     742:	80 91 b6 01 	lds	r24, 0x01B6
     746:	90 91 b7 01 	lds	r25, 0x01B7
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	11 f0       	breq	.+4      	; 0x752 <__vector_4+0x32>
  {
    active_object->recv();
     74e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
  SoftwareSerial::handle_interrupt();
}
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     796:	80 91 b6 01 	lds	r24, 0x01B6
     79a:	90 91 b7 01 	lds	r25, 0x01B7
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	11 f0       	breq	.+4      	; 0x7a6 <__vector_5+0x32>
  {
    active_object->recv();
     7a2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
  SoftwareSerial::handle_interrupt();
}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <_ZN14SoftwareSerial5beginEl>:

//
// Public methods
//

void SoftwareSerial::begin(long speed)
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	7a 01       	movw	r14, r20
     7dc:	8b 01       	movw	r16, r22
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     7de:	1a 8e       	std	Y+26, r1	; 0x1a
     7e0:	19 8e       	std	Y+25, r1	; 0x19
     7e2:	18 8e       	std	Y+24, r1	; 0x18
     7e4:	1f 8a       	std	Y+23, r1	; 0x17
     7e6:	1e 8a       	std	Y+22, r1	; 0x16
     7e8:	1d 8a       	std	Y+21, r1	; 0x15
     7ea:	1c 8a       	std	Y+20, r1	; 0x14
     7ec:	1b 8a       	std	Y+19, r1	; 0x13
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  {
    long baud = pgm_read_dword(&table[i].baud);
     7f2:	69 01       	movw	r12, r18
     7f4:	cc 0c       	add	r12, r12
     7f6:	dd 1c       	adc	r13, r13
     7f8:	c2 0e       	add	r12, r18
     7fa:	d3 1e       	adc	r13, r19
     7fc:	b6 01       	movw	r22, r12
     7fe:	66 0f       	add	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	66 0f       	add	r22, r22
     804:	77 1f       	adc	r23, r23
     806:	ab 01       	movw	r20, r22
     808:	48 59       	subi	r20, 0x98	; 152
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	fa 01       	movw	r30, r20
     80e:	85 91       	lpm	r24, Z+
     810:	95 91       	lpm	r25, Z+
     812:	a5 91       	lpm	r26, Z+
     814:	b4 91       	lpm	r27, Z+
    if (baud == speed)
     816:	8e 15       	cp	r24, r14
     818:	9f 05       	cpc	r25, r15
     81a:	a0 07       	cpc	r26, r16
     81c:	b1 07       	cpc	r27, r17
     81e:	e9 f4       	brne	.+58     	; 0x85a <_ZN14SoftwareSerial5beginEl+0x92>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     820:	fb 01       	movw	r30, r22
     822:	e4 59       	subi	r30, 0x94	; 148
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	85 91       	lpm	r24, Z+
     828:	94 91       	lpm	r25, Z+
     82a:	9c 8b       	std	Y+20, r25	; 0x14
     82c:	8b 8b       	std	Y+19, r24	; 0x13
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     82e:	fb 01       	movw	r30, r22
     830:	e2 59       	subi	r30, 0x92	; 146
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	85 91       	lpm	r24, Z+
     836:	94 91       	lpm	r25, Z+
     838:	9e 8b       	std	Y+22, r25	; 0x16
     83a:	8d 8b       	std	Y+21, r24	; 0x15
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     83c:	fb 01       	movw	r30, r22
     83e:	e0 59       	subi	r30, 0x90	; 144
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	85 91       	lpm	r24, Z+
     844:	94 91       	lpm	r25, Z+
     846:	98 8f       	std	Y+24, r25	; 0x18
     848:	8f 8b       	std	Y+23, r24	; 0x17
      _tx_delay = pgm_read_word(&table[i].tx_delay);
     84a:	fb 01       	movw	r30, r22
     84c:	ee 58       	subi	r30, 0x8E	; 142
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	85 91       	lpm	r24, Z+
     852:	94 91       	lpm	r25, Z+
     854:	9a 8f       	std	Y+26, r25	; 0x1a
     856:	89 8f       	std	Y+25, r24	; 0x19
     858:	06 c0       	rjmp	.+12     	; 0x866 <_ZN14SoftwareSerial5beginEl+0x9e>

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	2c 30       	cpi	r18, 0x0C	; 12
     860:	31 05       	cpc	r19, r1
     862:	09 f0       	breq	.+2      	; 0x866 <_ZN14SoftwareSerial5beginEl+0x9e>
     864:	c6 cf       	rjmp	.-116    	; 0x7f2 <_ZN14SoftwareSerial5beginEl+0x2a>
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
     866:	8f 89       	ldd	r24, Y+23	; 0x17
     868:	98 8d       	ldd	r25, Y+24	; 0x18
     86a:	89 2b       	or	r24, r25
     86c:	09 f4       	brne	.+2      	; 0x870 <_ZN14SoftwareSerial5beginEl+0xa8>
     86e:	49 c0       	rjmp	.+146    	; 0x902 <__stack+0x3>
  {
    if (digitalPinToPCICR(_receivePin))
     870:	4c 85       	ldd	r20, Y+12	; 0x0c
     872:	46 31       	cpi	r20, 0x16	; 22
     874:	08 f0       	brcs	.+2      	; 0x878 <_ZN14SoftwareSerial5beginEl+0xb0>
     876:	3d c0       	rjmp	.+122    	; 0x8f2 <_ZN14SoftwareSerial5beginEl+0x12a>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     878:	90 91 68 00 	lds	r25, 0x0068
     87c:	48 30       	cpi	r20, 0x08	; 8
     87e:	10 f4       	brcc	.+4      	; 0x884 <_ZN14SoftwareSerial5beginEl+0xbc>
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	05 c0       	rjmp	.+10     	; 0x88e <_ZN14SoftwareSerial5beginEl+0xc6>
     884:	4e 30       	cpi	r20, 0x0E	; 14
     886:	10 f0       	brcs	.+4      	; 0x88c <_ZN14SoftwareSerial5beginEl+0xc4>
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	01 c0       	rjmp	.+2      	; 0x88e <_ZN14SoftwareSerial5beginEl+0xc6>
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	89 2b       	or	r24, r25
     890:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     894:	48 30       	cpi	r20, 0x08	; 8
     896:	28 f4       	brcc	.+10     	; 0x8a2 <_ZN14SoftwareSerial5beginEl+0xda>
     898:	ed e6       	ldi	r30, 0x6D	; 109
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	ad e6       	ldi	r26, 0x6D	; 109
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <_ZN14SoftwareSerial5beginEl+0xf0>
     8a2:	4e 30       	cpi	r20, 0x0E	; 14
     8a4:	28 f0       	brcs	.+10     	; 0x8b0 <_ZN14SoftwareSerial5beginEl+0xe8>
     8a6:	ec e6       	ldi	r30, 0x6C	; 108
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	ac e6       	ldi	r26, 0x6C	; 108
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <_ZN14SoftwareSerial5beginEl+0xf0>
     8b0:	eb e6       	ldi	r30, 0x6B	; 107
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	ab e6       	ldi	r26, 0x6B	; 107
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	50 81       	ld	r21, Z
     8ba:	48 30       	cpi	r20, 0x08	; 8
     8bc:	40 f4       	brcc	.+16     	; 0x8ce <_ZN14SoftwareSerial5beginEl+0x106>
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <_ZN14SoftwareSerial5beginEl+0x100>
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	4a 95       	dec	r20
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <_ZN14SoftwareSerial5beginEl+0xfc>
     8cc:	10 c0       	rjmp	.+32     	; 0x8ee <_ZN14SoftwareSerial5beginEl+0x126>
     8ce:	24 2f       	mov	r18, r20
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	4e 30       	cpi	r20, 0x0E	; 14
     8d4:	18 f4       	brcc	.+6      	; 0x8dc <_ZN14SoftwareSerial5beginEl+0x114>
     8d6:	28 50       	subi	r18, 0x08	; 8
     8d8:	30 40       	sbci	r19, 0x00	; 0
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <_ZN14SoftwareSerial5beginEl+0x118>
     8dc:	2e 50       	subi	r18, 0x0E	; 14
     8de:	30 40       	sbci	r19, 0x00	; 0
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <_ZN14SoftwareSerial5beginEl+0x122>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	2a 95       	dec	r18
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <_ZN14SoftwareSerial5beginEl+0x11e>
     8ee:	85 2b       	or	r24, r21
     8f0:	8c 93       	st	X, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
     8f2:	89 8d       	ldd	r24, Y+25	; 0x19
     8f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	8f 3f       	cpi	r24, 0xFF	; 255
     8fe:	92 07       	cpc	r25, r18
     900:	d9 f7       	brne	.-10     	; 0x8f8 <_ZN14SoftwareSerial5beginEl+0x130>

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (active_object != this)
     902:	80 91 b6 01 	lds	r24, 0x01B6
     906:	90 91 b7 01 	lds	r25, 0x01B7
     90a:	8c 17       	cp	r24, r28
     90c:	9d 07       	cpc	r25, r29
     90e:	81 f0       	breq	.+32     	; 0x930 <__stack+0x31>
  {
    _buffer_overflow = false;
     910:	8b 8d       	ldd	r24, Y+27	; 0x1b
     912:	8e 7f       	andi	r24, 0xFE	; 254
     914:	8b 8f       	std	Y+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
     916:	9f b7       	in	r25, 0x3f	; 63
    cli();
     918:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
     91a:	10 92 f8 01 	sts	0x01F8, r1
     91e:	80 91 f8 01 	lds	r24, 0x01F8
     922:	80 93 f9 01 	sts	0x01F9, r24
    active_object = this;
     926:	d0 93 b7 01 	sts	0x01B7, r29
     92a:	c0 93 b6 01 	sts	0x01B6, r28
    SREG = oldSREG;
     92e:	9f bf       	out	0x3f, r25	; 63
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	08 95       	ret

00000942 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     942:	20 91 b6 01 	lds	r18, 0x01B6
     946:	30 91 b7 01 	lds	r19, 0x01B7
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	31 f4       	brne	.+12     	; 0x95c <_ZN14SoftwareSerial4readEv+0x1a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     950:	90 91 f9 01 	lds	r25, 0x01F9
     954:	80 91 f8 01 	lds	r24, 0x01F8
     958:	98 17       	cp	r25, r24
     95a:	19 f4       	brne	.+6      	; 0x962 <_ZN14SoftwareSerial4readEv+0x20>
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	3f ef       	ldi	r19, 0xFF	; 255
     960:	0f c0       	rjmp	.+30     	; 0x980 <_ZN14SoftwareSerial4readEv+0x3e>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     962:	e0 91 f9 01 	lds	r30, 0x01F9
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	e8 54       	subi	r30, 0x48	; 72
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	20 81       	ld	r18, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     96e:	80 91 f9 01 	lds	r24, 0x01F9
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	8f 73       	andi	r24, 0x3F	; 63
     978:	90 70       	andi	r25, 0x00	; 0
     97a:	80 93 f9 01 	sts	0x01F9, r24
  return d;
     97e:	30 e0       	ldi	r19, 0x00	; 0
}
     980:	c9 01       	movw	r24, r18
     982:	08 95       	ret

00000984 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
     984:	20 91 b6 01 	lds	r18, 0x01B6
     988:	30 91 b7 01 	lds	r19, 0x01B7
     98c:	28 17       	cp	r18, r24
     98e:	39 07       	cpc	r19, r25
     990:	19 f0       	breq	.+6      	; 0x998 <_ZN14SoftwareSerial9availableEv+0x14>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	0e c0       	rjmp	.+28     	; 0x9b4 <_ZN14SoftwareSerial9availableEv+0x30>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     998:	80 91 f8 01 	lds	r24, 0x01F8
     99c:	20 91 f9 01 	lds	r18, 0x01F9
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	80 5c       	subi	r24, 0xC0	; 192
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	82 1b       	sub	r24, r18
     9a8:	91 09       	sbc	r25, r1
     9aa:	60 e4       	ldi	r22, 0x40	; 64
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__divmodhi4>
     9b2:	9c 01       	movw	r18, r24
}
     9b4:	c9 01       	movw	r24, r18
     9b6:	08 95       	ret

000009b8 <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	dc 01       	movw	r26, r24
{
  if (_tx_delay == 0) {
     9be:	59 96       	adiw	r26, 0x19	; 25
     9c0:	8d 91       	ld	r24, X+
     9c2:	9c 91       	ld	r25, X
     9c4:	5a 97       	sbiw	r26, 0x1a	; 26
     9c6:	89 2b       	or	r24, r25
     9c8:	49 f4       	brne	.+18     	; 0x9dc <_ZN14SoftwareSerial5writeEh+0x24>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	13 96       	adiw	r26, 0x03	; 3
     9d0:	9c 93       	st	X, r25
     9d2:	8e 93       	st	-X, r24
     9d4:	12 97       	sbiw	r26, 0x02	; 2
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	97 c0       	rjmp	.+302    	; 0xb0a <_ZN14SoftwareSerial5writeEh+0x152>
    setWriteError();
    return 0;
  }

  uint8_t oldSREG = SREG;
     9dc:	0f b7       	in	r16, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
     9de:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     9e0:	5b 96       	adiw	r26, 0x1b	; 27
     9e2:	8c 91       	ld	r24, X
     9e4:	5b 97       	sbiw	r26, 0x1b	; 27
     9e6:	51 96       	adiw	r26, 0x11	; 17
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	52 97       	sbiw	r26, 0x12	; 18
     9ee:	50 96       	adiw	r26, 0x10	; 16
     9f0:	2c 91       	ld	r18, X
     9f2:	50 97       	sbiw	r26, 0x10	; 16
     9f4:	81 ff       	sbrs	r24, 1
     9f6:	8d c0       	rjmp	.+282    	; 0xb12 <_ZN14SoftwareSerial5writeEh+0x15a>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     9f8:	80 81       	ld	r24, Z
     9fa:	82 2b       	or	r24, r18
     9fc:	80 83       	st	Z, r24
  uint8_t oldSREG = SREG;
  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     9fe:	59 96       	adiw	r26, 0x19	; 25
     a00:	8d 91       	ld	r24, X+
     a02:	9c 91       	ld	r25, X
     a04:	5a 97       	sbiw	r26, 0x1a	; 26
     a06:	05 96       	adiw	r24, 0x05	; 5
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	2f ef       	ldi	r18, 0xFF	; 255
     a0e:	8f 3f       	cpi	r24, 0xFF	; 255
     a10:	92 07       	cpc	r25, r18
     a12:	d9 f7       	brne	.-10     	; 0xa0a <_ZN14SoftwareSerial5writeEh+0x52>
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
     a14:	5b 96       	adiw	r26, 0x1b	; 27
     a16:	8c 91       	ld	r24, X
     a18:	5b 97       	sbiw	r26, 0x1b	; 27
     a1a:	81 ff       	sbrs	r24, 1
     a1c:	35 c0       	rjmp	.+106    	; 0xa88 <_ZN14SoftwareSerial5writeEh+0xd0>
     a1e:	31 e0       	ldi	r19, 0x01	; 1
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     a24:	70 e0       	ldi	r23, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     a26:	10 e0       	ldi	r17, 0x00	; 0
  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     a28:	83 2f       	mov	r24, r19
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	86 23       	and	r24, r22
     a2e:	97 23       	and	r25, r23
     a30:	51 96       	adiw	r26, 0x11	; 17
     a32:	ed 91       	ld	r30, X+
     a34:	fc 91       	ld	r31, X
     a36:	52 97       	sbiw	r26, 0x12	; 18
     a38:	50 96       	adiw	r26, 0x10	; 16
     a3a:	2c 91       	ld	r18, X
     a3c:	50 97       	sbiw	r26, 0x10	; 16
     a3e:	89 2b       	or	r24, r25
     a40:	29 f0       	breq	.+10     	; 0xa4c <_ZN14SoftwareSerial5writeEh+0x94>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     a42:	80 81       	ld	r24, Z
     a44:	20 95       	com	r18
     a46:	28 23       	and	r18, r24
     a48:	20 83       	st	Z, r18
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <_ZN14SoftwareSerial5writeEh+0x9a>
  else
    *_transmitPortRegister |= _transmitBitMask;
     a4c:	80 81       	ld	r24, Z
     a4e:	82 2b       	or	r24, r18
     a50:	80 83       	st	Z, r24
      if (b & mask) // choose bit
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
     a52:	59 96       	adiw	r26, 0x19	; 25
     a54:	8d 91       	ld	r24, X+
     a56:	9c 91       	ld	r25, X
     a58:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     a5a:	21 2f       	mov	r18, r17
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	2f ef       	ldi	r18, 0xFF	; 255
     a60:	8f 3f       	cpi	r24, 0xFF	; 255
     a62:	92 07       	cpc	r25, r18
     a64:	d9 f7       	brne	.-10     	; 0xa5c <_ZN14SoftwareSerial5writeEh+0xa4>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     a66:	33 0f       	add	r19, r19
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	48 30       	cpi	r20, 0x08	; 8
     a6e:	51 05       	cpc	r21, r1
     a70:	d9 f6       	brne	.-74     	; 0xa28 <_ZN14SoftwareSerial5writeEh+0x70>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     a72:	51 96       	adiw	r26, 0x11	; 17
     a74:	ed 91       	ld	r30, X+
     a76:	fc 91       	ld	r31, X
     a78:	52 97       	sbiw	r26, 0x12	; 18
     a7a:	90 81       	ld	r25, Z
     a7c:	50 96       	adiw	r26, 0x10	; 16
     a7e:	8c 91       	ld	r24, X
     a80:	50 97       	sbiw	r26, 0x10	; 16
     a82:	80 95       	com	r24
     a84:	89 23       	and	r24, r25
     a86:	33 c0       	rjmp	.+102    	; 0xaee <_ZN14SoftwareSerial5writeEh+0x136>
     a88:	31 e0       	ldi	r19, 0x01	; 1
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     a8e:	70 e0       	ldi	r23, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     a90:	10 e0       	ldi	r17, 0x00	; 0
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     a92:	83 2f       	mov	r24, r19
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	86 23       	and	r24, r22
     a98:	97 23       	and	r25, r23
     a9a:	51 96       	adiw	r26, 0x11	; 17
     a9c:	ed 91       	ld	r30, X+
     a9e:	fc 91       	ld	r31, X
     aa0:	52 97       	sbiw	r26, 0x12	; 18
     aa2:	50 96       	adiw	r26, 0x10	; 16
     aa4:	2c 91       	ld	r18, X
     aa6:	50 97       	sbiw	r26, 0x10	; 16
     aa8:	89 2b       	or	r24, r25
     aaa:	21 f0       	breq	.+8      	; 0xab4 <_ZN14SoftwareSerial5writeEh+0xfc>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     aac:	80 81       	ld	r24, Z
     aae:	82 2b       	or	r24, r18
     ab0:	80 83       	st	Z, r24
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <_ZN14SoftwareSerial5writeEh+0x104>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     ab4:	80 81       	ld	r24, Z
     ab6:	20 95       	com	r18
     ab8:	28 23       	and	r18, r24
     aba:	20 83       	st	Z, r18
      if (b & mask) // choose bit
        tx_pin_write(HIGH); // send 1
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
     abc:	59 96       	adiw	r26, 0x19	; 25
     abe:	8d 91       	ld	r24, X+
     ac0:	9c 91       	ld	r25, X
     ac2:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     ac4:	21 2f       	mov	r18, r17
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	2f ef       	ldi	r18, 0xFF	; 255
     aca:	8f 3f       	cpi	r24, 0xFF	; 255
     acc:	92 07       	cpc	r25, r18
     ace:	d9 f7       	brne	.-10     	; 0xac6 <_ZN14SoftwareSerial5writeEh+0x10e>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     ad0:	33 0f       	add	r19, r19
     ad2:	4f 5f       	subi	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	48 30       	cpi	r20, 0x08	; 8
     ad8:	51 05       	cpc	r21, r1
     ada:	d9 f6       	brne	.-74     	; 0xa92 <_ZN14SoftwareSerial5writeEh+0xda>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     adc:	51 96       	adiw	r26, 0x11	; 17
     ade:	ed 91       	ld	r30, X+
     ae0:	fc 91       	ld	r31, X
     ae2:	52 97       	sbiw	r26, 0x12	; 18
     ae4:	80 81       	ld	r24, Z
     ae6:	50 96       	adiw	r26, 0x10	; 16
     ae8:	9c 91       	ld	r25, X
     aea:	50 97       	sbiw	r26, 0x10	; 16
     aec:	89 2b       	or	r24, r25
     aee:	80 83       	st	Z, r24
    }

    tx_pin_write(HIGH); // restore pin to natural state
  }

  SREG = oldSREG; // turn interrupts back on
     af0:	0f bf       	out	0x3f, r16	; 63
  tunedDelay(_tx_delay);
     af2:	59 96       	adiw	r26, 0x19	; 25
     af4:	8d 91       	ld	r24, X+
     af6:	9c 91       	ld	r25, X
     af8:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	8f 3f       	cpi	r24, 0xFF	; 255
     b02:	92 07       	cpc	r25, r18
     b04:	d9 f7       	brne	.-10     	; 0xafc <_ZN14SoftwareSerial5writeEh+0x144>
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     b0a:	c9 01       	movw	r24, r18
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     b12:	80 81       	ld	r24, Z
     b14:	20 95       	com	r18
     b16:	28 23       	and	r18, r24
     b18:	20 83       	st	Z, r18
     b1a:	71 cf       	rjmp	.-286    	; 0x9fe <_ZN14SoftwareSerial5writeEh+0x46>

00000b1c <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     b1c:	20 91 b6 01 	lds	r18, 0x01B6
     b20:	30 91 b7 01 	lds	r19, 0x01B7
     b24:	28 17       	cp	r18, r24
     b26:	39 07       	cpc	r19, r25
     b28:	49 f4       	brne	.+18     	; 0xb3c <_ZN14SoftwareSerial5flushEv+0x20>
    return;

  uint8_t oldSREG = SREG;
     b2a:	9f b7       	in	r25, 0x3f	; 63
  cli();
     b2c:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
     b2e:	10 92 f8 01 	sts	0x01F8, r1
     b32:	80 91 f8 01 	lds	r24, 0x01F8
     b36:	80 93 f9 01 	sts	0x01F9, r24
  SREG = oldSREG;
     b3a:	9f bf       	out	0x3f, r25	; 63
     b3c:	08 95       	ret

00000b3e <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
     b3e:	20 91 b6 01 	lds	r18, 0x01B6
     b42:	30 91 b7 01 	lds	r19, 0x01B7
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	31 f4       	brne	.+12     	; 0xb58 <_ZN14SoftwareSerial4peekEv+0x1a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     b4c:	90 91 f9 01 	lds	r25, 0x01F9
     b50:	80 91 f8 01 	lds	r24, 0x01F8
     b54:	98 17       	cp	r25, r24
     b56:	19 f4       	brne	.+6      	; 0xb5e <_ZN14SoftwareSerial4peekEv+0x20>
     b58:	2f ef       	ldi	r18, 0xFF	; 255
     b5a:	3f ef       	ldi	r19, 0xFF	; 255
     b5c:	0a c0       	rjmp	.+20     	; 0xb72 <_ZN14SoftwareSerial4peekEv+0x34>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     b5e:	e0 91 f9 01 	lds	r30, 0x01F9
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	e8 54       	subi	r30, 0x48	; 72
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	80 81       	ld	r24, Z
     b6a:	28 2f       	mov	r18, r24
     b6c:	33 27       	eor	r19, r19
     b6e:	27 fd       	sbrc	r18, 7
     b70:	30 95       	com	r19
}
     b72:	c9 01       	movw	r24, r18
     b74:	08 95       	ret

00000b76 <_ZN14SoftwareSerial5setRXEh>:
  _transmitBitMask = digitalPinToBitMask(tx);
  uint8_t port = digitalPinToPort(tx);
  _transmitPortRegister = portOutputRegister(port);
}

void SoftwareSerial::setRX(uint8_t rx)
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	16 2f       	mov	r17, r22
{
  pinMode(rx, INPUT);
     b80:	86 2f       	mov	r24, r22
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <pinMode>
  if (!_inverse_logic)
     b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b8a:	81 fd       	sbrc	r24, 1
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     b8e:	81 2f       	mov	r24, r17
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 30 10 	call	0x2060	; 0x2060 <digitalWrite>
  _receivePin = rx;
     b96:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     b98:	21 2f       	mov	r18, r17
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	c9 01       	movw	r24, r18
     b9e:	86 5d       	subi	r24, 0xD6	; 214
     ba0:	9e 4f       	sbci	r25, 0xFE	; 254
     ba2:	fc 01       	movw	r30, r24
     ba4:	84 91       	lpm	r24, Z+
     ba6:	8d 87       	std	Y+13, r24	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     ba8:	2a 5e       	subi	r18, 0xEA	; 234
     baa:	3e 4f       	sbci	r19, 0xFE	; 254
     bac:	f9 01       	movw	r30, r18
     bae:	64 91       	lpm	r22, Z+
  _receivePortRegister = portInputRegister(port);
     bb0:	e6 2f       	mov	r30, r22
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	e4 5f       	subi	r30, 0xF4	; 244
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	85 91       	lpm	r24, Z+
     bbe:	94 91       	lpm	r25, Z+
     bc0:	9f 87       	std	Y+15, r25	; 0x0f
     bc2:	8e 87       	std	Y+14, r24	; 0x0e
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	08 95       	ret

00000bcc <_ZN14SoftwareSerial5setTXEh>:
SoftwareSerial::~SoftwareSerial()
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	8c 01       	movw	r16, r24
     bd4:	f6 2e       	mov	r15, r22
{
  pinMode(tx, OUTPUT);
     bd6:	86 2f       	mov	r24, r22
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <pinMode>
  digitalWrite(tx, HIGH);
     bde:	8f 2d       	mov	r24, r15
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	0e 94 30 10 	call	0x2060	; 0x2060 <digitalWrite>
  _transmitBitMask = digitalPinToBitMask(tx);
     be6:	8f 2d       	mov	r24, r15
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	e6 5d       	subi	r30, 0xD6	; 214
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	e4 91       	lpm	r30, Z+
     bf2:	d8 01       	movw	r26, r16
     bf4:	50 96       	adiw	r26, 0x10	; 16
     bf6:	ec 93       	st	X, r30
     bf8:	50 97       	sbiw	r26, 0x10	; 16
  uint8_t port = digitalPinToPort(tx);
     bfa:	8a 5e       	subi	r24, 0xEA	; 234
     bfc:	9e 4f       	sbci	r25, 0xFE	; 254
     bfe:	fc 01       	movw	r30, r24
     c00:	64 91       	lpm	r22, Z+
  _transmitPortRegister = portOutputRegister(port);
     c02:	e6 2f       	mov	r30, r22
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 5f       	subi	r30, 0xFE	; 254
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	85 91       	lpm	r24, Z+
     c10:	94 91       	lpm	r25, Z+
     c12:	52 96       	adiw	r26, 0x12	; 18
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	51 97       	sbiw	r26, 0x11	; 17
}
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	08 95       	ret

00000c22 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	8c 01       	movw	r16, r24
     c2a:	f6 2e       	mov	r15, r22
  public:
    Print() : write_error(0) {}
     c2c:	fc 01       	movw	r30, r24
     c2e:	13 82       	std	Z+3, r1	; 0x03
     c30:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     c32:	88 ee       	ldi	r24, 0xE8	; 232
     c34:	93 e0       	ldi	r25, 0x03	; 3
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	84 83       	std	Z+4, r24	; 0x04
     c3c:	95 83       	std	Z+5, r25	; 0x05
     c3e:	a6 83       	std	Z+6, r26	; 0x06
     c40:	b7 83       	std	Z+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     c42:	8e e8       	ldi	r24, 0x8E	; 142
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24
     c4a:	14 8a       	std	Z+20, r1	; 0x14
     c4c:	13 8a       	std	Z+19, r1	; 0x13
     c4e:	16 8a       	std	Z+22, r1	; 0x16
     c50:	15 8a       	std	Z+21, r1	; 0x15
     c52:	10 8e       	std	Z+24, r1	; 0x18
     c54:	17 8a       	std	Z+23, r1	; 0x17
     c56:	12 8e       	std	Z+26, r1	; 0x1a
     c58:	11 8e       	std	Z+25, r1	; 0x19
     c5a:	83 8d       	ldd	r24, Z+27	; 0x1b
     c5c:	21 70       	andi	r18, 0x01	; 1
     c5e:	22 0f       	add	r18, r18
     c60:	8c 7f       	andi	r24, 0xFC	; 252
     c62:	82 2b       	or	r24, r18
     c64:	83 8f       	std	Z+27, r24	; 0x1b
{
  setTX(transmitPin);
     c66:	c8 01       	movw	r24, r16
     c68:	64 2f       	mov	r22, r20
     c6a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     c6e:	c8 01       	movw	r24, r16
     c70:	6f 2d       	mov	r22, r15
     c72:	0e 94 bb 05 	call	0xb76	; 0xb76 <_ZN14SoftwareSerial5setRXEh>
}
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	08 95       	ret

00000c7e <_ZN9URMSerialC1Ev>:
     c7e:	08 95       	ret

00000c80 <_ZN9URMSerial10hasReadingEv>:

// See whether the serial port has sufficient data for a 'reading'
bool URMSerial::hasReading(void)
{
	// We require at least 3 bytes before it can be considered a valid reading
	return (serial->available()>3);
     c80:	dc 01       	movw	r26, r24
     c82:	14 96       	adiw	r26, 0x04	; 4
     c84:	ed 91       	ld	r30, X+
     c86:	fc 91       	ld	r31, X
     c88:	15 97       	sbiw	r26, 0x05	; 5
     c8a:	a0 81       	ld	r26, Z
     c8c:	b1 81       	ldd	r27, Z+1	; 0x01
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	2d 91       	ld	r18, X+
     c92:	3c 91       	ld	r19, X
     c94:	15 97       	sbiw	r26, 0x05	; 5
     c96:	cf 01       	movw	r24, r30
     c98:	f9 01       	movw	r30, r18
     c9a:	09 95       	icall
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	04 97       	sbiw	r24, 0x04	; 4
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <_ZN9URMSerial10hasReadingEv+0x24>
     ca2:	21 e0       	ldi	r18, 0x01	; 1
}
     ca4:	82 2f       	mov	r24, r18
     ca6:	08 95       	ret

00000ca8 <_ZN9URMSerial10readSerialEv>:

// Read in serial data (max four bytes)
void URMSerial::readSerial(void)
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	8c 01       	movw	r16, r24
     cb6:	ec 01       	movw	r28, r24
{
    for(int i=0;i<4;i++) serialData[i] = serial->read();
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	e8 2e       	mov	r14, r24
     cbc:	f1 2c       	mov	r15, r1
     cbe:	e0 0e       	add	r14, r16
     cc0:	f1 1e       	adc	r15, r17
     cc2:	d8 01       	movw	r26, r16
     cc4:	14 96       	adiw	r26, 0x04	; 4
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	15 97       	sbiw	r26, 0x05	; 5
     ccc:	a0 81       	ld	r26, Z
     cce:	b1 81       	ldd	r27, Z+1	; 0x01
     cd0:	16 96       	adiw	r26, 0x06	; 6
     cd2:	2d 91       	ld	r18, X+
     cd4:	3c 91       	ld	r19, X
     cd6:	17 97       	sbiw	r26, 0x07	; 7
     cd8:	cf 01       	movw	r24, r30
     cda:	f9 01       	movw	r30, r18
     cdc:	09 95       	icall
     cde:	8b 87       	std	Y+11, r24	; 0x0b
     ce0:	21 96       	adiw	r28, 0x01	; 1
     ce2:	ce 15       	cp	r28, r14
     ce4:	df 05       	cpc	r29, r15
     ce6:	69 f7       	brne	.-38     	; 0xcc2 <_ZN9URMSerial10readSerialEv+0x1a>
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <_ZN9URMSerial11sendCommandEPh>:
    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);

}

void URMSerial::sendCommand(byte* pCommand)
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	6c 01       	movw	r12, r24
     d06:	8b 01       	movw	r16, r22
     d08:	ff 24       	eor	r15, r15
     d0a:	c0 e0       	ldi	r28, 0x00	; 0
     d0c:	d0 e0       	ldi	r29, 0x00	; 0
{
	byte sum = 0;
    // Send command
    for(int i=0;i<3;i++)
	{
		serial->write(pCommand[i]);
     d0e:	f6 01       	movw	r30, r12
     d10:	a4 81       	ldd	r26, Z+4	; 0x04
     d12:	b5 81       	ldd	r27, Z+5	; 0x05
     d14:	ed 91       	ld	r30, X+
     d16:	fc 91       	ld	r31, X
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	01 90       	ld	r0, Z+
     d1c:	f0 81       	ld	r31, Z
     d1e:	e0 2d       	mov	r30, r0
     d20:	cd 01       	movw	r24, r26
     d22:	d8 01       	movw	r26, r16
     d24:	6c 91       	ld	r22, X
     d26:	09 95       	icall
		sum += pCommand[i];
     d28:	f8 01       	movw	r30, r16
     d2a:	81 91       	ld	r24, Z+
     d2c:	8f 01       	movw	r16, r30
     d2e:	f8 0e       	add	r15, r24

void URMSerial::sendCommand(byte* pCommand)
{
	byte sum = 0;
    // Send command
    for(int i=0;i<3;i++)
     d30:	21 96       	adiw	r28, 0x01	; 1
     d32:	c3 30       	cpi	r28, 0x03	; 3
     d34:	d1 05       	cpc	r29, r1
     d36:	59 f7       	brne	.-42     	; 0xd0e <_ZN9URMSerial11sendCommandEPh+0x18>
	{
		serial->write(pCommand[i]);
		sum += pCommand[i];
	}
	serial->write(sum);
     d38:	d6 01       	movw	r26, r12
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	ed 91       	ld	r30, X+
     d3e:	fc 91       	ld	r31, X
     d40:	15 97       	sbiw	r26, 0x05	; 5
     d42:	a0 81       	ld	r26, Z
     d44:	b1 81       	ldd	r27, Z+1	; 0x01
     d46:	2d 91       	ld	r18, X+
     d48:	3c 91       	ld	r19, X
     d4a:	cf 01       	movw	r24, r30
     d4c:	6f 2d       	mov	r22, r15
     d4e:	f9 01       	movw	r30, r18
     d50:	09 95       	icall
	
	
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	08 95       	ret

00000d62 <_ZN9URMSerial5beginEhhl>:


// Setup our serial-> connection
void URMSerial::begin(uint8_t rxPin, uint8_t txPin, long baud)
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	7c 01       	movw	r14, r24
     d78:	96 2e       	mov	r9, r22
     d7a:	84 2e       	mov	r8, r20
     d7c:	58 01       	movw	r10, r16
     d7e:	69 01       	movw	r12, r18
{
    // Initalise measurements
	distanceRequested = false;
     d80:	fc 01       	movw	r30, r24
     d82:	11 86       	std	Z+9, r1	; 0x09
	temperatureRequested = false;
     d84:	12 86       	std	Z+10, r1	; 0x0a
	
	servoAngle = 23; // 90*
     d86:	87 e1       	ldi	r24, 0x17	; 23
     d88:	86 83       	std	Z+6, r24	; 0x06
	servoMin = 0;
     d8a:	10 86       	std	Z+8, r1	; 0x08
	servoMax = 30;
     d8c:	8e e1       	ldi	r24, 0x1E	; 30
     d8e:	87 83       	std	Z+7, r24	; 0x07
	
	timeout = 200;
     d90:	88 ec       	ldi	r24, 0xC8	; 200
     d92:	87 87       	std	Z+15, r24	; 0x0f

    // Initalise serial data
    for(int i=0; i<4;i++) serialData[i]=0;
     d94:	13 86       	std	Z+11, r1	; 0x0b
     d96:	14 86       	std	Z+12, r1	; 0x0c
     d98:	15 86       	std	Z+13, r1	; 0x0d
     d9a:	16 86       	std	Z+14, r1	; 0x0e

    // Initalise the software serial to handle our serial communication
    // Please note: using software serial over hardware-serial has some potential issues.
	serial = new SoftwareSerial(rxPin, txPin);
     d9c:	8c e1       	ldi	r24, 0x1C	; 28
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_Znwj>
     da4:	18 2f       	mov	r17, r24
     da6:	09 2f       	mov	r16, r25
     da8:	69 2d       	mov	r22, r9
     daa:	48 2d       	mov	r20, r8
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN14SoftwareSerialC1Ehhb>
     db2:	f7 01       	movw	r30, r14
     db4:	14 83       	std	Z+4, r17	; 0x04
     db6:	05 83       	std	Z+5, r16	; 0x05
	serial->begin(baud);
     db8:	81 2f       	mov	r24, r17
     dba:	90 2f       	mov	r25, r16
     dbc:	b6 01       	movw	r22, r12
     dbe:	a5 01       	movw	r20, r10
     dc0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN14SoftwareSerial5beginEl>
}
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	08 95       	ret

00000dda <_ZN9URMSerial10reqTimeoutEv>:
	return TEMPERATURE;
    //value = value >> 1; // Note: Bad practise, decimal value truncated
}

// Has the current request timed out?
bool URMSerial::reqTimeout()
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ec 01       	movw	r28, r24
{
    if(temperatureRequested || distanceRequested)
     de0:	8a 85       	ldd	r24, Y+10	; 0x0a
     de2:	88 23       	and	r24, r24
     de4:	19 f4       	brne	.+6      	; 0xdec <_ZN9URMSerial10reqTimeoutEv+0x12>
     de6:	89 85       	ldd	r24, Y+9	; 0x09
     de8:	88 23       	and	r24, r24
     dea:	81 f0       	breq	.+32     	; 0xe0c <_ZN9URMSerial10reqTimeoutEv+0x32>
    {
        int tDelta = millis() - timeRequested;
     dec:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <millis>
     df0:	28 81       	ld	r18, Y
     df2:	39 81       	ldd	r19, Y+1	; 0x01
     df4:	62 1b       	sub	r22, r18
     df6:	73 0b       	sbc	r23, r19
        // If we've waited to long
        if(tDelta>timeout || tDelta < 0) // If the delta is greater than our timeout or if it has wrapped around
     df8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	86 17       	cp	r24, r22
     dfe:	97 07       	cpc	r25, r23
     e00:	2c f0       	brlt	.+10     	; 0xe0c <_ZN9URMSerial10reqTimeoutEv+0x32>
     e02:	87 2f       	mov	r24, r23
     e04:	88 1f       	adc	r24, r24
     e06:	88 27       	eor	r24, r24
     e08:	88 1f       	adc	r24, r24
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <_ZN9URMSerial10reqTimeoutEv+0x34>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
    }else{
	
        // No pending requests
        return true; // Return true anyway
    }
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <_ZN9URMSerial14getMeasurementERi>:
{
    for(int i=0;i<4;i++) serialData[i] = serial->read();
}

// Recieve distance from URM device
byte URMSerial::getMeasurement(int& value)
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ec 01       	movw	r28, r24
     e1e:	8b 01       	movw	r16, r22
{
  if(!hasReading()) return NOTREADY;
     e20:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN9URMSerial10hasReadingEv>
     e24:	88 23       	and	r24, r24
     e26:	11 f4       	brne	.+4      	; 0xe2c <_ZN9URMSerial14getMeasurementERi+0x18>
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	42 c0       	rjmp	.+132    	; 0xeb0 <_ZN9URMSerial14getMeasurementERi+0x9c>
  
  if(reqTimeout()) return TIMEOUT;
     e2c:	ce 01       	movw	r24, r28
     e2e:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN9URMSerial10reqTimeoutEv>
     e32:	88 23       	and	r24, r24
     e34:	11 f0       	breq	.+4      	; 0xe3a <_ZN9URMSerial14getMeasurementERi+0x26>
     e36:	85 e0       	ldi	r24, 0x05	; 5
     e38:	3b c0       	rjmp	.+118    	; 0xeb0 <_ZN9URMSerial14getMeasurementERi+0x9c>
  
	// Read in data
	readSerial();
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN9URMSerial10readSerialEv>

    // Validate the reading type
    switch(serialData[Header]) // Three types of command responses. 0x11 is a temperature, 0x22 Distance, 0x33 EEPROM
     e40:	8b 85       	ldd	r24, Y+11	; 0x0b
     e42:	81 31       	cpi	r24, 0x11	; 17
     e44:	c9 f0       	breq	.+50     	; 0xe78 <_ZN9URMSerial14getMeasurementERi+0x64>
     e46:	82 32       	cpi	r24, 0x22	; 34
     e48:	69 f5       	brne	.+90     	; 0xea4 <_ZN9URMSerial14getMeasurementERi+0x90>
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
}

byte URMSerial::processDistance(int& value)
{
    distanceRequested = false;
     e4a:	19 86       	std	Y+9, r1	; 0x09


// Process the 4 byte serial data and see whether the device reported an error (happens occationally)
bool URMSerial::hasError()
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
     e4c:	4c 85       	ldd	r20, Y+12	; 0x0c
     e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
byte URMSerial::processDistance(int& value)
{
    distanceRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	84 2f       	mov	r24, r20
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	82 23       	and	r24, r18
     e5a:	93 23       	and	r25, r19
     e5c:	8f 3f       	cpi	r24, 0xFF	; 255
     e5e:	91 05       	cpc	r25, r1
     e60:	31 f1       	breq	.+76     	; 0xeae <_ZN9URMSerial14getMeasurementERi+0x9a>

    // 1x16bit value wrapped over two bytes
    // HighByte must be multiplied by 255 to represent the correct byte
    // Both are added together to calculate the value in Centimeters (I believe)
    value = serialData[HighByte]*255+serialData[LowByte];
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	48 9f       	mul	r20, r24
     e66:	c0 01       	movw	r24, r0
     e68:	11 24       	eor	r1, r1
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	f8 01       	movw	r30, r16
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	1c c0       	rjmp	.+56     	; 0xeb0 <_ZN9URMSerial14getMeasurementERi+0x9c>
	return DISTANCE;
}

byte URMSerial::processTemperature(int& value)
{
    temperatureRequested = false;
     e78:	1a 86       	std	Y+10, r1	; 0x0a


// Process the 4 byte serial data and see whether the device reported an error (happens occationally)
bool URMSerial::hasError()
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
     e7a:	4d 85       	ldd	r20, Y+13	; 0x0d
byte URMSerial::processTemperature(int& value)
{
    temperatureRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     e7c:	24 2f       	mov	r18, r20
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	8c 85       	ldd	r24, Y+12	; 0x0c
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	28 23       	and	r18, r24
     e86:	39 23       	and	r19, r25
     e88:	2f 3f       	cpi	r18, 0xFF	; 255
     e8a:	31 05       	cpc	r19, r1
     e8c:	81 f0       	breq	.+32     	; 0xeae <_ZN9URMSerial14getMeasurementERi+0x9a>

    // If 0, the value is the same regardless
    if(serialData[LowByte]==0)
     e8e:	44 23       	and	r20, r20
     e90:	21 f4       	brne	.+8      	; 0xe9a <_ZN9URMSerial14getMeasurementERi+0x86>
    {
        value = 0;
     e92:	f8 01       	movw	r30, r16
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	10 82       	st	Z, r1
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <_ZN9URMSerial14getMeasurementERi+0x8c>
		// Below 0
		if(serialData[HighByte]==0x255)
		{
			value = -serialData[LowByte];
		}else{ // above zero
			value = serialData[LowByte]; // Consider below zero 1111
     e9a:	f8 01       	movw	r30, r16
     e9c:	40 83       	st	Z, r20
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <_ZN9URMSerial14getMeasurementERi+0x9c>
        return processTemperature(value);
     break;
    }

    // Strange return result!
	distanceRequested = temperatureRequested = false; // This is a bug fix. If an error was returned (conrrupt byte array), reset distance measurements so we can re-request
     ea4:	1a 86       	std	Y+10, r1	; 0x0a
     ea6:	19 86       	std	Y+9, r1	; 0x09
    value = 0;
     ea8:	f8 01       	movw	r30, r16
     eaa:	11 82       	std	Z+1, r1	; 0x01
     eac:	10 82       	st	Z, r1
    return ERROR;
     eae:	83 e0       	ldi	r24, 0x03	; 3
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <_ZN9URMSerial18requestMeasurementEh>:
        return true; // Return true anyway
    }
}

// send the temperature request to the serial port [*note, no delay]
bool URMSerial::requestMeasurement(byte mType)
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <_ZN9URMSerial18requestMeasurementEh+0xc>
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	8c 01       	movw	r16, r24
     ece:	f6 2e       	mov	r15, r22
{
    if(!reqTimeout()) return false;
     ed0:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN9URMSerial10reqTimeoutEv>
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <_ZN9URMSerial18requestMeasurementEh+0x80>

    timeRequested = millis(); // store request time
     ed8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <millis>
     edc:	f8 01       	movw	r30, r16
     ede:	60 83       	st	Z, r22
     ee0:	71 83       	std	Z+1, r23	; 0x01
     ee2:	82 83       	std	Z+2, r24	; 0x02
     ee4:	93 83       	std	Z+3, r25	; 0x03

	byte ttlCOMMAND[3] = {0,0,0};
     ee6:	de 01       	movw	r26, r28
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	ea e9       	ldi	r30, 0x9A	; 154
     eec:	f1 e0       	ldi	r31, 0x01	; 1
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	01 90       	ld	r0, Z+
     ef2:	0d 92       	st	X+, r0
     ef4:	81 50       	subi	r24, 0x01	; 1
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <_ZN9URMSerial18requestMeasurementEh+0x36>
    // Select appropriate memory addresses
    switch(mType)
     ef8:	f1 e0       	ldi	r31, 0x01	; 1
     efa:	ff 16       	cp	r15, r31
     efc:	79 f0       	breq	.+30     	; 0xf1c <_ZN9URMSerial18requestMeasurementEh+0x62>
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	f8 16       	cp	r15, r24
     f02:	d9 f4       	brne	.+54     	; 0xf3a <_ZN9URMSerial18requestMeasurementEh+0x80>
    {
         case TEMPERATURE:
			ttlCOMMAND[Header] = COMMAND_TEMP;
     f04:	81 e1       	ldi	r24, 0x11	; 17
     f06:	89 83       	std	Y+1, r24	; 0x01
            sendCommand(ttlCOMMAND);
     f08:	c8 01       	movw	r24, r16
     f0a:	be 01       	movw	r22, r28
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN9URMSerial11sendCommandEPh>
            temperatureRequested = true;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	f8 01       	movw	r30, r16
     f18:	82 87       	std	Z+10, r24	; 0x0a
     f1a:	10 c0       	rjmp	.+32     	; 0xf3c <_ZN9URMSerial18requestMeasurementEh+0x82>
            return true;
         break;
         case DISTANCE:
			ttlCOMMAND[Header] = COMMAND_DISTANCE;
     f1c:	82 e2       	ldi	r24, 0x22	; 34
     f1e:	89 83       	std	Y+1, r24	; 0x01
			ttlCOMMAND[HighByte] = servoAngle;
     f20:	f8 01       	movw	r30, r16
     f22:	86 81       	ldd	r24, Z+6	; 0x06
     f24:	8a 83       	std	Y+2, r24	; 0x02
			
            sendCommand(ttlCOMMAND);
     f26:	c8 01       	movw	r24, r16
     f28:	be 01       	movw	r22, r28
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN9URMSerial11sendCommandEPh>
            distanceRequested = true;
     f32:	f8 01       	movw	r30, r16
     f34:	f1 86       	std	Z+9, r15	; 0x09
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <_ZN9URMSerial18requestMeasurementEh+0x82>
            return true;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
         default:
         // Do nothing
            return false;
         break;
    }
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	08 95       	ret

00000f4e <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>:

byte URMSerial::requestMeasurementOrTimeout(byte mType, int& value)
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
     f58:	8a 01       	movw	r16, r20
{
    // Request measurement or fail
    if(!requestMeasurement(mType))
     f5a:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN9URMSerial18requestMeasurementEh>
     f5e:	88 23       	and	r24, r24
     f60:	11 f4       	brne	.+4      	; 0xf66 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x18>
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	15 c0       	rjmp	.+42     	; 0xf90 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x42>
    {
        return NOTREADY;
    }

    // Wait until we either timeout or we have a reading
    while(!reqTimeout() && !hasReading())
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN9URMSerial10reqTimeoutEv>
     f6c:	88 23       	and	r24, r24
     f6e:	a9 f4       	brne	.+42     	; 0xf9a <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x4c>
     f70:	ce 01       	movw	r24, r28
     f72:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN9URMSerial10hasReadingEv>
     f76:	88 23       	and	r24, r24
     f78:	81 f4       	brne	.+32     	; 0xf9a <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x4c>
    {
        delay(10); // Wait a bit
     f7a:	6a e0       	ldi	r22, 0x0A	; 10
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <delay>
     f86:	ef cf       	rjmp	.-34     	; 0xf66 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x18>

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;

    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);
     f88:	ce 01       	movw	r24, r28
     f8a:	b8 01       	movw	r22, r16
     f8c:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN9URMSerial14getMeasurementERi>

}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret
    {
        delay(10); // Wait a bit
    }

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN9URMSerial10reqTimeoutEv>
     fa0:	88 23       	and	r24, r24
     fa2:	91 f3       	breq	.-28     	; 0xf88 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x3a>
     fa4:	85 e0       	ldi	r24, 0x05	; 5
     fa6:	f4 cf       	rjmp	.-24     	; 0xf90 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x42>

00000fa8 <_ZN11MeetAndroidC1Ev>:
	}
}


// public methods
MeetAndroid::MeetAndroid()
     fa8:	fc 01       	movw	r30, r24
     faa:	13 82       	std	Z+3, r1	; 0x03
     fac:	12 82       	std	Z+2, r1	; 0x02
     fae:	81 ea       	ldi	r24, 0xA1	; 161
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
     fb6:	e5 5b       	subi	r30, 0xB5	; 181
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	10 82       	st	Z, r1
     fbc:	eb 54       	subi	r30, 0x4B	; 75
     fbe:	f0 40       	sbci	r31, 0x00	; 0
	errorFunc = 0;
     fc0:	df 01       	movw	r26, r30
     fc2:	ae 51       	subi	r26, 0x1E	; 30
     fc4:	bf 4f       	sbci	r27, 0xFF	; 255
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	1c 92       	st	X, r1
     fca:	1e 92       	st	-X, r1
}


void MeetAndroid::init()
{
	waitTime = 30;
     fcc:	ec 51       	subi	r30, 0x1C	; 28
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	8e e1       	ldi	r24, 0x1E	; 30
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
	startFlag = 18;
     fd8:	ea 59       	subi	r30, 0x9A	; 154
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	82 e1       	ldi	r24, 0x12	; 18
     fde:	80 83       	st	Z, r24
	ack = 19;
     fe0:	32 97       	sbiw	r30, 0x02	; 2
     fe2:	83 e1       	ldi	r24, 0x13	; 19
     fe4:	80 83       	st	Z, r24
	abord = 27;
     fe6:	8b e1       	ldi	r24, 0x1B	; 27
     fe8:	82 93       	st	-Z, r24
	delimiter = 59; //';'
     fea:	32 96       	adiw	r30, 0x02	; 2
     fec:	8b e3       	ldi	r24, 0x3B	; 59
     fee:	80 83       	st	Z, r24

	numberOfValues = 0;
     ff0:	34 97       	sbiw	r30, 0x04	; 4
     ff2:	11 82       	std	Z+1, r1	; 0x01
     ff4:	10 82       	st	Z, r1
     ff6:	37 96       	adiw	r30, 0x07	; 7
	
	for(int a = 0;a < FunctionBufferLenght;a++){
		intFunc[a] = errorFunc;
     ff8:	8d 91       	ld	r24, X+
     ffa:	9c 91       	ld	r25, X
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	81 93       	st	Z+, r24
    1000:	91 93       	st	Z+, r25
	abord = 27;
	delimiter = 59; //';'

	numberOfValues = 0;
	
	for(int a = 0;a < FunctionBufferLenght;a++){
    1002:	ea 17       	cp	r30, r26
    1004:	fb 07       	cpc	r31, r27
    1006:	c1 f7       	brne	.-16     	; 0xff8 <_ZN11MeetAndroidC1Ev+0x50>
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
	errorFunc = 0;
	init();
}
    1008:	08 95       	ret

0000100a <_ZN11MeetAndroid4sendEh>:
void MeetAndroid::send(const char str[]){
	Serial.print(startFlag);
	Serial.print(str);
	Serial.print(ack);
}
void MeetAndroid::send(uint8_t n){
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	8c 01       	movw	r16, r24
    1016:	d6 2e       	mov	r13, r22
	Serial.print(startFlag);
    1018:	88 e7       	ldi	r24, 0x78	; 120
    101a:	e8 2e       	mov	r14, r24
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	f8 2e       	mov	r15, r24
    1020:	06 5b       	subi	r16, 0xB6	; 182
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	c7 01       	movw	r24, r14
    1026:	f8 01       	movw	r30, r16
    1028:	60 81       	ld	r22, Z
    102a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN5Print5printEc>
	Serial.print(n);
    102e:	c7 01       	movw	r24, r14
    1030:	6d 2d       	mov	r22, r13
    1032:	4a e0       	ldi	r20, 0x0A	; 10
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN5Print5printEhi>
	Serial.print(ack);
    103a:	02 50       	subi	r16, 0x02	; 2
    103c:	10 40       	sbci	r17, 0x00	; 0
    103e:	c7 01       	movw	r24, r14
    1040:	f8 01       	movw	r30, r16
    1042:	60 81       	ld	r22, Z
    1044:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN5Print5printEc>
}
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	08 95       	ret

00001054 <_ZN11MeetAndroid5writeEh>:
}


#if defined(ARDUINO) && ARDUINO >= 100
size_t MeetAndroid::write(uint8_t b){
	return Serial.print(b);
    1054:	88 e7       	ldi	r24, 0x78	; 120
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	4a e0       	ldi	r20, 0x0A	; 10
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN5Print5printEhi>
}
    1060:	08 95       	ret

00001062 <_ZN11MeetAndroid4sendEPKc>:
	Serial.print(startFlag);
	Serial.print(c);
	Serial.print(ack);
}

void MeetAndroid::send(const char str[]){
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	8c 01       	movw	r16, r24
    1070:	6b 01       	movw	r12, r22
	Serial.print(startFlag);
    1072:	98 e7       	ldi	r25, 0x78	; 120
    1074:	e9 2e       	mov	r14, r25
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	f9 2e       	mov	r15, r25
    107a:	06 5b       	subi	r16, 0xB6	; 182
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	c7 01       	movw	r24, r14
    1080:	f8 01       	movw	r30, r16
    1082:	60 81       	ld	r22, Z
    1084:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN5Print5printEc>
	Serial.print(str);
    1088:	c7 01       	movw	r24, r14
    108a:	b6 01       	movw	r22, r12
    108c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN5Print5printEPKc>
	Serial.print(ack);
    1090:	02 50       	subi	r16, 0x02	; 2
    1092:	10 40       	sbci	r17, 0x00	; 0
    1094:	c7 01       	movw	r24, r14
    1096:	f8 01       	movw	r30, r16
    1098:	60 81       	ld	r22, Z
    109a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN5Print5printEc>
}
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	08 95       	ret

000010ac <_ZN11MeetAndroid14processCommandEv>:
#include <stdlib.h>
}


// Private methods
void MeetAndroid::processCommand(){
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
	if(buffer[0]-FunctionBufferOffset < FunctionBufferLenght){
    10bc:	fd 80       	ldd	r15, Y+5	; 0x05
    10be:	ef 2d       	mov	r30, r15
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	eb 37       	cpi	r30, 0x7B	; 123
    10c4:	f1 05       	cpc	r31, r1
    10c6:	d4 f5       	brge	.+116    	; 0x113c <_ZN11MeetAndroid14processCommandEv+0x90>
		void (*H_FuncPtr)(uint8_t, uint8_t) = intFunc[buffer[0]-FunctionBufferOffset];
    10c8:	3a 97       	sbiw	r30, 0x0a	; 10
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	e8 0f       	add	r30, r24
    10d0:	f9 1f       	adc	r31, r25
    10d2:	00 81       	ld	r16, Z
    10d4:	11 81       	ldd	r17, Z+1	; 0x01
		if (H_FuncPtr != 0) {
    10d6:	01 15       	cp	r16, r1
    10d8:	11 05       	cpc	r17, r1
    10da:	69 f1       	breq	.+90     	; 0x1136 <_ZN11MeetAndroid14processCommandEv+0x8a>
	return (float)getDouble();
}

int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	e9 f1       	breq	.+122    	; 0x115c <_ZN11MeetAndroid14processCommandEv+0xb0>
	numberOfValues = 1;
    10e2:	fe 01       	movw	r30, r28
    10e4:	eb 5b       	subi	r30, 0xBB	; 187
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	de 01       	movw	r26, r28
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	50 e0       	ldi	r21, 0x00	; 0
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
		if (buffer[a]==delimiter) numberOfValues++;
    10f6:	be 01       	movw	r22, r28
    10f8:	67 5b       	subi	r22, 0xB7	; 183
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	6f 01       	movw	r12, r30
    10fe:	15 c0       	rjmp	.+42     	; 0x112a <_ZN11MeetAndroid14processCommandEv+0x7e>
    1100:	16 96       	adiw	r26, 0x06	; 6
    1102:	2c 91       	ld	r18, X
    1104:	16 97       	sbiw	r26, 0x06	; 6
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	fb 01       	movw	r30, r22
    110a:	80 81       	ld	r24, Z
    110c:	99 27       	eor	r25, r25
    110e:	87 fd       	sbrc	r24, 7
    1110:	90 95       	com	r25
    1112:	28 17       	cp	r18, r24
    1114:	39 07       	cpc	r19, r25
    1116:	31 f4       	brne	.+12     	; 0x1124 <_ZN11MeetAndroid14processCommandEv+0x78>
    1118:	f6 01       	movw	r30, r12
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
	numberOfValues = 1;
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
    1124:	4f 5f       	subi	r20, 0xFF	; 255
    1126:	5f 4f       	sbci	r21, 0xFF	; 255
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	48 17       	cp	r20, r24
    1130:	59 07       	cpc	r21, r25
    1132:	34 f3       	brlt	.-52     	; 0x1100 <_ZN11MeetAndroid14processCommandEv+0x54>
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <_ZN11MeetAndroid14processCommandEv+0x108>
		void (*H_FuncPtr)(uint8_t, uint8_t) = intFunc[buffer[0]-FunctionBufferOffset];
		if (H_FuncPtr != 0) {
			H_FuncPtr(buffer[0], getArrayLength());
		}
		else {
			send("Flag not registered: ");
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	71 e0       	ldi	r23, 0x01	; 1
    113a:	47 c0       	rjmp	.+142    	; 0x11ca <_ZN11MeetAndroid14processCommandEv+0x11e>
			send(buffer[0]);
		}
	}
	else {
		if (customErrorFunc)
    113c:	c5 5b       	subi	r28, 0xB5	; 181
    113e:	df 4f       	sbci	r29, 0xFF	; 255
    1140:	88 81       	ld	r24, Y
    1142:	cb 54       	subi	r28, 0x4B	; 75
    1144:	d0 40       	sbci	r29, 0x00	; 0
    1146:	88 23       	and	r24, r24
    1148:	e9 f1       	breq	.+122    	; 0x11c4 <_ZN11MeetAndroid14processCommandEv+0x118>
			errorFunc(buffer[0], getArrayLength());
    114a:	ce 51       	subi	r28, 0x1E	; 30
    114c:	df 4f       	sbci	r29, 0xFF	; 255
    114e:	08 81       	ld	r16, Y
    1150:	19 81       	ldd	r17, Y+1	; 0x01
    1152:	c2 5e       	subi	r28, 0xE2	; 226
    1154:	d0 40       	sbci	r29, 0x00	; 0
	return (float)getDouble();
}

int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	19 f4       	brne	.+6      	; 0x1162 <_ZN11MeetAndroid14processCommandEv+0xb6>
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	2d c0       	rjmp	.+90     	; 0x11bc <_ZN11MeetAndroid14processCommandEv+0x110>
	numberOfValues = 1;
    1162:	fe 01       	movw	r30, r28
    1164:	eb 5b       	subi	r30, 0xBB	; 187
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	80 83       	st	Z, r24
    1170:	de 01       	movw	r26, r28
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	50 e0       	ldi	r21, 0x00	; 0
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
		if (buffer[a]==delimiter) numberOfValues++;
    1176:	be 01       	movw	r22, r28
    1178:	67 5b       	subi	r22, 0xB7	; 183
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	6f 01       	movw	r12, r30
    117e:	15 c0       	rjmp	.+42     	; 0x11aa <_ZN11MeetAndroid14processCommandEv+0xfe>
    1180:	16 96       	adiw	r26, 0x06	; 6
    1182:	2c 91       	ld	r18, X
    1184:	16 97       	sbiw	r26, 0x06	; 6
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	fb 01       	movw	r30, r22
    118a:	80 81       	ld	r24, Z
    118c:	99 27       	eor	r25, r25
    118e:	87 fd       	sbrc	r24, 7
    1190:	90 95       	com	r25
    1192:	28 17       	cp	r18, r24
    1194:	39 07       	cpc	r19, r25
    1196:	31 f4       	brne	.+12     	; 0x11a4 <_ZN11MeetAndroid14processCommandEv+0xf8>
    1198:	f6 01       	movw	r30, r12
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
	numberOfValues = 1;
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
    11a4:	4f 5f       	subi	r20, 0xFF	; 255
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	48 17       	cp	r20, r24
    11b0:	59 07       	cpc	r21, r25
    11b2:	34 f3       	brlt	.-52     	; 0x1180 <_ZN11MeetAndroid14processCommandEv+0xd4>
		if (buffer[a]==delimiter) numberOfValues++;
	}
	return numberOfValues;
    11b4:	cb 5b       	subi	r28, 0xBB	; 187
    11b6:	df 4f       	sbci	r29, 0xFF	; 255
    11b8:	68 81       	ld	r22, Y
    11ba:	79 81       	ldd	r23, Y+1	; 0x01
			send(buffer[0]);
		}
	}
	else {
		if (customErrorFunc)
			errorFunc(buffer[0], getArrayLength());
    11bc:	8f 2d       	mov	r24, r15
    11be:	f8 01       	movw	r30, r16
    11c0:	09 95       	icall
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <_ZN11MeetAndroid14processCommandEv+0x12a>
		else {
			send("Flag out of bounds: ");
    11c4:	ce 01       	movw	r24, r28
    11c6:	66 e1       	ldi	r22, 0x16	; 22
    11c8:	71 e0       	ldi	r23, 0x01	; 1
    11ca:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN11MeetAndroid4sendEPKc>
			send(buffer[0]);
    11ce:	ce 01       	movw	r24, r28
    11d0:	6d 81       	ldd	r22, Y+5	; 0x05
    11d2:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN11MeetAndroid4sendEh>
		}
	}
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	08 95       	ret

000011e6 <_ZN11MeetAndroid7receiveEv>:
}
void MeetAndroid::unregisterFunction(uint8_t command){
	intFunc[command-FunctionBufferOffset] = errorFunc;
}

bool MeetAndroid::receive(){
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
	{
		while(Serial.available() > 0)
		{
			lastByte = Serial.read();
			
			if(lastByte == abord){
    11fc:	37 e4       	ldi	r19, 0x47	; 71
    11fe:	a3 2e       	mov	r10, r19
    1200:	b1 2c       	mov	r11, r1
    1202:	a8 0e       	add	r10, r24
    1204:	b9 1e       	adc	r11, r25
				flush();
			}
			else if(lastByte == ack){
    1206:	28 e4       	ldi	r18, 0x48	; 72
    1208:	c2 2e       	mov	r12, r18
    120a:	d1 2c       	mov	r13, r1
    120c:	c8 0e       	add	r12, r24
    120e:	d9 1e       	adc	r13, r25
void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
	}
	bufferCount = 0;
	numberOfValues = 0;
    1210:	8c 01       	movw	r16, r24
    1212:	0b 5b       	subi	r16, 0xBB	; 187
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			else return false;
		}
		
		if(Serial.available() <= 0 && !timeout){
			if(waitTime > 0) delayMicroseconds(waitTime);
    1216:	94 ee       	ldi	r25, 0xE4	; 228
    1218:	e9 2e       	mov	r14, r25
    121a:	f1 2c       	mov	r15, r1
    121c:	ec 0e       	add	r14, r28
    121e:	fd 1e       	adc	r15, r29
    1220:	37 c0       	rjmp	.+110    	; 0x1290 <_ZN11MeetAndroid7receiveEv+0xaa>
	boolean timeout = false;
	while(!timeout)
	{
		while(Serial.available() > 0)
		{
			lastByte = Serial.read();
    1222:	88 e7       	ldi	r24, 0x78	; 120
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN14HardwareSerial4readEv>
    122a:	48 2f       	mov	r20, r24
			
			if(lastByte == abord){
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f5 01       	movw	r30, r10
    1232:	80 81       	ld	r24, Z
    1234:	99 27       	eor	r25, r25
    1236:	87 fd       	sbrc	r24, 7
    1238:	90 95       	com	r25
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	41 f4       	brne	.+16     	; 0x1250 <_ZN11MeetAndroid7receiveEv+0x6a>
    1240:	fe 01       	movw	r30, r28
    1242:	80 e0       	ldi	r24, 0x00	; 0
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
    1244:	15 82       	std	Z+5, r1	; 0x05
	Serial.println();
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	31 96       	adiw	r30, 0x01	; 1
    124a:	80 34       	cpi	r24, 0x40	; 64
    124c:	d9 f7       	brne	.-10     	; 0x1244 <_ZN11MeetAndroid7receiveEv+0x5e>
    124e:	12 c0       	rjmp	.+36     	; 0x1274 <_ZN11MeetAndroid7receiveEv+0x8e>
			lastByte = Serial.read();
			
			if(lastByte == abord){
				flush();
			}
			else if(lastByte == ack){
    1250:	f6 01       	movw	r30, r12
    1252:	80 81       	ld	r24, Z
    1254:	99 27       	eor	r25, r25
    1256:	87 fd       	sbrc	r24, 7
    1258:	90 95       	com	r25
    125a:	28 17       	cp	r18, r24
    125c:	39 07       	cpc	r19, r25
    125e:	79 f4       	brne	.+30     	; 0x127e <_ZN11MeetAndroid7receiveEv+0x98>
				processCommand();
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN11MeetAndroid14processCommandEv>
    1266:	fe 01       	movw	r30, r28
    1268:	80 e0       	ldi	r24, 0x00	; 0
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
    126a:	15 82       	std	Z+5, r1	; 0x05
	Serial.println();
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	31 96       	adiw	r30, 0x01	; 1
    1270:	80 34       	cpi	r24, 0x40	; 64
    1272:	d9 f7       	brne	.-10     	; 0x126a <_ZN11MeetAndroid7receiveEv+0x84>
		buffer[a] = 0;
	}
	bufferCount = 0;
    1274:	1c 82       	std	Y+4, r1	; 0x04
	numberOfValues = 0;
    1276:	f8 01       	movw	r30, r16
    1278:	11 82       	std	Z+1, r1	; 0x01
    127a:	10 82       	st	Z, r1
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <_ZN11MeetAndroid7receiveEv+0xaa>
			}
			else if(lastByte == ack){
				processCommand();
				flush();
			}
			else if(bufferCount < ByteBufferLenght){
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	80 34       	cpi	r24, 0x40	; 64
    1282:	20 f5       	brcc	.+72     	; 0x12cc <_ZN11MeetAndroid7receiveEv+0xe6>
				buffer[bufferCount] = lastByte;
    1284:	fe 01       	movw	r30, r28
    1286:	e8 0f       	add	r30, r24
    1288:	f1 1d       	adc	r31, r1
    128a:	45 83       	std	Z+5, r20	; 0x05
				bufferCount++;
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	8c 83       	std	Y+4, r24	; 0x04
bool MeetAndroid::receive(){
	uint8_t lastByte;
	boolean timeout = false;
	while(!timeout)
	{
		while(Serial.available() > 0)
    1290:	88 e7       	ldi	r24, 0x78	; 120
    1292:	93 e0       	ldi	r25, 0x03	; 3
    1294:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN14HardwareSerial9availableEv>
    1298:	18 16       	cp	r1, r24
    129a:	19 06       	cpc	r1, r25
    129c:	14 f2       	brlt	.-124    	; 0x1222 <_ZN11MeetAndroid7receiveEv+0x3c>
				bufferCount++;
			}
			else return false;
		}
		
		if(Serial.available() <= 0 && !timeout){
    129e:	88 e7       	ldi	r24, 0x78	; 120
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN14HardwareSerial9availableEv>
    12a6:	18 16       	cp	r1, r24
    12a8:	19 06       	cpc	r1, r25
    12aa:	94 f3       	brlt	.-28     	; 0x1290 <_ZN11MeetAndroid7receiveEv+0xaa>
			if(waitTime > 0) delayMicroseconds(waitTime);
    12ac:	f7 01       	movw	r30, r14
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	11 f0       	breq	.+4      	; 0x12ba <_ZN11MeetAndroid7receiveEv+0xd4>
    12b6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <delayMicroseconds>
			if(Serial.available() <= 0) timeout = true;
    12ba:	88 e7       	ldi	r24, 0x78	; 120
    12bc:	93 e0       	ldi	r25, 0x03	; 3
    12be:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN14HardwareSerial9availableEv>
    12c2:	18 16       	cp	r1, r24
    12c4:	19 06       	cpc	r1, r25
    12c6:	24 f3       	brlt	.-56     	; 0x1290 <_ZN11MeetAndroid7receiveEv+0xaa>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <_ZN11MeetAndroid7receiveEv+0xe8>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return timeout;
}
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	bf 90       	pop	r11
    12e0:	af 90       	pop	r10
    12e2:	08 95       	ret

000012e4 <_GLOBAL__I_meetAndroid>:
#define ERROR 3
#define NOTREADY 4
#define TIMEOUT 5

extern HardwareSerial Serial;
MeetAndroid meetAndroid;
    12e4:	8a ef       	ldi	r24, 0xFA	; 250
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZN11MeetAndroidC1Ev>
URMSerial urm;
    12ec:	80 ee       	ldi	r24, 0xE0	; 224
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN9URMSerialC1Ev>
		Serial.println("Timeout");
		break;
	}

	return -1;
}
    12f4:	08 95       	ret

000012f6 <_Z16getUSMeasurementv>:

	// add a little delay otherwise the phone is pretty busy
	delay(1000);
}

int getUSMeasurement() {
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <_Z16getUSMeasurementv+0x6>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	int value; // This value will be populated
	// Request a distance reading from the URM37
	switch (urm.requestMeasurementOrTimeout(DISTANCE, value)) // Find out the type of request
    1300:	80 ee       	ldi	r24, 0xE0	; 224
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	ae 01       	movw	r20, r28
    1308:	4f 5f       	subi	r20, 0xFF	; 255
    130a:	5f 4f       	sbci	r21, 0xFF	; 255
    130c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	a1 f0       	breq	.+40     	; 0x133c <_Z16getUSMeasurementv+0x46>
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	28 f4       	brcc	.+10     	; 0x1322 <_Z16getUSMeasurementv+0x2c>
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	41 f0       	breq	.+16     	; 0x132c <_Z16getUSMeasurementv+0x36>
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	f1 f4       	brne	.+60     	; 0x135c <_Z16getUSMeasurementv+0x66>
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <_Z16getUSMeasurementv+0x3c>
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	81 f0       	breq	.+32     	; 0x1346 <_Z16getUSMeasurementv+0x50>
    1326:	85 30       	cpi	r24, 0x05	; 5
    1328:	c9 f4       	brne	.+50     	; 0x135c <_Z16getUSMeasurementv+0x66>
    132a:	12 c0       	rjmp	.+36     	; 0x1350 <_Z16getUSMeasurementv+0x5a>
	{
	case DISTANCE: // Double check the reading we recieve is of DISTANCE type
		return value;
    132c:	29 81       	ldd	r18, Y+1	; 0x01
    132e:	3a 81       	ldd	r19, Y+2	; 0x02
    1330:	17 c0       	rjmp	.+46     	; 0x1360 <_Z16getUSMeasurementv+0x6a>
		break;
	case TEMPERATURE:
		Serial.println("Wrong reading type: Temperature");
    1332:	88 e7       	ldi	r24, 0x78	; 120
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	6b e2       	ldi	r22, 0x2B	; 43
    1338:	71 e0       	ldi	r23, 0x01	; 1
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <_Z16getUSMeasurementv+0x62>
		break;
	case ERROR:
		Serial.println("Error");
    133c:	88 e7       	ldi	r24, 0x78	; 120
    133e:	93 e0       	ldi	r25, 0x03	; 3
    1340:	6b e4       	ldi	r22, 0x4B	; 75
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <_Z16getUSMeasurementv+0x62>
		break;
	case NOTREADY:
		Serial.println("Not Ready");
    1346:	88 e7       	ldi	r24, 0x78	; 120
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	61 e5       	ldi	r22, 0x51	; 81
    134c:	71 e0       	ldi	r23, 0x01	; 1
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <_Z16getUSMeasurementv+0x62>
		break;
	case TIMEOUT:
		Serial.println("Timeout");
    1350:	88 e7       	ldi	r24, 0x78	; 120
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	6b e5       	ldi	r22, 0x5B	; 91
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN5Print7printlnEPKc>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	}

	return -1;
}
    1360:	c9 01       	movw	r24, r18
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <_Z8sendDataRK6Stringi>:
	pinMode(backSensor, INPUT);

	urm.begin(US_FRONT_RX, US_FRONT_TX, 9600);
}

void sendData(const String& prefix, int value) {
    136c:	cf 92       	push	r12
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	2e 97       	sbiw	r28, 0x0e	; 14
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	9c 01       	movw	r18, r24
    138e:	7b 01       	movw	r14, r22
	String toTrans = prefix + value;
	int length = toTrans.length() + 1;
	char charBuf[length];
	toTrans.toCharArray(charBuf, length);
	meetAndroid.send(charBuf);
}
    1390:	cd b6       	in	r12, 0x3d	; 61
    1392:	de b6       	in	r13, 0x3e	; 62
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1394:	8e 01       	movw	r16, r28
    1396:	08 5f       	subi	r16, 0xF8	; 248
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	c8 01       	movw	r24, r16
    139c:	b9 01       	movw	r22, r18
    139e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN6StringC2ERKS_>

	urm.begin(US_FRONT_RX, US_FRONT_TX, 9600);
}

void sendData(const String& prefix, int value) {
	String toTrans = prefix + value;
    13a2:	c8 01       	movw	r24, r16
    13a4:	b7 01       	movw	r22, r14
    13a6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZplRK15StringSumHelperi>
    13aa:	bc 01       	movw	r22, r24
    13ac:	7e 01       	movw	r14, r28
    13ae:	08 94       	sec
    13b0:	e1 1c       	adc	r14, r1
    13b2:	f1 1c       	adc	r15, r1
    13b4:	c7 01       	movw	r24, r14
    13b6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN6StringC1ERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN6StringD2Ev>
	int length = toTrans.length() + 1;
    13c0:	4d 81       	ldd	r20, Y+5	; 0x05
    13c2:	5e 81       	ldd	r21, Y+6	; 0x06
    13c4:	4f 5f       	subi	r20, 0xFF	; 255
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
	char charBuf[length];
    13c8:	8d b7       	in	r24, 0x3d	; 61
    13ca:	9e b7       	in	r25, 0x3e	; 62
    13cc:	84 1b       	sub	r24, r20
    13ce:	95 0b       	sbc	r25, r21
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	9e bf       	out	0x3e, r25	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	8d bf       	out	0x3d, r24	; 61
    13da:	0d b7       	in	r16, 0x3d	; 61
    13dc:	1e b7       	in	r17, 0x3e	; 62
    13de:	0f 5f       	subi	r16, 0xFF	; 255
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    13e2:	c7 01       	movw	r24, r14
    13e4:	b8 01       	movw	r22, r16
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZNK6String8getBytesEPhjj>
	toTrans.toCharArray(charBuf, length);
	meetAndroid.send(charBuf);
    13ee:	8a ef       	ldi	r24, 0xFA	; 250
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	b8 01       	movw	r22, r16
    13f4:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN11MeetAndroid4sendEPKc>
    13f8:	c7 01       	movw	r24, r14
    13fa:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN6StringD1Ev>
}
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de be       	out	0x3e, r13	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd be       	out	0x3d, r12	; 61
    1408:	2e 96       	adiw	r28, 0x0e	; 14
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	08 95       	ret

00001426 <loop>:

void loop() {
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	27 97       	sbiw	r28, 0x07	; 7
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
	meetAndroid.receive(); // you need to keep this in your loop() to receive events
    1442:	8a ef       	ldi	r24, 0xFA	; 250
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN11MeetAndroid7receiveEv>

	// read input pin and send result to Android
	//meetAndroid.send(digitalRead(sensor));
	int value = getUSMeasurement();
    144a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_Z16getUSMeasurementv>
    144e:	8c 01       	movw	r16, r24
	String prefix = "FRONTPROX: ";
    1450:	7e 01       	movw	r14, r28
    1452:	08 94       	sec
    1454:	e1 1c       	adc	r14, r1
    1456:	f1 1c       	adc	r15, r1
    1458:	c7 01       	movw	r24, r14
    145a:	63 e6       	ldi	r22, 0x63	; 99
    145c:	71 e0       	ldi	r23, 0x01	; 1
    145e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN6StringC1EPKc>
	sendData(prefix, value);
    1462:	c7 01       	movw	r24, r14
    1464:	b8 01       	movw	r22, r16
    1466:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z8sendDataRK6Stringi>

	value = digitalRead(backSensor);
    146a:	80 91 80 01 	lds	r24, 0x0180
    146e:	0e 94 84 10 	call	0x2108	; 0x2108 <digitalRead>
    1472:	8c 01       	movw	r16, r24
	prefix = "BACKPROX: ";
    1474:	c7 01       	movw	r24, r14
    1476:	6f e6       	ldi	r22, 0x6F	; 111
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN6StringaSEPKc>
	sendData(prefix, value);
    147e:	c7 01       	movw	r24, r14
    1480:	b8 01       	movw	r22, r16
    1482:	0e 94 b6 09 	call	0x136c	; 0x136c <_Z8sendDataRK6Stringi>

	// add a little delay otherwise the phone is pretty busy
	delay(1000);
    1486:	68 ee       	ldi	r22, 0xE8	; 232
    1488:	73 e0       	ldi	r23, 0x03	; 3
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <delay>
    1492:	c7 01       	movw	r24, r14
    1494:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN6StringD1Ev>
}
    1498:	27 96       	adiw	r28, 0x07	; 7
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	08 95       	ret

000014b2 <setup>:
long BAUD_RATE = 115200;

int US_FRONT_RX = 2; //Ultrasonic sensor output  1
int US_FRONT_TX = 3; //Ultrasonic sensor output 2

void setup() {
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
	// use the baud rate your bluetooth module is configured to
	Serial.begin(BAUD_RATE);
    14b6:	40 91 82 01 	lds	r20, 0x0182
    14ba:	50 91 83 01 	lds	r21, 0x0183
    14be:	60 91 84 01 	lds	r22, 0x0184
    14c2:	70 91 85 01 	lds	r23, 0x0185
    14c6:	88 e7       	ldi	r24, 0x78	; 120
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14HardwareSerial5beginEm>

	// we initialize pin 11 as an input pin
	pinMode(backSensor, INPUT);
    14ce:	80 91 80 01 	lds	r24, 0x0180
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <pinMode>

	urm.begin(US_FRONT_RX, US_FRONT_TX, 9600);
    14d8:	80 ee       	ldi	r24, 0xE0	; 224
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	60 91 86 01 	lds	r22, 0x0186
    14e0:	40 91 88 01 	lds	r20, 0x0188
    14e4:	00 e8       	ldi	r16, 0x80	; 128
    14e6:	15 e2       	ldi	r17, 0x25	; 37
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN9URMSerial5beginEhhl>
}
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    14f6:	08 95       	ret

000014f8 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1510:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1514:	20 91 30 03 	lds	r18, 0x0330
    1518:	30 91 31 03 	lds	r19, 0x0331

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	2f 73       	andi	r18, 0x3F	; 63
    1522:	30 70       	andi	r19, 0x00	; 0
    1524:	80 91 32 03 	lds	r24, 0x0332
    1528:	90 91 33 03 	lds	r25, 0x0333
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	59 f0       	breq	.+22     	; 0x1548 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    1532:	e0 91 30 03 	lds	r30, 0x0330
    1536:	f0 91 31 03 	lds	r31, 0x0331
    153a:	e0 51       	subi	r30, 0x10	; 16
    153c:	fd 4f       	sbci	r31, 0xFD	; 253
    153e:	40 83       	st	Z, r20
    buffer->head = i;
    1540:	30 93 31 03 	sts	0x0331, r19
    1544:	20 93 30 03 	sts	0x0330, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	9f 91       	pop	r25
    154e:	8f 91       	pop	r24
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1560:	e0 91 84 03 	lds	r30, 0x0384
    1564:	f0 91 85 03 	lds	r31, 0x0385
    1568:	e0 5c       	subi	r30, 0xC0	; 192
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	81 91       	ld	r24, Z+
    156e:	91 91       	ld	r25, Z+
    1570:	20 81       	ld	r18, Z
    1572:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1574:	82 1b       	sub	r24, r18
    1576:	93 0b       	sbc	r25, r19
    1578:	8f 73       	andi	r24, 0x3F	; 63
    157a:	90 70       	andi	r25, 0x00	; 0
    157c:	89 2b       	or	r24, r25
    157e:	11 f0       	breq	.+4      	; 0x1584 <_Z14serialEventRunv+0x24>
    1580:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z11serialEventv>
    1584:	08 95       	ret

00001586 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	ef 93       	push	r30
    159a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    159c:	20 91 74 03 	lds	r18, 0x0374
    15a0:	30 91 75 03 	lds	r19, 0x0375
    15a4:	80 91 76 03 	lds	r24, 0x0376
    15a8:	90 91 77 03 	lds	r25, 0x0377
    15ac:	28 17       	cp	r18, r24
    15ae:	39 07       	cpc	r19, r25
    15b0:	31 f4       	brne	.+12     	; 0x15be <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    15b2:	80 91 c1 00 	lds	r24, 0x00C1
    15b6:	8f 7d       	andi	r24, 0xDF	; 223
    15b8:	80 93 c1 00 	sts	0x00C1, r24
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    15be:	e0 91 76 03 	lds	r30, 0x0376
    15c2:	f0 91 77 03 	lds	r31, 0x0377
    15c6:	ec 5c       	subi	r30, 0xCC	; 204
    15c8:	fc 4f       	sbci	r31, 0xFC	; 252
    15ca:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    15cc:	80 91 76 03 	lds	r24, 0x0376
    15d0:	90 91 77 03 	lds	r25, 0x0377
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	8f 73       	andi	r24, 0x3F	; 63
    15d8:	90 70       	andi	r25, 0x00	; 0
    15da:	90 93 77 03 	sts	0x0377, r25
    15de:	80 93 76 03 	sts	0x0376, r24
	
  #if defined(UDR0)
    UDR0 = c;
    15e2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	7a 01       	movw	r14, r20
    1612:	8b 01       	movw	r16, r22
    1614:	dd 24       	eor	r13, r13
    1616:	40 30       	cpi	r20, 0x00	; 0
    1618:	81 ee       	ldi	r24, 0xE1	; 225
    161a:	58 07       	cpc	r21, r24
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	68 07       	cpc	r22, r24
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	78 07       	cpc	r23, r24
    1624:	11 f0       	breq	.+4      	; 0x162a <_ZN14HardwareSerial5beginEm+0x2e>
    1626:	dd 24       	eor	r13, r13
    1628:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	a9 2e       	mov	r10, r25
    162e:	b1 2c       	mov	r11, r1
    1630:	ec 89       	ldd	r30, Y+20	; 0x14
    1632:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1634:	dd 20       	and	r13, r13
    1636:	69 f0       	breq	.+26     	; 0x1652 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1638:	c5 01       	movw	r24, r10
    163a:	0e 8c       	ldd	r0, Y+30	; 0x1e
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <_ZN14HardwareSerial5beginEm+0x46>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <_ZN14HardwareSerial5beginEm+0x42>
    1646:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	79 e0       	ldi	r23, 0x09	; 9
    164c:	8d e3       	ldi	r24, 0x3D	; 61
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	05 c0       	rjmp	.+10     	; 0x165c <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1652:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1654:	60 e8       	ldi	r22, 0x80	; 128
    1656:	74 e8       	ldi	r23, 0x84	; 132
    1658:	8e e1       	ldi	r24, 0x1E	; 30
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a8 01       	movw	r20, r16
    165e:	97 01       	movw	r18, r14
    1660:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodsi4>
    1664:	21 50       	subi	r18, 0x01	; 1
    1666:	30 40       	sbci	r19, 0x00	; 0
    1668:	40 40       	sbci	r20, 0x00	; 0
    166a:	50 40       	sbci	r21, 0x00	; 0
    166c:	56 95       	lsr	r21
    166e:	47 95       	ror	r20
    1670:	37 95       	ror	r19
    1672:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1674:	80 e1       	ldi	r24, 0x10	; 16
    1676:	20 30       	cpi	r18, 0x00	; 0
    1678:	38 07       	cpc	r19, r24
    167a:	20 f0       	brcs	.+8      	; 0x1684 <_ZN14HardwareSerial5beginEm+0x88>
    167c:	dd 20       	and	r13, r13
    167e:	11 f0       	breq	.+4      	; 0x1684 <_ZN14HardwareSerial5beginEm+0x88>
    1680:	dd 24       	eor	r13, r13
    1682:	d6 cf       	rjmp	.-84     	; 0x1630 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1684:	e8 89       	ldd	r30, Y+16	; 0x10
    1686:	f9 89       	ldd	r31, Y+17	; 0x11
    1688:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    168a:	ea 89       	ldd	r30, Y+18	; 0x12
    168c:	fb 89       	ldd	r31, Y+19	; 0x13
    168e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1690:	ee 89       	ldd	r30, Y+22	; 0x16
    1692:	ff 89       	ldd	r31, Y+23	; 0x17
    1694:	40 81       	ld	r20, Z
    1696:	21 e0       	ldi	r18, 0x01	; 1
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	c9 01       	movw	r24, r18
    169c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN14HardwareSerial5beginEm+0xa8>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <_ZN14HardwareSerial5beginEm+0xa4>
    16a8:	48 2b       	or	r20, r24
    16aa:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    16ac:	ee 89       	ldd	r30, Y+22	; 0x16
    16ae:	ff 89       	ldd	r31, Y+23	; 0x17
    16b0:	40 81       	ld	r20, Z
    16b2:	c9 01       	movw	r24, r18
    16b4:	0b 8c       	ldd	r0, Y+27	; 0x1b
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <_ZN14HardwareSerial5beginEm+0xc0>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <_ZN14HardwareSerial5beginEm+0xbc>
    16c0:	48 2b       	or	r20, r24
    16c2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    16c4:	ee 89       	ldd	r30, Y+22	; 0x16
    16c6:	ff 89       	ldd	r31, Y+23	; 0x17
    16c8:	40 81       	ld	r20, Z
    16ca:	c9 01       	movw	r24, r18
    16cc:	0c 8c       	ldd	r0, Y+28	; 0x1c
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <_ZN14HardwareSerial5beginEm+0xd8>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <_ZN14HardwareSerial5beginEm+0xd4>
    16d8:	48 2b       	or	r20, r24
    16da:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    16dc:	ee 89       	ldd	r30, Y+22	; 0x16
    16de:	ff 89       	ldd	r31, Y+23	; 0x17
    16e0:	80 81       	ld	r24, Z
    16e2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <_ZN14HardwareSerial5beginEm+0xee>
    16e6:	22 0f       	add	r18, r18
    16e8:	33 1f       	adc	r19, r19
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <_ZN14HardwareSerial5beginEm+0xea>
    16ee:	20 95       	com	r18
    16f0:	28 23       	and	r18, r24
    16f2:	20 83       	st	Z, r18
}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	bf 90       	pop	r11
    1704:	af 90       	pop	r10
    1706:	08 95       	ret

00001708 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1708:	dc 01       	movw	r26, r24
    170a:	1c 96       	adiw	r26, 0x0c	; 12
    170c:	ed 91       	ld	r30, X+
    170e:	fc 91       	ld	r31, X
    1710:	1d 97       	sbiw	r26, 0x0d	; 13
    1712:	e0 5c       	subi	r30, 0xC0	; 192
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	21 91       	ld	r18, Z+
    1718:	31 91       	ld	r19, Z+
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	28 1b       	sub	r18, r24
    1720:	39 0b       	sbc	r19, r25
    1722:	2f 73       	andi	r18, 0x3F	; 63
    1724:	30 70       	andi	r19, 0x00	; 0
}
    1726:	c9 01       	movw	r24, r18
    1728:	08 95       	ret

0000172a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    172a:	dc 01       	movw	r26, r24
    172c:	1c 96       	adiw	r26, 0x0c	; 12
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	1d 97       	sbiw	r26, 0x0d	; 13
    1734:	e0 5c       	subi	r30, 0xC0	; 192
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	20 81       	ld	r18, Z
    173a:	31 81       	ldd	r19, Z+1	; 0x01
    173c:	e0 54       	subi	r30, 0x40	; 64
    173e:	f0 40       	sbci	r31, 0x00	; 0
    1740:	df 01       	movw	r26, r30
    1742:	ae 5b       	subi	r26, 0xBE	; 190
    1744:	bf 4f       	sbci	r27, 0xFF	; 255
    1746:	8d 91       	ld	r24, X+
    1748:	9c 91       	ld	r25, X
    174a:	11 97       	sbiw	r26, 0x01	; 1
    174c:	28 17       	cp	r18, r24
    174e:	39 07       	cpc	r19, r25
    1750:	19 f4       	brne	.+6      	; 0x1758 <_ZN14HardwareSerial4peekEv+0x2e>
    1752:	2f ef       	ldi	r18, 0xFF	; 255
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1758:	8d 91       	ld	r24, X+
    175a:	9c 91       	ld	r25, X
    175c:	e8 0f       	add	r30, r24
    175e:	f9 1f       	adc	r31, r25
    1760:	80 81       	ld	r24, Z
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1766:	c9 01       	movw	r24, r18
    1768:	08 95       	ret

0000176a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    176a:	dc 01       	movw	r26, r24
    176c:	1c 96       	adiw	r26, 0x0c	; 12
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	1d 97       	sbiw	r26, 0x0d	; 13
    1774:	e0 5c       	subi	r30, 0xC0	; 192
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	20 81       	ld	r18, Z
    177a:	31 81       	ldd	r19, Z+1	; 0x01
    177c:	e0 54       	subi	r30, 0x40	; 64
    177e:	f0 40       	sbci	r31, 0x00	; 0
    1780:	df 01       	movw	r26, r30
    1782:	ae 5b       	subi	r26, 0xBE	; 190
    1784:	bf 4f       	sbci	r27, 0xFF	; 255
    1786:	8d 91       	ld	r24, X+
    1788:	9c 91       	ld	r25, X
    178a:	11 97       	sbiw	r26, 0x01	; 1
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	19 f4       	brne	.+6      	; 0x1798 <_ZN14HardwareSerial4readEv+0x2e>
    1792:	2f ef       	ldi	r18, 0xFF	; 255
    1794:	3f ef       	ldi	r19, 0xFF	; 255
    1796:	10 c0       	rjmp	.+32     	; 0x17b8 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	11 97       	sbiw	r26, 0x01	; 1
    179e:	e8 0f       	add	r30, r24
    17a0:	f9 1f       	adc	r31, r25
    17a2:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    17a4:	8d 91       	ld	r24, X+
    17a6:	9c 91       	ld	r25, X
    17a8:	11 97       	sbiw	r26, 0x01	; 1
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	8f 73       	andi	r24, 0x3F	; 63
    17ae:	90 70       	andi	r25, 0x00	; 0
    17b0:	11 96       	adiw	r26, 0x01	; 1
    17b2:	9c 93       	st	X, r25
    17b4:	8e 93       	st	-X, r24
    return c;
    17b6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    17b8:	c9 01       	movw	r24, r18
    17ba:	08 95       	ret

000017bc <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    17bc:	fc 01       	movw	r30, r24
    17be:	86 85       	ldd	r24, Z+14	; 0x0e
    17c0:	97 85       	ldd	r25, Z+15	; 0x0f
    17c2:	dc 01       	movw	r26, r24
    17c4:	a0 5c       	subi	r26, 0xC0	; 192
    17c6:	bf 4f       	sbci	r27, 0xFF	; 255
    17c8:	fc 01       	movw	r30, r24
    17ca:	ee 5b       	subi	r30, 0xBE	; 190
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	2d 91       	ld	r18, X+
    17d0:	3c 91       	ld	r19, X
    17d2:	11 97       	sbiw	r26, 0x01	; 1
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	28 17       	cp	r18, r24
    17da:	39 07       	cpc	r19, r25
    17dc:	c1 f7       	brne	.-16     	; 0x17ce <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    17de:	08 95       	ret

000017e0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    17e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    17e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    17ea:	e0 5c       	subi	r30, 0xC0	; 192
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	20 81       	ld	r18, Z
    17f0:	31 81       	ldd	r19, Z+1	; 0x01
    17f2:	e0 54       	subi	r30, 0x40	; 64
    17f4:	f0 40       	sbci	r31, 0x00	; 0
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	2f 73       	andi	r18, 0x3F	; 63
    17fc:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    17fe:	df 01       	movw	r26, r30
    1800:	ae 5b       	subi	r26, 0xBE	; 190
    1802:	bf 4f       	sbci	r27, 0xFF	; 255
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	11 97       	sbiw	r26, 0x01	; 1
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	d1 f3       	breq	.-12     	; 0x1804 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1810:	e0 5c       	subi	r30, 0xC0	; 192
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	e0 54       	subi	r30, 0x40	; 64
    181a:	f0 40       	sbci	r31, 0x00	; 0
    181c:	e8 0f       	add	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1822:	ee 85       	ldd	r30, Y+14	; 0x0e
    1824:	ff 85       	ldd	r31, Y+15	; 0x0f
    1826:	e0 5c       	subi	r30, 0xC0	; 192
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	31 83       	std	Z+1, r19	; 0x01
    182c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    182e:	ee 89       	ldd	r30, Y+22	; 0x16
    1830:	ff 89       	ldd	r31, Y+23	; 0x17
    1832:	20 81       	ld	r18, Z
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0d 8c       	ldd	r0, Y+29	; 0x1d
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <_ZN14HardwareSerial5writeEh+0x60>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <_ZN14HardwareSerial5writeEh+0x5c>
    1844:	28 2b       	or	r18, r24
    1846:	20 83       	st	Z, r18
  
  return 1;
}
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1852:	10 92 7b 03 	sts	0x037B, r1
    1856:	10 92 7a 03 	sts	0x037A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    185a:	88 ee       	ldi	r24, 0xE8	; 232
    185c:	93 e0       	ldi	r25, 0x03	; 3
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	80 93 7c 03 	sts	0x037C, r24
    1866:	90 93 7d 03 	sts	0x037D, r25
    186a:	a0 93 7e 03 	sts	0x037E, r26
    186e:	b0 93 7f 03 	sts	0x037F, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1872:	89 ea       	ldi	r24, 0xA9	; 169
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	90 93 79 03 	sts	0x0379, r25
    187a:	80 93 78 03 	sts	0x0378, r24
{
  _rx_buffer = rx_buffer;
    187e:	80 ef       	ldi	r24, 0xF0	; 240
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	90 93 85 03 	sts	0x0385, r25
    1886:	80 93 84 03 	sts	0x0384, r24
  _tx_buffer = tx_buffer;
    188a:	84 e3       	ldi	r24, 0x34	; 52
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	90 93 87 03 	sts	0x0387, r25
    1892:	80 93 86 03 	sts	0x0386, r24
  _ubrrh = ubrrh;
    1896:	85 ec       	ldi	r24, 0xC5	; 197
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	90 93 89 03 	sts	0x0389, r25
    189e:	80 93 88 03 	sts	0x0388, r24
  _ubrrl = ubrrl;
    18a2:	84 ec       	ldi	r24, 0xC4	; 196
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	90 93 8b 03 	sts	0x038B, r25
    18aa:	80 93 8a 03 	sts	0x038A, r24
  _ucsra = ucsra;
    18ae:	80 ec       	ldi	r24, 0xC0	; 192
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 8d 03 	sts	0x038D, r25
    18b6:	80 93 8c 03 	sts	0x038C, r24
  _ucsrb = ucsrb;
    18ba:	81 ec       	ldi	r24, 0xC1	; 193
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	90 93 8f 03 	sts	0x038F, r25
    18c2:	80 93 8e 03 	sts	0x038E, r24
  _udr = udr;
    18c6:	86 ec       	ldi	r24, 0xC6	; 198
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	90 93 91 03 	sts	0x0391, r25
    18ce:	80 93 90 03 	sts	0x0390, r24
  _rxen = rxen;
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	80 93 92 03 	sts	0x0392, r24
  _txen = txen;
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	80 93 93 03 	sts	0x0393, r24
  _rxcie = rxcie;
    18de:	87 e0       	ldi	r24, 0x07	; 7
    18e0:	80 93 94 03 	sts	0x0394, r24
  _udrie = udrie;
    18e4:	85 e0       	ldi	r24, 0x05	; 5
    18e6:	80 93 95 03 	sts	0x0395, r24
  _u2x = u2x;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 96 03 	sts	0x0396, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    18f0:	08 95       	ret

000018f2 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	7c 01       	movw	r14, r24
    1904:	6b 01       	movw	r12, r22
    1906:	8a 01       	movw	r16, r20
    1908:	c0 e0       	ldi	r28, 0x00	; 0
    190a:	d0 e0       	ldi	r29, 0x00	; 0
    190c:	0f c0       	rjmp	.+30     	; 0x192c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    190e:	d6 01       	movw	r26, r12
    1910:	6d 91       	ld	r22, X+
    1912:	6d 01       	movw	r12, r26
    1914:	d7 01       	movw	r26, r14
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	01 90       	ld	r0, Z+
    191c:	f0 81       	ld	r31, Z
    191e:	e0 2d       	mov	r30, r0
    1920:	c7 01       	movw	r24, r14
    1922:	09 95       	icall
    1924:	c8 0f       	add	r28, r24
    1926:	d9 1f       	adc	r29, r25
    1928:	01 50       	subi	r16, 0x01	; 1
    192a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    192c:	01 15       	cp	r16, r1
    192e:	11 05       	cpc	r17, r1
    1930:	71 f7       	brne	.-36     	; 0x190e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1932:	ce 01       	movw	r24, r28
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	08 95       	ret

00001946 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1946:	dc 01       	movw	r26, r24
{
  return write(c);
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	01 90       	ld	r0, Z+
    194e:	f0 81       	ld	r31, Z
    1950:	e0 2d       	mov	r30, r0
    1952:	09 95       	icall
}
    1954:	08 95       	ret

00001956 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1960:	dc 01       	movw	r26, r24
    1962:	ed 91       	ld	r30, X+
    1964:	fc 91       	ld	r31, X
    1966:	01 90       	ld	r0, Z+
    1968:	f0 81       	ld	r31, Z
    196a:	e0 2d       	mov	r30, r0
    196c:	6d e0       	ldi	r22, 0x0D	; 13
    196e:	09 95       	icall
    1970:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    1972:	d8 01       	movw	r26, r16
    1974:	ed 91       	ld	r30, X+
    1976:	fc 91       	ld	r31, X
    1978:	01 90       	ld	r0, Z+
    197a:	f0 81       	ld	r31, Z
    197c:	e0 2d       	mov	r30, r0
    197e:	c8 01       	movw	r24, r16
    1980:	6a e0       	ldi	r22, 0x0A	; 10
    1982:	09 95       	icall
    1984:	9c 01       	movw	r18, r24
    1986:	2e 0d       	add	r18, r14
    1988:	3f 1d       	adc	r19, r15
    198a:	c9 01       	movw	r24, r18
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	08 95       	ret

00001996 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	db 01       	movw	r26, r22
    199c:	0d 90       	ld	r0, X+
    199e:	00 20       	and	r0, r0
    19a0:	e9 f7       	brne	.-6      	; 0x199c <_ZN5Print5writeEPKc+0x6>
    19a2:	11 97       	sbiw	r26, 0x01	; 1
    19a4:	a6 1b       	sub	r26, r22
    19a6:	b7 0b       	sbc	r27, r23
    19a8:	ec 01       	movw	r28, r24
    19aa:	e8 81       	ld	r30, Y
    19ac:	f9 81       	ldd	r31, Y+1	; 0x01
    19ae:	02 80       	ldd	r0, Z+2	; 0x02
    19b0:	f3 81       	ldd	r31, Z+3	; 0x03
    19b2:	e0 2d       	mov	r30, r0
    19b4:	ad 01       	movw	r20, r26
    19b6:	09 95       	icall
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    19be:	4f 92       	push	r4
    19c0:	5f 92       	push	r5
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	a1 97       	sbiw	r28, 0x21	; 33
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	2c 01       	movw	r4, r24
    19ee:	74 2e       	mov	r7, r20
    19f0:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <_ZN5Print11printNumberEmh+0x3a>
    19f6:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    19f8:	19 a2       	std	Y+33, r1	; 0x21
    19fa:	31 e2       	ldi	r19, 0x21	; 33
    19fc:	c3 2e       	mov	r12, r19
    19fe:	d1 2c       	mov	r13, r1
    1a00:	cc 0e       	add	r12, r28
    1a02:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1a04:	82 2e       	mov	r8, r18
    1a06:	99 24       	eor	r9, r9
    1a08:	aa 24       	eor	r10, r10
    1a0a:	bb 24       	eor	r11, r11
    1a0c:	67 2d       	mov	r22, r7
    1a0e:	75 2f       	mov	r23, r21
    1a10:	a5 01       	movw	r20, r10
    1a12:	94 01       	movw	r18, r8
    1a14:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodsi4>
    1a18:	79 01       	movw	r14, r18
    1a1a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	b7 01       	movw	r22, r14
    1a20:	a5 01       	movw	r20, r10
    1a22:	94 01       	movw	r18, r8
    1a24:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__mulsi3>
    1a28:	47 2d       	mov	r20, r7
    1a2a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1a2c:	08 94       	sec
    1a2e:	c1 08       	sbc	r12, r1
    1a30:	d1 08       	sbc	r13, r1
    1a32:	4a 30       	cpi	r20, 0x0A	; 10
    1a34:	14 f4       	brge	.+4      	; 0x1a3a <_ZN5Print11printNumberEmh+0x7c>
    1a36:	40 5d       	subi	r20, 0xD0	; 208
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <_ZN5Print11printNumberEmh+0x7e>
    1a3a:	49 5c       	subi	r20, 0xC9	; 201
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1a40:	e1 14       	cp	r14, r1
    1a42:	f1 04       	cpc	r15, r1
    1a44:	01 05       	cpc	r16, r1
    1a46:	11 05       	cpc	r17, r1
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <_ZN5Print11printNumberEmh+0x94>
    1a4a:	7e 2c       	mov	r7, r14
    1a4c:	5f 2d       	mov	r21, r15
    1a4e:	c8 01       	movw	r24, r16
    1a50:	dd cf       	rjmp	.-70     	; 0x1a0c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1a52:	c2 01       	movw	r24, r4
    1a54:	b6 01       	movw	r22, r12
    1a56:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN5Print5writeEPKc>
}
    1a5a:	a1 96       	adiw	r28, 0x21	; 33
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	df 90       	pop	r13
    1a74:	cf 90       	pop	r12
    1a76:	bf 90       	pop	r11
    1a78:	af 90       	pop	r10
    1a7a:	9f 90       	pop	r9
    1a7c:	8f 90       	pop	r8
    1a7e:	7f 90       	pop	r7
    1a80:	5f 90       	pop	r5
    1a82:	4f 90       	pop	r4
    1a84:	08 95       	ret

00001a86 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1a86:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1a88:	21 15       	cp	r18, r1
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	41 f4       	brne	.+16     	; 0x1a9e <_ZN5Print5printEmi+0x18>
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	01 90       	ld	r0, Z+
    1a94:	f0 81       	ld	r31, Z
    1a96:	e0 2d       	mov	r30, r0
    1a98:	64 2f       	mov	r22, r20
    1a9a:	09 95       	icall
    1a9c:	08 95       	ret
  else return printNumber(n, base);
    1a9e:	0e 94 df 0c 	call	0x19be	; 0x19be <_ZN5Print11printNumberEmh>
}
    1aa2:	08 95       	ret

00001aa4 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1aae:	e6 2e       	mov	r14, r22
    1ab0:	ff 24       	eor	r15, r15
    1ab2:	00 e0       	ldi	r16, 0x00	; 0
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	a7 01       	movw	r20, r14
    1aba:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <_ZN5Print5printEmi>
}
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	08 95       	ret

00001ac8 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1ac8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN5Print5writeEPKc>
}
    1acc:	08 95       	ret

00001ace <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1ad8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN5Print5writeEPKc>
    1adc:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1ade:	c7 01       	movw	r24, r14
    1ae0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN5Print7printlnEv>
    1ae4:	08 0f       	add	r16, r24
    1ae6:	19 1f       	adc	r17, r25
  return n;
}
    1ae8:	c8 01       	movw	r24, r16
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	08 95       	ret

00001af4 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	fc 01       	movw	r30, r24
    1afe:	8b 01       	movw	r16, r22
{
	if (!bufsize || !buf) return;
    1b00:	41 15       	cp	r20, r1
    1b02:	51 05       	cpc	r21, r1
    1b04:	f9 f0       	breq	.+62     	; 0x1b44 <_ZNK6String8getBytesEPhjj+0x50>
    1b06:	61 15       	cp	r22, r1
    1b08:	71 05       	cpc	r23, r1
    1b0a:	e1 f0       	breq	.+56     	; 0x1b44 <_ZNK6String8getBytesEPhjj+0x50>
	if (index >= len) {
    1b0c:	84 81       	ldd	r24, Z+4	; 0x04
    1b0e:	95 81       	ldd	r25, Z+5	; 0x05
    1b10:	28 17       	cp	r18, r24
    1b12:	39 07       	cpc	r19, r25
    1b14:	18 f0       	brcs	.+6      	; 0x1b1c <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    1b16:	fb 01       	movw	r30, r22
    1b18:	10 82       	st	Z, r1
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <_ZNK6String8getBytesEPhjj+0x50>
		return;
	}
	unsigned int n = bufsize - 1;
    1b1c:	41 50       	subi	r20, 0x01	; 1
    1b1e:	50 40       	sbci	r21, 0x00	; 0
    1b20:	ec 01       	movw	r28, r24
    1b22:	c2 1b       	sub	r28, r18
    1b24:	d3 0b       	sbc	r29, r19
    1b26:	4c 17       	cp	r20, r28
    1b28:	5d 07       	cpc	r21, r29
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <_ZNK6String8getBytesEPhjj+0x3a>
    1b2c:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	62 0f       	add	r22, r18
    1b34:	73 1f       	adc	r23, r19
    1b36:	c8 01       	movw	r24, r16
    1b38:	ae 01       	movw	r20, r28
    1b3a:	0e 94 bc 02 	call	0x578	; 0x578 <strncpy>
	buf[n] = 0;
    1b3e:	c0 0f       	add	r28, r16
    1b40:	d1 1f       	adc	r29, r17
    1b42:	18 82       	st	Y, r1
}
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	ec 01       	movw	r28, r24
    1b58:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1b5a:	6f 5f       	subi	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	88 81       	ld	r24, Y
    1b60:	99 81       	ldd	r25, Y+1	; 0x01
    1b62:	0e 94 d7 01 	call	0x3ae	; 0x3ae <realloc>
	if (newbuffer) {
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	11 f4       	brne	.+4      	; 0x1b6e <_ZN6String12changeBufferEj+0x20>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	05 c0       	rjmp	.+10     	; 0x1b78 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    1b6e:	99 83       	std	Y+1, r25	; 0x01
    1b70:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1b72:	1b 83       	std	Y+3, r17	; 0x03
    1b74:	0a 83       	std	Y+2, r16	; 0x02
    1b76:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    1b88:	88 81       	ld	r24, Y
    1b8a:	99 81       	ldd	r25, Y+1	; 0x01
    1b8c:	89 2b       	or	r24, r25
    1b8e:	29 f0       	breq	.+10     	; 0x1b9a <_ZN6String7reserveEj+0x18>
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	9b 81       	ldd	r25, Y+3	; 0x03
    1b94:	86 17       	cp	r24, r22
    1b96:	97 07       	cpc	r25, r23
    1b98:	60 f4       	brcc	.+24     	; 0x1bb2 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN6String12changeBufferEj>
    1ba0:	88 23       	and	r24, r24
    1ba2:	41 f0       	breq	.+16     	; 0x1bb4 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	89 2b       	or	r24, r25
    1baa:	19 f4       	brne	.+6      	; 0x1bb2 <_ZN6String7reserveEj+0x30>
    1bac:	e8 81       	ld	r30, Y
    1bae:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb0:	10 82       	st	Z, r1
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    1bca:	6c 81       	ldd	r22, Y+4	; 0x04
    1bcc:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    1bce:	e1 14       	cp	r14, r1
    1bd0:	f1 04       	cpc	r15, r1
    1bd2:	c1 f0       	breq	.+48     	; 0x1c04 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    1bd4:	41 15       	cp	r20, r1
    1bd6:	51 05       	cpc	r21, r1
    1bd8:	99 f0       	breq	.+38     	; 0x1c00 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    1bda:	8a 01       	movw	r16, r20
    1bdc:	06 0f       	add	r16, r22
    1bde:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    1be0:	b8 01       	movw	r22, r16
    1be2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZN6String7reserveEj>
    1be6:	88 23       	and	r24, r24
    1be8:	69 f0       	breq	.+26     	; 0x1c04 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    1bea:	88 81       	ld	r24, Y
    1bec:	99 81       	ldd	r25, Y+1	; 0x01
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	82 0f       	add	r24, r18
    1bf4:	93 1f       	adc	r25, r19
    1bf6:	b7 01       	movw	r22, r14
    1bf8:	0e 94 b5 02 	call	0x56a	; 0x56a <strcpy>
	len = newlen;
    1bfc:	1d 83       	std	Y+5, r17	; 0x05
    1bfe:	0c 83       	std	Y+4, r16	; 0x04
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    1c04:	80 e0       	ldi	r24, 0x00	; 0
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	08 95       	ret

00001c14 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	27 97       	sbiw	r28, 0x07	; 7
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	7c 01       	movw	r14, r24
    1c32:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    1c34:	8e 01       	movw	r16, r28
    1c36:	0f 5f       	subi	r16, 0xFF	; 255
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	b8 01       	movw	r22, r16
    1c3c:	4a e0       	ldi	r20, 0x0A	; 10
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	0e 94 cb 02 	call	0x596	; 0x596 <itoa>
	return concat(buf, strlen(buf));
    1c44:	f8 01       	movw	r30, r16
    1c46:	01 90       	ld	r0, Z+
    1c48:	00 20       	and	r0, r0
    1c4a:	e9 f7       	brne	.-6      	; 0x1c46 <_ZN6String6concatEi+0x32>
    1c4c:	31 97       	sbiw	r30, 0x01	; 1
    1c4e:	e0 1b       	sub	r30, r16
    1c50:	f1 0b       	sbc	r31, r17
    1c52:	c7 01       	movw	r24, r14
    1c54:	b8 01       	movw	r22, r16
    1c56:	af 01       	movw	r20, r30
    1c58:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN6String6concatEPKcj>
}
    1c5c:	27 96       	adiw	r28, 0x07	; 7
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	08 95       	ret

00001c76 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    1c7c:	88 81       	ld	r24, Y
    1c7e:	99 81       	ldd	r25, Y+1	; 0x01
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	11 f0       	breq	.+4      	; 0x1c88 <_ZN6String10invalidateEv+0x12>
    1c84:	0e 94 7f 01 	call	0x2fe	; 0x2fe <free>
	buffer = NULL;
    1c88:	19 82       	std	Y+1, r1	; 0x01
    1c8a:	18 82       	st	Y, r1
	capacity = len = 0;
    1c8c:	1d 82       	std	Y+5, r1	; 0x05
    1c8e:	1c 82       	std	Y+4, r1	; 0x04
    1c90:	1b 82       	std	Y+3, r1	; 0x03
    1c92:	1a 82       	std	Y+2, r1	; 0x02
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	18 2f       	mov	r17, r24
    1ca0:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    1ca2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN6String6concatEi>
    1ca6:	88 23       	and	r24, r24
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <_ZplRK15StringSumHelperi+0x18>
    1caa:	81 2f       	mov	r24, r17
    1cac:	90 2f       	mov	r25, r16
    1cae:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6String10invalidateEv>
	return a;
}
    1cb2:	81 2f       	mov	r24, r17
    1cb4:	90 2f       	mov	r25, r16
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	ec 01       	movw	r28, r24
    1cca:	7b 01       	movw	r14, r22
    1ccc:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    1cce:	ba 01       	movw	r22, r20
    1cd0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZN6String7reserveEj>
    1cd4:	88 23       	and	r24, r24
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    1cd8:	ce 01       	movw	r24, r28
    1cda:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6String10invalidateEv>
    1cde:	07 c0       	rjmp	.+14     	; 0x1cee <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    1ce0:	1d 83       	std	Y+5, r17	; 0x05
    1ce2:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1ce4:	88 81       	ld	r24, Y
    1ce6:	99 81       	ldd	r25, Y+1	; 0x01
    1ce8:	b7 01       	movw	r22, r14
    1cea:	0e 94 b5 02 	call	0x56a	; 0x56a <strcpy>
	return *this;
}
    1cee:	ce 01       	movw	r24, r28
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	ff 90       	pop	r15
    1cfa:	ef 90       	pop	r14
    1cfc:	08 95       	ret

00001cfe <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1d04:	19 82       	std	Y+1, r1	; 0x01
    1d06:	18 82       	st	Y, r1
	capacity = 0;
    1d08:	1b 82       	std	Y+3, r1	; 0x03
    1d0a:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    1d0c:	1d 82       	std	Y+5, r1	; 0x05
    1d0e:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    1d10:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1d12:	61 15       	cp	r22, r1
    1d14:	71 05       	cpc	r23, r1
    1d16:	51 f0       	breq	.+20     	; 0x1d2c <_ZN6StringC1EPKc+0x2e>
    1d18:	db 01       	movw	r26, r22
    1d1a:	0d 90       	ld	r0, X+
    1d1c:	00 20       	and	r0, r0
    1d1e:	e9 f7       	brne	.-6      	; 0x1d1a <_ZN6StringC1EPKc+0x1c>
    1d20:	11 97       	sbiw	r26, 0x01	; 1
    1d22:	a6 1b       	sub	r26, r22
    1d24:	b7 0b       	sbc	r27, r23
    1d26:	ad 01       	movw	r20, r26
    1d28:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6String4copyEPKcj>
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	18 2f       	mov	r17, r24
    1d38:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    1d3a:	61 15       	cp	r22, r1
    1d3c:	71 05       	cpc	r23, r1
    1d3e:	59 f0       	breq	.+22     	; 0x1d56 <_ZN6StringaSEPKc+0x24>
    1d40:	db 01       	movw	r26, r22
    1d42:	0d 90       	ld	r0, X+
    1d44:	00 20       	and	r0, r0
    1d46:	e9 f7       	brne	.-6      	; 0x1d42 <_ZN6StringaSEPKc+0x10>
    1d48:	11 97       	sbiw	r26, 0x01	; 1
    1d4a:	a6 1b       	sub	r26, r22
    1d4c:	b7 0b       	sbc	r27, r23
    1d4e:	ad 01       	movw	r20, r26
    1d50:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6String4copyEPKcj>
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <_ZN6StringaSEPKc+0x28>
	else invalidate();
    1d56:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6String10invalidateEv>
	
	return *this;
}
    1d5a:	81 2f       	mov	r24, r17
    1d5c:	90 2f       	mov	r25, r16
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	ec 01       	movw	r28, r24
    1d6a:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    1d6c:	86 17       	cp	r24, r22
    1d6e:	97 07       	cpc	r25, r23
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	61 15       	cp	r22, r1
    1d78:	71 05       	cpc	r23, r1
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <_ZN6StringaSERKS_+0x22>
    1d7c:	44 81       	ldd	r20, Z+4	; 0x04
    1d7e:	55 81       	ldd	r21, Z+5	; 0x05
    1d80:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6String4copyEPKcj>
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <_ZN6StringaSERKS_+0x26>
	else invalidate();
    1d86:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN6String10invalidateEv>
	
	return *this;
}
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    1d92:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1d94:	11 82       	std	Z+1, r1	; 0x01
    1d96:	10 82       	st	Z, r1
	capacity = 0;
    1d98:	13 82       	std	Z+3, r1	; 0x03
    1d9a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1d9c:	15 82       	std	Z+5, r1	; 0x05
    1d9e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    1da0:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    1da2:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN6StringaSERKS_>
}
    1da6:	08 95       	ret

00001da8 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    1da8:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1daa:	11 82       	std	Z+1, r1	; 0x01
    1dac:	10 82       	st	Z, r1
	capacity = 0;
    1dae:	13 82       	std	Z+3, r1	; 0x03
    1db0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1db2:	15 82       	std	Z+5, r1	; 0x05
    1db4:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    1db6:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    1db8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN6StringaSERKS_>
}
    1dbc:	08 95       	ret

00001dbe <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    1dbe:	fc 01       	movw	r30, r24
{
	free(buffer);
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <free>
}
    1dc8:	08 95       	ret

00001dca <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    1dca:	fc 01       	movw	r30, r24
{
	free(buffer);
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <free>
}
    1dd4:	08 95       	ret

00001dd6 <main>:
#include <Arduino.h>

int main(void)
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
{
	init();
    1dda:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1dde:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1de2:	c0 eb       	ldi	r28, 0xB0	; 176
    1de4:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    1de6:	0e 94 13 0a 	call	0x1426	; 0x1426 <loop>
		if (serialEventRun) serialEventRun();
    1dea:	20 97       	sbiw	r28, 0x00	; 0
    1dec:	e1 f3       	breq	.-8      	; 0x1de6 <main+0x10>
    1dee:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_Z14serialEventRunv>
    1df2:	f9 cf       	rjmp	.-14     	; 0x1de6 <main+0x10>

00001df4 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    1df4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <malloc>
}
    1df8:	08 95       	ret

00001dfa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1dfa:	1f 92       	push	r1
    1dfc:	0f 92       	push	r0
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	0f 92       	push	r0
    1e02:	11 24       	eor	r1, r1
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	8f 93       	push	r24
    1e0a:	9f 93       	push	r25
    1e0c:	af 93       	push	r26
    1e0e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1e10:	80 91 9b 03 	lds	r24, 0x039B
    1e14:	90 91 9c 03 	lds	r25, 0x039C
    1e18:	a0 91 9d 03 	lds	r26, 0x039D
    1e1c:	b0 91 9e 03 	lds	r27, 0x039E
	unsigned char f = timer0_fract;
    1e20:	30 91 9f 03 	lds	r19, 0x039F

	m += MILLIS_INC;
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	a1 1d       	adc	r26, r1
    1e28:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1e2a:	23 2f       	mov	r18, r19
    1e2c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1e2e:	2d 37       	cpi	r18, 0x7D	; 125
    1e30:	20 f0       	brcs	.+8      	; 0x1e3a <__vector_16+0x40>
		f -= FRACT_MAX;
    1e32:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	a1 1d       	adc	r26, r1
    1e38:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1e3a:	20 93 9f 03 	sts	0x039F, r18
	timer0_millis = m;
    1e3e:	80 93 9b 03 	sts	0x039B, r24
    1e42:	90 93 9c 03 	sts	0x039C, r25
    1e46:	a0 93 9d 03 	sts	0x039D, r26
    1e4a:	b0 93 9e 03 	sts	0x039E, r27
	timer0_overflow_count++;
    1e4e:	80 91 97 03 	lds	r24, 0x0397
    1e52:	90 91 98 03 	lds	r25, 0x0398
    1e56:	a0 91 99 03 	lds	r26, 0x0399
    1e5a:	b0 91 9a 03 	lds	r27, 0x039A
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	a1 1d       	adc	r26, r1
    1e62:	b1 1d       	adc	r27, r1
    1e64:	80 93 97 03 	sts	0x0397, r24
    1e68:	90 93 98 03 	sts	0x0398, r25
    1e6c:	a0 93 99 03 	sts	0x0399, r26
    1e70:	b0 93 9a 03 	sts	0x039A, r27
}
    1e74:	bf 91       	pop	r27
    1e76:	af 91       	pop	r26
    1e78:	9f 91       	pop	r25
    1e7a:	8f 91       	pop	r24
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1e8a:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1e8c:	f8 94       	cli
	m = timer0_millis;
    1e8e:	20 91 9b 03 	lds	r18, 0x039B
    1e92:	30 91 9c 03 	lds	r19, 0x039C
    1e96:	40 91 9d 03 	lds	r20, 0x039D
    1e9a:	50 91 9e 03 	lds	r21, 0x039E
	SREG = oldSREG;
    1e9e:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1ea0:	b9 01       	movw	r22, r18
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	08 95       	ret

00001ea6 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1eaa:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1eac:	f8 94       	cli
	m = timer0_overflow_count;
    1eae:	80 91 97 03 	lds	r24, 0x0397
    1eb2:	90 91 98 03 	lds	r25, 0x0398
    1eb6:	a0 91 99 03 	lds	r26, 0x0399
    1eba:	b0 91 9a 03 	lds	r27, 0x039A
#if defined(TCNT0)
	t = TCNT0;
    1ebe:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1ec0:	a8 9b       	sbis	0x15, 0	; 21
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <delay+0x28>
    1ec4:	6f 3f       	cpi	r22, 0xFF	; 255
    1ec6:	19 f0       	breq	.+6      	; 0x1ece <delay+0x28>
		m++;
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1ece:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1ed0:	ba 2f       	mov	r27, r26
    1ed2:	a9 2f       	mov	r26, r25
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	88 27       	eor	r24, r24
    1ed8:	86 0f       	add	r24, r22
    1eda:	91 1d       	adc	r25, r1
    1edc:	a1 1d       	adc	r26, r1
    1ede:	b1 1d       	adc	r27, r1
    1ee0:	62 e0       	ldi	r22, 0x02	; 2
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	aa 1f       	adc	r26, r26
    1ee8:	bb 1f       	adc	r27, r27
    1eea:	6a 95       	dec	r22
    1eec:	d1 f7       	brne	.-12     	; 0x1ee2 <delay+0x3c>
    1eee:	bc 01       	movw	r22, r24
    1ef0:	2d c0       	rjmp	.+90     	; 0x1f4c <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1ef2:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1ef4:	f8 94       	cli
	m = timer0_overflow_count;
    1ef6:	80 91 97 03 	lds	r24, 0x0397
    1efa:	90 91 98 03 	lds	r25, 0x0398
    1efe:	a0 91 99 03 	lds	r26, 0x0399
    1f02:	b0 91 9a 03 	lds	r27, 0x039A
#if defined(TCNT0)
	t = TCNT0;
    1f06:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1f08:	a8 9b       	sbis	0x15, 0	; 21
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <delay+0x70>
    1f0c:	ef 3f       	cpi	r30, 0xFF	; 255
    1f0e:	19 f0       	breq	.+6      	; 0x1f16 <delay+0x70>
		m++;
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	a1 1d       	adc	r26, r1
    1f14:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1f16:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1f18:	ba 2f       	mov	r27, r26
    1f1a:	a9 2f       	mov	r26, r25
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	88 27       	eor	r24, r24
    1f20:	8e 0f       	add	r24, r30
    1f22:	91 1d       	adc	r25, r1
    1f24:	a1 1d       	adc	r26, r1
    1f26:	b1 1d       	adc	r27, r1
    1f28:	e2 e0       	ldi	r30, 0x02	; 2
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	aa 1f       	adc	r26, r26
    1f30:	bb 1f       	adc	r27, r27
    1f32:	ea 95       	dec	r30
    1f34:	d1 f7       	brne	.-12     	; 0x1f2a <delay+0x84>
    1f36:	86 1b       	sub	r24, r22
    1f38:	97 0b       	sbc	r25, r23
    1f3a:	88 5e       	subi	r24, 0xE8	; 232
    1f3c:	93 40       	sbci	r25, 0x03	; 3
    1f3e:	c8 f2       	brcs	.-78     	; 0x1ef2 <delay+0x4c>
			ms--;
    1f40:	21 50       	subi	r18, 0x01	; 1
    1f42:	30 40       	sbci	r19, 0x00	; 0
    1f44:	40 40       	sbci	r20, 0x00	; 0
    1f46:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1f48:	68 51       	subi	r22, 0x18	; 24
    1f4a:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1f4c:	21 15       	cp	r18, r1
    1f4e:	31 05       	cpc	r19, r1
    1f50:	41 05       	cpc	r20, r1
    1f52:	51 05       	cpc	r21, r1
    1f54:	71 f6       	brne	.-100    	; 0x1ef2 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1f56:	08 95       	ret

00001f58 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	39 f0       	breq	.+14     	; 0x1f6a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1f64:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <delayMicroseconds+0xe>
    1f6a:	08 95       	ret

00001f6c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1f6c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1f6e:	84 b5       	in	r24, 0x24	; 36
    1f70:	82 60       	ori	r24, 0x02	; 2
    1f72:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1f74:	84 b5       	in	r24, 0x24	; 36
    1f76:	81 60       	ori	r24, 0x01	; 1
    1f78:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1f7a:	85 b5       	in	r24, 0x25	; 37
    1f7c:	82 60       	ori	r24, 0x02	; 2
    1f7e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1f80:	85 b5       	in	r24, 0x25	; 37
    1f82:	81 60       	ori	r24, 0x01	; 1
    1f84:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1f86:	ee e6       	ldi	r30, 0x6E	; 110
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	81 60       	ori	r24, 0x01	; 1
    1f8e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1f90:	e1 e8       	ldi	r30, 0x81	; 129
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1f96:	80 81       	ld	r24, Z
    1f98:	82 60       	ori	r24, 0x02	; 2
    1f9a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1f9c:	80 81       	ld	r24, Z
    1f9e:	81 60       	ori	r24, 0x01	; 1
    1fa0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1fa2:	e0 e8       	ldi	r30, 0x80	; 128
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	81 60       	ori	r24, 0x01	; 1
    1faa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1fac:	e1 eb       	ldi	r30, 0xB1	; 177
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	84 60       	ori	r24, 0x04	; 4
    1fb4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1fb6:	e0 eb       	ldi	r30, 0xB0	; 176
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	81 60       	ori	r24, 0x01	; 1
    1fbe:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1fc0:	ea e7       	ldi	r30, 0x7A	; 122
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	84 60       	ori	r24, 0x04	; 4
    1fc8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1fca:	80 81       	ld	r24, Z
    1fcc:	82 60       	ori	r24, 0x02	; 2
    1fce:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1fd0:	80 81       	ld	r24, Z
    1fd2:	81 60       	ori	r24, 0x01	; 1
    1fd4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 68       	ori	r24, 0x80	; 128
    1fda:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1fdc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1fe0:	08 95       	ret

00001fe2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	ca 01       	movw	r24, r20
    1fec:	86 5d       	subi	r24, 0xD6	; 214
    1fee:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    1ff4:	4a 5e       	subi	r20, 0xEA	; 234
    1ff6:	5e 4f       	sbci	r21, 0xFE	; 254
    1ff8:	fa 01       	movw	r30, r20
    1ffa:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1ffc:	88 23       	and	r24, r24
    1ffe:	69 f1       	breq	.+90     	; 0x205a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	fc 01       	movw	r30, r24
    2008:	e8 50       	subi	r30, 0x08	; 8
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	a5 91       	lpm	r26, Z+
    200e:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    2010:	fc 01       	movw	r30, r24
    2012:	ee 5f       	subi	r30, 0xFE	; 254
    2014:	fe 4f       	sbci	r31, 0xFE	; 254
    2016:	c5 91       	lpm	r28, Z+
    2018:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    201a:	66 23       	and	r22, r22
    201c:	51 f4       	brne	.+20     	; 0x2032 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    201e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2020:	f8 94       	cli
		*reg &= ~bit;
    2022:	8c 91       	ld	r24, X
    2024:	93 2f       	mov	r25, r19
    2026:	90 95       	com	r25
    2028:	89 23       	and	r24, r25
    202a:	8c 93       	st	X, r24
		*out &= ~bit;
    202c:	88 81       	ld	r24, Y
    202e:	89 23       	and	r24, r25
    2030:	0b c0       	rjmp	.+22     	; 0x2048 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2032:	62 30       	cpi	r22, 0x02	; 2
    2034:	61 f4       	brne	.+24     	; 0x204e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2036:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2038:	f8 94       	cli
		*reg &= ~bit;
    203a:	8c 91       	ld	r24, X
    203c:	93 2f       	mov	r25, r19
    203e:	90 95       	com	r25
    2040:	89 23       	and	r24, r25
    2042:	8c 93       	st	X, r24
		*out |= bit;
    2044:	88 81       	ld	r24, Y
    2046:	83 2b       	or	r24, r19
    2048:	88 83       	st	Y, r24
		SREG = oldSREG;
    204a:	2f bf       	out	0x3f, r18	; 63
    204c:	06 c0       	rjmp	.+12     	; 0x205a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    204e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2050:	f8 94       	cli
		*reg |= bit;
    2052:	8c 91       	ld	r24, X
    2054:	83 2b       	or	r24, r19
    2056:	8c 93       	st	X, r24
		SREG = oldSREG;
    2058:	9f bf       	out	0x3f, r25	; 63
	}
}
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    2060:	48 2f       	mov	r20, r24
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	ca 01       	movw	r24, r20
    2066:	82 5c       	subi	r24, 0xC2	; 194
    2068:	9e 4f       	sbci	r25, 0xFE	; 254
    206a:	fc 01       	movw	r30, r24
    206c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    206e:	ca 01       	movw	r24, r20
    2070:	86 5d       	subi	r24, 0xD6	; 214
    2072:	9e 4f       	sbci	r25, 0xFE	; 254
    2074:	fc 01       	movw	r30, r24
    2076:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    2078:	4a 5e       	subi	r20, 0xEA	; 234
    207a:	5e 4f       	sbci	r21, 0xFE	; 254
    207c:	fa 01       	movw	r30, r20
    207e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2080:	33 23       	and	r19, r19
    2082:	09 f4       	brne	.+2      	; 0x2086 <digitalWrite+0x26>
    2084:	40 c0       	rjmp	.+128    	; 0x2106 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2086:	22 23       	and	r18, r18
    2088:	51 f1       	breq	.+84     	; 0x20de <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    208a:	23 30       	cpi	r18, 0x03	; 3
    208c:	71 f0       	breq	.+28     	; 0x20aa <digitalWrite+0x4a>
    208e:	24 30       	cpi	r18, 0x04	; 4
    2090:	28 f4       	brcc	.+10     	; 0x209c <digitalWrite+0x3c>
    2092:	21 30       	cpi	r18, 0x01	; 1
    2094:	a1 f0       	breq	.+40     	; 0x20be <digitalWrite+0x5e>
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	11 f5       	brne	.+68     	; 0x20de <digitalWrite+0x7e>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <digitalWrite+0x64>
    209c:	26 30       	cpi	r18, 0x06	; 6
    209e:	b1 f0       	breq	.+44     	; 0x20cc <digitalWrite+0x6c>
    20a0:	27 30       	cpi	r18, 0x07	; 7
    20a2:	c1 f0       	breq	.+48     	; 0x20d4 <digitalWrite+0x74>
    20a4:	24 30       	cpi	r18, 0x04	; 4
    20a6:	d9 f4       	brne	.+54     	; 0x20de <digitalWrite+0x7e>
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    20aa:	80 91 80 00 	lds	r24, 0x0080
    20ae:	8f 77       	andi	r24, 0x7F	; 127
    20b0:	03 c0       	rjmp	.+6      	; 0x20b8 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20b2:	80 91 80 00 	lds	r24, 0x0080
    20b6:	8f 7d       	andi	r24, 0xDF	; 223
    20b8:	80 93 80 00 	sts	0x0080, r24
    20bc:	10 c0       	rjmp	.+32     	; 0x20de <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    20be:	84 b5       	in	r24, 0x24	; 36
    20c0:	8f 77       	andi	r24, 0x7F	; 127
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    20c4:	84 b5       	in	r24, 0x24	; 36
    20c6:	8f 7d       	andi	r24, 0xDF	; 223
    20c8:	84 bd       	out	0x24, r24	; 36
    20ca:	09 c0       	rjmp	.+18     	; 0x20de <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    20cc:	80 91 b0 00 	lds	r24, 0x00B0
    20d0:	8f 77       	andi	r24, 0x7F	; 127
    20d2:	03 c0       	rjmp	.+6      	; 0x20da <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    20d4:	80 91 b0 00 	lds	r24, 0x00B0
    20d8:	8f 7d       	andi	r24, 0xDF	; 223
    20da:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    20de:	e3 2f       	mov	r30, r19
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ee 5f       	subi	r30, 0xFE	; 254
    20e8:	fe 4f       	sbci	r31, 0xFE	; 254
    20ea:	a5 91       	lpm	r26, Z+
    20ec:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    20ee:	2f b7       	in	r18, 0x3f	; 63
	cli();
    20f0:	f8 94       	cli

	if (val == LOW) {
    20f2:	66 23       	and	r22, r22
    20f4:	21 f4       	brne	.+8      	; 0x20fe <digitalWrite+0x9e>
		*out &= ~bit;
    20f6:	8c 91       	ld	r24, X
    20f8:	90 95       	com	r25
    20fa:	89 23       	and	r24, r25
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    20fe:	8c 91       	ld	r24, X
    2100:	89 2b       	or	r24, r25
    2102:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2104:	2f bf       	out	0x3f, r18	; 63
    2106:	08 95       	ret

00002108 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    2108:	68 2f       	mov	r22, r24
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	cb 01       	movw	r24, r22
    210e:	82 5c       	subi	r24, 0xC2	; 194
    2110:	9e 4f       	sbci	r25, 0xFE	; 254
    2112:	fc 01       	movw	r30, r24
    2114:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2116:	cb 01       	movw	r24, r22
    2118:	86 5d       	subi	r24, 0xD6	; 214
    211a:	9e 4f       	sbci	r25, 0xFE	; 254
    211c:	fc 01       	movw	r30, r24
    211e:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    2120:	6a 5e       	subi	r22, 0xEA	; 234
    2122:	7e 4f       	sbci	r23, 0xFE	; 254
    2124:	fb 01       	movw	r30, r22
    2126:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    2128:	99 23       	and	r25, r25
    212a:	19 f4       	brne	.+6      	; 0x2132 <digitalRead+0x2a>
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	3c c0       	rjmp	.+120    	; 0x21aa <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2132:	22 23       	and	r18, r18
    2134:	51 f1       	breq	.+84     	; 0x218a <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2136:	23 30       	cpi	r18, 0x03	; 3
    2138:	71 f0       	breq	.+28     	; 0x2156 <digitalRead+0x4e>
    213a:	24 30       	cpi	r18, 0x04	; 4
    213c:	28 f4       	brcc	.+10     	; 0x2148 <digitalRead+0x40>
    213e:	21 30       	cpi	r18, 0x01	; 1
    2140:	a1 f0       	breq	.+40     	; 0x216a <digitalRead+0x62>
    2142:	22 30       	cpi	r18, 0x02	; 2
    2144:	11 f5       	brne	.+68     	; 0x218a <digitalRead+0x82>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <digitalRead+0x68>
    2148:	26 30       	cpi	r18, 0x06	; 6
    214a:	b1 f0       	breq	.+44     	; 0x2178 <digitalRead+0x70>
    214c:	27 30       	cpi	r18, 0x07	; 7
    214e:	c1 f0       	breq	.+48     	; 0x2180 <digitalRead+0x78>
    2150:	24 30       	cpi	r18, 0x04	; 4
    2152:	d9 f4       	brne	.+54     	; 0x218a <digitalRead+0x82>
    2154:	04 c0       	rjmp	.+8      	; 0x215e <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2156:	80 91 80 00 	lds	r24, 0x0080
    215a:	8f 77       	andi	r24, 0x7F	; 127
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    215e:	80 91 80 00 	lds	r24, 0x0080
    2162:	8f 7d       	andi	r24, 0xDF	; 223
    2164:	80 93 80 00 	sts	0x0080, r24
    2168:	10 c0       	rjmp	.+32     	; 0x218a <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    216a:	84 b5       	in	r24, 0x24	; 36
    216c:	8f 77       	andi	r24, 0x7F	; 127
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2170:	84 b5       	in	r24, 0x24	; 36
    2172:	8f 7d       	andi	r24, 0xDF	; 223
    2174:	84 bd       	out	0x24, r24	; 36
    2176:	09 c0       	rjmp	.+18     	; 0x218a <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2178:	80 91 b0 00 	lds	r24, 0x00B0
    217c:	8f 77       	andi	r24, 0x7F	; 127
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2180:	80 91 b0 00 	lds	r24, 0x00B0
    2184:	8f 7d       	andi	r24, 0xDF	; 223
    2186:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    218a:	89 2f       	mov	r24, r25
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	84 5f       	subi	r24, 0xF4	; 244
    2194:	9e 4f       	sbci	r25, 0xFE	; 254
    2196:	fc 01       	movw	r30, r24
    2198:	a5 91       	lpm	r26, Z+
    219a:	b4 91       	lpm	r27, Z+
    219c:	8c 91       	ld	r24, X
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	84 23       	and	r24, r20
    21a4:	11 f0       	breq	.+4      	; 0x21aa <digitalRead+0xa2>
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    21aa:	c9 01       	movw	r24, r18
    21ac:	08 95       	ret

000021ae <__mulsi3>:
    21ae:	62 9f       	mul	r22, r18
    21b0:	d0 01       	movw	r26, r0
    21b2:	73 9f       	mul	r23, r19
    21b4:	f0 01       	movw	r30, r0
    21b6:	82 9f       	mul	r24, r18
    21b8:	e0 0d       	add	r30, r0
    21ba:	f1 1d       	adc	r31, r1
    21bc:	64 9f       	mul	r22, r20
    21be:	e0 0d       	add	r30, r0
    21c0:	f1 1d       	adc	r31, r1
    21c2:	92 9f       	mul	r25, r18
    21c4:	f0 0d       	add	r31, r0
    21c6:	83 9f       	mul	r24, r19
    21c8:	f0 0d       	add	r31, r0
    21ca:	74 9f       	mul	r23, r20
    21cc:	f0 0d       	add	r31, r0
    21ce:	65 9f       	mul	r22, r21
    21d0:	f0 0d       	add	r31, r0
    21d2:	99 27       	eor	r25, r25
    21d4:	72 9f       	mul	r23, r18
    21d6:	b0 0d       	add	r27, r0
    21d8:	e1 1d       	adc	r30, r1
    21da:	f9 1f       	adc	r31, r25
    21dc:	63 9f       	mul	r22, r19
    21de:	b0 0d       	add	r27, r0
    21e0:	e1 1d       	adc	r30, r1
    21e2:	f9 1f       	adc	r31, r25
    21e4:	bd 01       	movw	r22, r26
    21e6:	cf 01       	movw	r24, r30
    21e8:	11 24       	eor	r1, r1
    21ea:	08 95       	ret

000021ec <__divmodhi4>:
    21ec:	97 fb       	bst	r25, 7
    21ee:	09 2e       	mov	r0, r25
    21f0:	07 26       	eor	r0, r23
    21f2:	0a d0       	rcall	.+20     	; 0x2208 <__divmodhi4_neg1>
    21f4:	77 fd       	sbrc	r23, 7
    21f6:	04 d0       	rcall	.+8      	; 0x2200 <__divmodhi4_neg2>
    21f8:	2e d0       	rcall	.+92     	; 0x2256 <__udivmodhi4>
    21fa:	06 d0       	rcall	.+12     	; 0x2208 <__divmodhi4_neg1>
    21fc:	00 20       	and	r0, r0
    21fe:	1a f4       	brpl	.+6      	; 0x2206 <__divmodhi4_exit>

00002200 <__divmodhi4_neg2>:
    2200:	70 95       	com	r23
    2202:	61 95       	neg	r22
    2204:	7f 4f       	sbci	r23, 0xFF	; 255

00002206 <__divmodhi4_exit>:
    2206:	08 95       	ret

00002208 <__divmodhi4_neg1>:
    2208:	f6 f7       	brtc	.-4      	; 0x2206 <__divmodhi4_exit>
    220a:	90 95       	com	r25
    220c:	81 95       	neg	r24
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	08 95       	ret

00002212 <__udivmodsi4>:
    2212:	a1 e2       	ldi	r26, 0x21	; 33
    2214:	1a 2e       	mov	r1, r26
    2216:	aa 1b       	sub	r26, r26
    2218:	bb 1b       	sub	r27, r27
    221a:	fd 01       	movw	r30, r26
    221c:	0d c0       	rjmp	.+26     	; 0x2238 <__udivmodsi4_ep>

0000221e <__udivmodsi4_loop>:
    221e:	aa 1f       	adc	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	ee 1f       	adc	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	a2 17       	cp	r26, r18
    2228:	b3 07       	cpc	r27, r19
    222a:	e4 07       	cpc	r30, r20
    222c:	f5 07       	cpc	r31, r21
    222e:	20 f0       	brcs	.+8      	; 0x2238 <__udivmodsi4_ep>
    2230:	a2 1b       	sub	r26, r18
    2232:	b3 0b       	sbc	r27, r19
    2234:	e4 0b       	sbc	r30, r20
    2236:	f5 0b       	sbc	r31, r21

00002238 <__udivmodsi4_ep>:
    2238:	66 1f       	adc	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	1a 94       	dec	r1
    2242:	69 f7       	brne	.-38     	; 0x221e <__udivmodsi4_loop>
    2244:	60 95       	com	r22
    2246:	70 95       	com	r23
    2248:	80 95       	com	r24
    224a:	90 95       	com	r25
    224c:	9b 01       	movw	r18, r22
    224e:	ac 01       	movw	r20, r24
    2250:	bd 01       	movw	r22, r26
    2252:	cf 01       	movw	r24, r30
    2254:	08 95       	ret

00002256 <__udivmodhi4>:
    2256:	aa 1b       	sub	r26, r26
    2258:	bb 1b       	sub	r27, r27
    225a:	51 e1       	ldi	r21, 0x11	; 17
    225c:	07 c0       	rjmp	.+14     	; 0x226c <__udivmodhi4_ep>

0000225e <__udivmodhi4_loop>:
    225e:	aa 1f       	adc	r26, r26
    2260:	bb 1f       	adc	r27, r27
    2262:	a6 17       	cp	r26, r22
    2264:	b7 07       	cpc	r27, r23
    2266:	10 f0       	brcs	.+4      	; 0x226c <__udivmodhi4_ep>
    2268:	a6 1b       	sub	r26, r22
    226a:	b7 0b       	sbc	r27, r23

0000226c <__udivmodhi4_ep>:
    226c:	88 1f       	adc	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	5a 95       	dec	r21
    2272:	a9 f7       	brne	.-22     	; 0x225e <__udivmodhi4_loop>
    2274:	80 95       	com	r24
    2276:	90 95       	com	r25
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	08 95       	ret

0000227e <__tablejump2__>:
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31

00002282 <__tablejump__>:
    2282:	05 90       	lpm	r0, Z+
    2284:	f4 91       	lpm	r31, Z+
    2286:	e0 2d       	mov	r30, r0
    2288:	09 94       	ijmp

0000228a <__prologue_saves__>:
    228a:	2f 92       	push	r2
    228c:	3f 92       	push	r3
    228e:	4f 92       	push	r4
    2290:	5f 92       	push	r5
    2292:	6f 92       	push	r6
    2294:	7f 92       	push	r7
    2296:	8f 92       	push	r8
    2298:	9f 92       	push	r9
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	ca 1b       	sub	r28, r26
    22b4:	db 0b       	sbc	r29, r27
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	09 94       	ijmp

000022c2 <__epilogue_restores__>:
    22c2:	2a 88       	ldd	r2, Y+18	; 0x12
    22c4:	39 88       	ldd	r3, Y+17	; 0x11
    22c6:	48 88       	ldd	r4, Y+16	; 0x10
    22c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    22cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    22d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22d4:	b9 84       	ldd	r11, Y+9	; 0x09
    22d6:	c8 84       	ldd	r12, Y+8	; 0x08
    22d8:	df 80       	ldd	r13, Y+7	; 0x07
    22da:	ee 80       	ldd	r14, Y+6	; 0x06
    22dc:	fd 80       	ldd	r15, Y+5	; 0x05
    22de:	0c 81       	ldd	r16, Y+4	; 0x04
    22e0:	1b 81       	ldd	r17, Y+3	; 0x03
    22e2:	aa 81       	ldd	r26, Y+2	; 0x02
    22e4:	b9 81       	ldd	r27, Y+1	; 0x01
    22e6:	ce 0f       	add	r28, r30
    22e8:	d1 1d       	adc	r29, r1
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	ed 01       	movw	r28, r26
    22f6:	08 95       	ret

000022f8 <_exit>:
    22f8:	f8 94       	cli

000022fa <__stop_program>:
    22fa:	ff cf       	rjmp	.-2      	; 0x22fa <__stop_program>
