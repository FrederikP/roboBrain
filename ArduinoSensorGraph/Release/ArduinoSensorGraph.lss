
ArduinoSensorGraph.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00001c96  00001d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ee  0080019e  0080019e  00001dc8  2**0
                  ALLOC
  3 .debug_aranges 000007e8  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001535  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a0f1  00000000  00000000  00003ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001cd8  00000000  00000000  0000dbd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000045c1  00000000  00000000  0000f8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e50  00000000  00000000  00013e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000251f  00000000  00000000  00014cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004e06  00000000  00000000  000171df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000818  00000000  00000000  0001bfe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    SREG = oldSREG;
    return true;
  }

  return false;
}
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
#include "URMSerial.h"
#include <HardwareSerial.h>

URMSerial::URMSerial(void)
{
}
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
	errorFunc = 0;
	init();
}
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_3>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_4>
}

void operator delete(void * ptr)
{
  free(ptr);
} 
      14:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_5>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_18>
      4c:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_19>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000068 <_ZL5table>:
      68:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
      78:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
      88:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
      98:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
      a8:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
      b8:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
      c8:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
      d8:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
      e8:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

000000f8 <port_to_mode_PGM>:
      f8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000102 <port_to_output_PGM>:
     102:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000010c <port_to_input_PGM>:
     10c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000116 <digital_pin_to_port_PGM>:
     116:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     126:	03 03 03 03                                         ....

0000012a <digital_pin_to_bit_mask_PGM>:
     12a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     13a:	04 08 10 20                                         ... 

0000013e <digital_pin_to_timer_PGM>:
     13e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     14e:	00 00 00 00                                         ....

00000152 <__ctors_start>:
     152:	74 08       	sbc	r7, r4
     154:	9e 0a       	sbc	r9, r30

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e6 e9       	ldi	r30, 0x96	; 150
     16a:	fc e1       	ldi	r31, 0x1C	; 28
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	ae 39       	cpi	r26, 0x9E	; 158
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	13 e0       	ldi	r17, 0x03	; 3
     17a:	ae e9       	ldi	r26, 0x9E	; 158
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ac 38       	cpi	r26, 0x8C	; 140
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	c6 e5       	ldi	r28, 0x56	; 86
     18c:	d1 e0       	ldi	r29, 0x01	; 1
     18e:	04 c0       	rjmp	.+8      	; 0x198 <.do_global_ctors_start>

00000190 <.do_global_ctors_loop>:
     190:	22 97       	sbiw	r28, 0x02	; 2
     192:	fe 01       	movw	r30, r28
     194:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__tablejump__>

00000198 <.do_global_ctors_start>:
     198:	c2 35       	cpi	r28, 0x52	; 82
     19a:	d1 07       	cpc	r29, r17
     19c:	c9 f7       	brne	.-14     	; 0x190 <.do_global_ctors_loop>
     19e:	0e 94 42 0c 	call	0x1884	; 0x1884 <main>
     1a2:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <malloc>:
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	bc 01       	movw	r22, r24
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	91 05       	cpc	r25, r1
     1b4:	10 f4       	brcc	.+4      	; 0x1ba <malloc+0x10>
     1b6:	62 e0       	ldi	r22, 0x02	; 2
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	a0 91 8a 03 	lds	r26, 0x038A
     1be:	b0 91 8b 03 	lds	r27, 0x038B
     1c2:	ed 01       	movw	r28, r26
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	21 c0       	rjmp	.+66     	; 0x210 <malloc+0x66>
     1ce:	88 81       	ld	r24, Y
     1d0:	99 81       	ldd	r25, Y+1	; 0x01
     1d2:	86 17       	cp	r24, r22
     1d4:	97 07       	cpc	r25, r23
     1d6:	69 f4       	brne	.+26     	; 0x1f2 <malloc+0x48>
     1d8:	8a 81       	ldd	r24, Y+2	; 0x02
     1da:	9b 81       	ldd	r25, Y+3	; 0x03
     1dc:	30 97       	sbiw	r30, 0x00	; 0
     1de:	19 f0       	breq	.+6      	; 0x1e6 <malloc+0x3c>
     1e0:	93 83       	std	Z+3, r25	; 0x03
     1e2:	82 83       	std	Z+2, r24	; 0x02
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <malloc+0x44>
     1e6:	90 93 8b 03 	sts	0x038B, r25
     1ea:	80 93 8a 03 	sts	0x038A, r24
     1ee:	fe 01       	movw	r30, r28
     1f0:	34 c0       	rjmp	.+104    	; 0x25a <malloc+0xb0>
     1f2:	68 17       	cp	r22, r24
     1f4:	79 07       	cpc	r23, r25
     1f6:	38 f4       	brcc	.+14     	; 0x206 <malloc+0x5c>
     1f8:	41 15       	cp	r20, r1
     1fa:	51 05       	cpc	r21, r1
     1fc:	19 f0       	breq	.+6      	; 0x204 <malloc+0x5a>
     1fe:	84 17       	cp	r24, r20
     200:	95 07       	cpc	r25, r21
     202:	08 f4       	brcc	.+2      	; 0x206 <malloc+0x5c>
     204:	ac 01       	movw	r20, r24
     206:	fe 01       	movw	r30, r28
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	9c 01       	movw	r18, r24
     20e:	e9 01       	movw	r28, r18
     210:	20 97       	sbiw	r28, 0x00	; 0
     212:	e9 f6       	brne	.-70     	; 0x1ce <malloc+0x24>
     214:	41 15       	cp	r20, r1
     216:	51 05       	cpc	r21, r1
     218:	a9 f1       	breq	.+106    	; 0x284 <malloc+0xda>
     21a:	ca 01       	movw	r24, r20
     21c:	86 1b       	sub	r24, r22
     21e:	97 0b       	sbc	r25, r23
     220:	04 97       	sbiw	r24, 0x04	; 4
     222:	08 f4       	brcc	.+2      	; 0x226 <malloc+0x7c>
     224:	ba 01       	movw	r22, r20
     226:	e0 e0       	ldi	r30, 0x00	; 0
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	2a c0       	rjmp	.+84     	; 0x280 <malloc+0xd6>
     22c:	8d 91       	ld	r24, X+
     22e:	9c 91       	ld	r25, X
     230:	11 97       	sbiw	r26, 0x01	; 1
     232:	84 17       	cp	r24, r20
     234:	95 07       	cpc	r25, r21
     236:	f9 f4       	brne	.+62     	; 0x276 <malloc+0xcc>
     238:	64 17       	cp	r22, r20
     23a:	75 07       	cpc	r23, r21
     23c:	81 f4       	brne	.+32     	; 0x25e <malloc+0xb4>
     23e:	12 96       	adiw	r26, 0x02	; 2
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	13 97       	sbiw	r26, 0x03	; 3
     246:	30 97       	sbiw	r30, 0x00	; 0
     248:	19 f0       	breq	.+6      	; 0x250 <malloc+0xa6>
     24a:	93 83       	std	Z+3, r25	; 0x03
     24c:	82 83       	std	Z+2, r24	; 0x02
     24e:	04 c0       	rjmp	.+8      	; 0x258 <malloc+0xae>
     250:	90 93 8b 03 	sts	0x038B, r25
     254:	80 93 8a 03 	sts	0x038A, r24
     258:	fd 01       	movw	r30, r26
     25a:	32 96       	adiw	r30, 0x02	; 2
     25c:	4c c0       	rjmp	.+152    	; 0x2f6 <malloc+0x14c>
     25e:	ca 01       	movw	r24, r20
     260:	86 1b       	sub	r24, r22
     262:	97 0b       	sbc	r25, r23
     264:	fd 01       	movw	r30, r26
     266:	e8 0f       	add	r30, r24
     268:	f9 1f       	adc	r31, r25
     26a:	61 93       	st	Z+, r22
     26c:	71 93       	st	Z+, r23
     26e:	02 97       	sbiw	r24, 0x02	; 2
     270:	8d 93       	st	X+, r24
     272:	9c 93       	st	X, r25
     274:	40 c0       	rjmp	.+128    	; 0x2f6 <malloc+0x14c>
     276:	fd 01       	movw	r30, r26
     278:	82 81       	ldd	r24, Z+2	; 0x02
     27a:	93 81       	ldd	r25, Z+3	; 0x03
     27c:	9c 01       	movw	r18, r24
     27e:	d9 01       	movw	r26, r18
     280:	10 97       	sbiw	r26, 0x00	; 0
     282:	a1 f6       	brne	.-88     	; 0x22c <malloc+0x82>
     284:	80 91 88 03 	lds	r24, 0x0388
     288:	90 91 89 03 	lds	r25, 0x0389
     28c:	89 2b       	or	r24, r25
     28e:	41 f4       	brne	.+16     	; 0x2a0 <malloc+0xf6>
     290:	80 91 65 01 	lds	r24, 0x0165
     294:	90 91 66 01 	lds	r25, 0x0166
     298:	90 93 89 03 	sts	0x0389, r25
     29c:	80 93 88 03 	sts	0x0388, r24
     2a0:	40 91 67 01 	lds	r20, 0x0167
     2a4:	50 91 68 01 	lds	r21, 0x0168
     2a8:	41 15       	cp	r20, r1
     2aa:	51 05       	cpc	r21, r1
     2ac:	41 f4       	brne	.+16     	; 0x2be <malloc+0x114>
     2ae:	4d b7       	in	r20, 0x3d	; 61
     2b0:	5e b7       	in	r21, 0x3e	; 62
     2b2:	80 91 63 01 	lds	r24, 0x0163
     2b6:	90 91 64 01 	lds	r25, 0x0164
     2ba:	48 1b       	sub	r20, r24
     2bc:	59 0b       	sbc	r21, r25
     2be:	20 91 88 03 	lds	r18, 0x0388
     2c2:	30 91 89 03 	lds	r19, 0x0389
     2c6:	ca 01       	movw	r24, r20
     2c8:	82 1b       	sub	r24, r18
     2ca:	93 0b       	sbc	r25, r19
     2cc:	86 17       	cp	r24, r22
     2ce:	97 07       	cpc	r25, r23
     2d0:	80 f0       	brcs	.+32     	; 0x2f2 <malloc+0x148>
     2d2:	ab 01       	movw	r20, r22
     2d4:	4e 5f       	subi	r20, 0xFE	; 254
     2d6:	5f 4f       	sbci	r21, 0xFF	; 255
     2d8:	84 17       	cp	r24, r20
     2da:	95 07       	cpc	r25, r21
     2dc:	50 f0       	brcs	.+20     	; 0x2f2 <malloc+0x148>
     2de:	42 0f       	add	r20, r18
     2e0:	53 1f       	adc	r21, r19
     2e2:	50 93 89 03 	sts	0x0389, r21
     2e6:	40 93 88 03 	sts	0x0388, r20
     2ea:	f9 01       	movw	r30, r18
     2ec:	61 93       	st	Z+, r22
     2ee:	71 93       	st	Z+, r23
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <malloc+0x14c>
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	cf 01       	movw	r24, r30
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <free>:
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	09 f4       	brne	.+2      	; 0x308 <free+0xa>
     306:	50 c0       	rjmp	.+160    	; 0x3a8 <free+0xaa>
     308:	ec 01       	movw	r28, r24
     30a:	22 97       	sbiw	r28, 0x02	; 2
     30c:	1b 82       	std	Y+3, r1	; 0x03
     30e:	1a 82       	std	Y+2, r1	; 0x02
     310:	a0 91 8a 03 	lds	r26, 0x038A
     314:	b0 91 8b 03 	lds	r27, 0x038B
     318:	10 97       	sbiw	r26, 0x00	; 0
     31a:	09 f1       	breq	.+66     	; 0x35e <free+0x60>
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	ac 17       	cp	r26, r28
     322:	bd 07       	cpc	r27, r29
     324:	08 f1       	brcs	.+66     	; 0x368 <free+0x6a>
     326:	bb 83       	std	Y+3, r27	; 0x03
     328:	aa 83       	std	Y+2, r26	; 0x02
     32a:	fe 01       	movw	r30, r28
     32c:	21 91       	ld	r18, Z+
     32e:	31 91       	ld	r19, Z+
     330:	e2 0f       	add	r30, r18
     332:	f3 1f       	adc	r31, r19
     334:	ae 17       	cp	r26, r30
     336:	bf 07       	cpc	r27, r31
     338:	79 f4       	brne	.+30     	; 0x358 <free+0x5a>
     33a:	8d 91       	ld	r24, X+
     33c:	9c 91       	ld	r25, X
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	28 0f       	add	r18, r24
     342:	39 1f       	adc	r19, r25
     344:	2e 5f       	subi	r18, 0xFE	; 254
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	39 83       	std	Y+1, r19	; 0x01
     34a:	28 83       	st	Y, r18
     34c:	12 96       	adiw	r26, 0x02	; 2
     34e:	8d 91       	ld	r24, X+
     350:	9c 91       	ld	r25, X
     352:	13 97       	sbiw	r26, 0x03	; 3
     354:	9b 83       	std	Y+3, r25	; 0x03
     356:	8a 83       	std	Y+2, r24	; 0x02
     358:	41 15       	cp	r20, r1
     35a:	51 05       	cpc	r21, r1
     35c:	71 f4       	brne	.+28     	; 0x37a <free+0x7c>
     35e:	d0 93 8b 03 	sts	0x038B, r29
     362:	c0 93 8a 03 	sts	0x038A, r28
     366:	20 c0       	rjmp	.+64     	; 0x3a8 <free+0xaa>
     368:	12 96       	adiw	r26, 0x02	; 2
     36a:	8d 91       	ld	r24, X+
     36c:	9c 91       	ld	r25, X
     36e:	13 97       	sbiw	r26, 0x03	; 3
     370:	ad 01       	movw	r20, r26
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	11 f0       	breq	.+4      	; 0x37a <free+0x7c>
     376:	dc 01       	movw	r26, r24
     378:	d3 cf       	rjmp	.-90     	; 0x320 <free+0x22>
     37a:	fa 01       	movw	r30, r20
     37c:	d3 83       	std	Z+3, r29	; 0x03
     37e:	c2 83       	std	Z+2, r28	; 0x02
     380:	21 91       	ld	r18, Z+
     382:	31 91       	ld	r19, Z+
     384:	e2 0f       	add	r30, r18
     386:	f3 1f       	adc	r31, r19
     388:	ce 17       	cp	r28, r30
     38a:	df 07       	cpc	r29, r31
     38c:	69 f4       	brne	.+26     	; 0x3a8 <free+0xaa>
     38e:	88 81       	ld	r24, Y
     390:	99 81       	ldd	r25, Y+1	; 0x01
     392:	28 0f       	add	r18, r24
     394:	39 1f       	adc	r19, r25
     396:	2e 5f       	subi	r18, 0xFE	; 254
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	fa 01       	movw	r30, r20
     39c:	31 83       	std	Z+1, r19	; 0x01
     39e:	20 83       	st	Z, r18
     3a0:	8a 81       	ldd	r24, Y+2	; 0x02
     3a2:	9b 81       	ldd	r25, Y+3	; 0x03
     3a4:	93 83       	std	Z+3, r25	; 0x03
     3a6:	82 83       	std	Z+2, r24	; 0x02
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	fc 01       	movw	r30, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     3b8:	73 8d       	ldd	r23, Z+27	; 0x1b
     3ba:	76 95       	lsr	r23
     3bc:	71 70       	andi	r23, 0x01	; 1
     3be:	a6 85       	ldd	r26, Z+14	; 0x0e
     3c0:	b7 85       	ldd	r27, Z+15	; 0x0f
     3c2:	95 85       	ldd	r25, Z+13	; 0x0d
     3c4:	77 23       	and	r23, r23
     3c6:	29 f0       	breq	.+10     	; 0x3d2 <_ZN14SoftwareSerial4recvEv+0x24>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     3c8:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     3ca:	89 23       	and	r24, r25
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <_ZN14SoftwareSerial4recvEv+0x22>
     3ce:	54 c0       	rjmp	.+168    	; 0x478 <_ZN14SoftwareSerial4recvEv+0xca>
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <_ZN14SoftwareSerial4recvEv+0x2c>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     3d2:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     3d4:	89 23       	and	r24, r25
     3d6:	09 f0       	breq	.+2      	; 0x3da <_ZN14SoftwareSerial4recvEv+0x2c>
     3d8:	4f c0       	rjmp	.+158    	; 0x478 <_ZN14SoftwareSerial4recvEv+0xca>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     3da:	83 89       	ldd	r24, Z+19	; 0x13
     3dc:	94 89       	ldd	r25, Z+20	; 0x14
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	2f ef       	ldi	r18, 0xFF	; 255
     3e4:	8f 3f       	cpi	r24, 0xFF	; 255
     3e6:	92 07       	cpc	r25, r18
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <_ZN14SoftwareSerial4recvEv+0x32>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
     3ea:	c5 89       	ldd	r28, Z+21	; 0x15
     3ec:	d6 89       	ldd	r29, Z+22	; 0x16
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     3ee:	a6 85       	ldd	r26, Z+14	; 0x0e
     3f0:	b7 85       	ldd	r27, Z+15	; 0x0f
     3f2:	15 85       	ldd	r17, Z+13	; 0x0d
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	31 e0       	ldi	r19, 0x01	; 1
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     3fc:	00 e0       	ldi	r16, 0x00	; 0
     3fe:	ce 01       	movw	r24, r28
     400:	20 2f       	mov	r18, r16
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	8f 3f       	cpi	r24, 0xFF	; 255
     408:	92 07       	cpc	r25, r18
     40a:	d9 f7       	brne	.-10     	; 0x402 <_ZN14SoftwareSerial4recvEv+0x54>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     40c:	8c 91       	ld	r24, X
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     40e:	81 23       	and	r24, r17
     410:	11 f0       	breq	.+4      	; 0x416 <_ZN14SoftwareSerial4recvEv+0x68>
        d |= i;
     412:	63 2b       	or	r22, r19
     414:	03 c0       	rjmp	.+6      	; 0x41c <_ZN14SoftwareSerial4recvEv+0x6e>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     416:	83 2f       	mov	r24, r19
     418:	80 95       	com	r24
     41a:	68 23       	and	r22, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     41c:	33 0f       	add	r19, r19
     41e:	4f 5f       	subi	r20, 0xFF	; 255
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	48 30       	cpi	r20, 0x08	; 8
     424:	51 05       	cpc	r21, r1
     426:	59 f7       	brne	.-42     	; 0x3fe <_ZN14SoftwareSerial4recvEv+0x50>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     428:	87 89       	ldd	r24, Z+23	; 0x17
     42a:	90 8d       	ldd	r25, Z+24	; 0x18
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	2f ef       	ldi	r18, 0xFF	; 255
     432:	8f 3f       	cpi	r24, 0xFF	; 255
     434:	92 07       	cpc	r25, r18
     436:	d9 f7       	brne	.-10     	; 0x42e <_ZN14SoftwareSerial4recvEv+0x80>

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     438:	71 11       	cpse	r23, r1
      d = ~d;
     43a:	60 95       	com	r22

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     43c:	80 91 e0 01 	lds	r24, 0x01E0
     440:	20 91 e1 01 	lds	r18, 0x01E1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	8f 73       	andi	r24, 0x3F	; 63
     44a:	90 70       	andi	r25, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	82 17       	cp	r24, r18
     450:	93 07       	cpc	r25, r19
     452:	79 f0       	breq	.+30     	; 0x472 <_ZN14SoftwareSerial4recvEv+0xc4>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     454:	e0 91 e0 01 	lds	r30, 0x01E0
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	e0 56       	subi	r30, 0x60	; 96
     45c:	fe 4f       	sbci	r31, 0xFE	; 254
     45e:	60 83       	st	Z, r22
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     460:	80 91 e0 01 	lds	r24, 0x01E0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	8f 73       	andi	r24, 0x3F	; 63
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	80 93 e0 01 	sts	0x01E0, r24
     470:	03 c0       	rjmp	.+6      	; 0x478 <_ZN14SoftwareSerial4recvEv+0xca>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     472:	83 8d       	ldd	r24, Z+27	; 0x1b
     474:	81 60       	ori	r24, 0x01	; 1
     476:	83 8f       	std	Z+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <__vector_3>:
    active_object->recv();
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     4a4:	80 91 9e 01 	lds	r24, 0x019E
     4a8:	90 91 9f 01 	lds	r25, 0x019F
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <__vector_3+0x32>
  {
    active_object->recv();
     4b0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	bf 91       	pop	r27
     4ba:	af 91       	pop	r26
     4bc:	9f 91       	pop	r25
     4be:	8f 91       	pop	r24
     4c0:	7f 91       	pop	r23
     4c2:	6f 91       	pop	r22
     4c4:	5f 91       	pop	r21
     4c6:	4f 91       	pop	r20
     4c8:	3f 91       	pop	r19
     4ca:	2f 91       	pop	r18
     4cc:	0f 90       	pop	r0
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     4f8:	80 91 9e 01 	lds	r24, 0x019E
     4fc:	90 91 9f 01 	lds	r25, 0x019F
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	11 f0       	breq	.+4      	; 0x508 <__vector_4+0x32>
  {
    active_object->recv();
     504:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
  SoftwareSerial::handle_interrupt();
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	bf 91       	pop	r27
     50e:	af 91       	pop	r26
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	7f 91       	pop	r23
     516:	6f 91       	pop	r22
     518:	5f 91       	pop	r21
     51a:	4f 91       	pop	r20
     51c:	3f 91       	pop	r19
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	2f 93       	push	r18
     536:	3f 93       	push	r19
     538:	4f 93       	push	r20
     53a:	5f 93       	push	r21
     53c:	6f 93       	push	r22
     53e:	7f 93       	push	r23
     540:	8f 93       	push	r24
     542:	9f 93       	push	r25
     544:	af 93       	push	r26
     546:	bf 93       	push	r27
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     54c:	80 91 9e 01 	lds	r24, 0x019E
     550:	90 91 9f 01 	lds	r25, 0x019F
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	11 f0       	breq	.+4      	; 0x55c <__vector_5+0x32>
  {
    active_object->recv();
     558:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
  SoftwareSerial::handle_interrupt();
}
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <_ZN14SoftwareSerial5beginEl>:

//
// Public methods
//

void SoftwareSerial::begin(long speed)
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	7a 01       	movw	r14, r20
     592:	8b 01       	movw	r16, r22
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     594:	1a 8e       	std	Y+26, r1	; 0x1a
     596:	19 8e       	std	Y+25, r1	; 0x19
     598:	18 8e       	std	Y+24, r1	; 0x18
     59a:	1f 8a       	std	Y+23, r1	; 0x17
     59c:	1e 8a       	std	Y+22, r1	; 0x16
     59e:	1d 8a       	std	Y+21, r1	; 0x15
     5a0:	1c 8a       	std	Y+20, r1	; 0x14
     5a2:	1b 8a       	std	Y+19, r1	; 0x13
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  {
    long baud = pgm_read_dword(&table[i].baud);
     5a8:	69 01       	movw	r12, r18
     5aa:	cc 0c       	add	r12, r12
     5ac:	dd 1c       	adc	r13, r13
     5ae:	c2 0e       	add	r12, r18
     5b0:	d3 1e       	adc	r13, r19
     5b2:	b6 01       	movw	r22, r12
     5b4:	66 0f       	add	r22, r22
     5b6:	77 1f       	adc	r23, r23
     5b8:	66 0f       	add	r22, r22
     5ba:	77 1f       	adc	r23, r23
     5bc:	ab 01       	movw	r20, r22
     5be:	48 59       	subi	r20, 0x98	; 152
     5c0:	5f 4f       	sbci	r21, 0xFF	; 255
     5c2:	fa 01       	movw	r30, r20
     5c4:	85 91       	lpm	r24, Z+
     5c6:	95 91       	lpm	r25, Z+
     5c8:	a5 91       	lpm	r26, Z+
     5ca:	b4 91       	lpm	r27, Z+
    if (baud == speed)
     5cc:	8e 15       	cp	r24, r14
     5ce:	9f 05       	cpc	r25, r15
     5d0:	a0 07       	cpc	r26, r16
     5d2:	b1 07       	cpc	r27, r17
     5d4:	e9 f4       	brne	.+58     	; 0x610 <_ZN14SoftwareSerial5beginEl+0x92>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     5d6:	fb 01       	movw	r30, r22
     5d8:	e4 59       	subi	r30, 0x94	; 148
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	85 91       	lpm	r24, Z+
     5de:	94 91       	lpm	r25, Z+
     5e0:	9c 8b       	std	Y+20, r25	; 0x14
     5e2:	8b 8b       	std	Y+19, r24	; 0x13
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     5e4:	fb 01       	movw	r30, r22
     5e6:	e2 59       	subi	r30, 0x92	; 146
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	85 91       	lpm	r24, Z+
     5ec:	94 91       	lpm	r25, Z+
     5ee:	9e 8b       	std	Y+22, r25	; 0x16
     5f0:	8d 8b       	std	Y+21, r24	; 0x15
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     5f2:	fb 01       	movw	r30, r22
     5f4:	e0 59       	subi	r30, 0x90	; 144
     5f6:	ff 4f       	sbci	r31, 0xFF	; 255
     5f8:	85 91       	lpm	r24, Z+
     5fa:	94 91       	lpm	r25, Z+
     5fc:	98 8f       	std	Y+24, r25	; 0x18
     5fe:	8f 8b       	std	Y+23, r24	; 0x17
      _tx_delay = pgm_read_word(&table[i].tx_delay);
     600:	fb 01       	movw	r30, r22
     602:	ee 58       	subi	r30, 0x8E	; 142
     604:	ff 4f       	sbci	r31, 0xFF	; 255
     606:	85 91       	lpm	r24, Z+
     608:	94 91       	lpm	r25, Z+
     60a:	9a 8f       	std	Y+26, r25	; 0x1a
     60c:	89 8f       	std	Y+25, r24	; 0x19
     60e:	06 c0       	rjmp	.+12     	; 0x61c <_ZN14SoftwareSerial5beginEl+0x9e>

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	2c 30       	cpi	r18, 0x0C	; 12
     616:	31 05       	cpc	r19, r1
     618:	09 f0       	breq	.+2      	; 0x61c <_ZN14SoftwareSerial5beginEl+0x9e>
     61a:	c6 cf       	rjmp	.-116    	; 0x5a8 <_ZN14SoftwareSerial5beginEl+0x2a>
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
     61c:	8f 89       	ldd	r24, Y+23	; 0x17
     61e:	98 8d       	ldd	r25, Y+24	; 0x18
     620:	89 2b       	or	r24, r25
     622:	09 f4       	brne	.+2      	; 0x626 <_ZN14SoftwareSerial5beginEl+0xa8>
     624:	49 c0       	rjmp	.+146    	; 0x6b8 <_ZN14SoftwareSerial5beginEl+0x13a>
  {
    if (digitalPinToPCICR(_receivePin))
     626:	4c 85       	ldd	r20, Y+12	; 0x0c
     628:	46 31       	cpi	r20, 0x16	; 22
     62a:	08 f0       	brcs	.+2      	; 0x62e <_ZN14SoftwareSerial5beginEl+0xb0>
     62c:	3d c0       	rjmp	.+122    	; 0x6a8 <_ZN14SoftwareSerial5beginEl+0x12a>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     62e:	90 91 68 00 	lds	r25, 0x0068
     632:	48 30       	cpi	r20, 0x08	; 8
     634:	10 f4       	brcc	.+4      	; 0x63a <_ZN14SoftwareSerial5beginEl+0xbc>
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	05 c0       	rjmp	.+10     	; 0x644 <_ZN14SoftwareSerial5beginEl+0xc6>
     63a:	4e 30       	cpi	r20, 0x0E	; 14
     63c:	10 f0       	brcs	.+4      	; 0x642 <_ZN14SoftwareSerial5beginEl+0xc4>
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	01 c0       	rjmp	.+2      	; 0x644 <_ZN14SoftwareSerial5beginEl+0xc6>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	89 2b       	or	r24, r25
     646:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     64a:	48 30       	cpi	r20, 0x08	; 8
     64c:	28 f4       	brcc	.+10     	; 0x658 <_ZN14SoftwareSerial5beginEl+0xda>
     64e:	ed e6       	ldi	r30, 0x6D	; 109
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ad e6       	ldi	r26, 0x6D	; 109
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	0b c0       	rjmp	.+22     	; 0x66e <_ZN14SoftwareSerial5beginEl+0xf0>
     658:	4e 30       	cpi	r20, 0x0E	; 14
     65a:	28 f0       	brcs	.+10     	; 0x666 <_ZN14SoftwareSerial5beginEl+0xe8>
     65c:	ec e6       	ldi	r30, 0x6C	; 108
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	ac e6       	ldi	r26, 0x6C	; 108
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	04 c0       	rjmp	.+8      	; 0x66e <_ZN14SoftwareSerial5beginEl+0xf0>
     666:	eb e6       	ldi	r30, 0x6B	; 107
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	ab e6       	ldi	r26, 0x6B	; 107
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	50 81       	ld	r21, Z
     670:	48 30       	cpi	r20, 0x08	; 8
     672:	40 f4       	brcc	.+16     	; 0x684 <_ZN14SoftwareSerial5beginEl+0x106>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN14SoftwareSerial5beginEl+0x100>
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	4a 95       	dec	r20
     680:	e2 f7       	brpl	.-8      	; 0x67a <_ZN14SoftwareSerial5beginEl+0xfc>
     682:	10 c0       	rjmp	.+32     	; 0x6a4 <_ZN14SoftwareSerial5beginEl+0x126>
     684:	24 2f       	mov	r18, r20
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	4e 30       	cpi	r20, 0x0E	; 14
     68a:	18 f4       	brcc	.+6      	; 0x692 <_ZN14SoftwareSerial5beginEl+0x114>
     68c:	28 50       	subi	r18, 0x08	; 8
     68e:	30 40       	sbci	r19, 0x00	; 0
     690:	02 c0       	rjmp	.+4      	; 0x696 <_ZN14SoftwareSerial5beginEl+0x118>
     692:	2e 50       	subi	r18, 0x0E	; 14
     694:	30 40       	sbci	r19, 0x00	; 0
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <_ZN14SoftwareSerial5beginEl+0x122>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	2a 95       	dec	r18
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <_ZN14SoftwareSerial5beginEl+0x11e>
     6a4:	85 2b       	or	r24, r21
     6a6:	8c 93       	st	X, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
     6a8:	89 8d       	ldd	r24, Y+25	; 0x19
     6aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	8f 3f       	cpi	r24, 0xFF	; 255
     6b4:	92 07       	cpc	r25, r18
     6b6:	d9 f7       	brne	.-10     	; 0x6ae <_ZN14SoftwareSerial5beginEl+0x130>

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (active_object != this)
     6b8:	80 91 9e 01 	lds	r24, 0x019E
     6bc:	90 91 9f 01 	lds	r25, 0x019F
     6c0:	8c 17       	cp	r24, r28
     6c2:	9d 07       	cpc	r25, r29
     6c4:	81 f0       	breq	.+32     	; 0x6e6 <_ZN14SoftwareSerial5beginEl+0x168>
  {
    _buffer_overflow = false;
     6c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6c8:	8e 7f       	andi	r24, 0xFE	; 254
     6ca:	8b 8f       	std	Y+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
     6cc:	9f b7       	in	r25, 0x3f	; 63
    cli();
     6ce:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
     6d0:	10 92 e0 01 	sts	0x01E0, r1
     6d4:	80 91 e0 01 	lds	r24, 0x01E0
     6d8:	80 93 e1 01 	sts	0x01E1, r24
    active_object = this;
     6dc:	d0 93 9f 01 	sts	0x019F, r29
     6e0:	c0 93 9e 01 	sts	0x019E, r28
    SREG = oldSREG;
     6e4:	9f bf       	out	0x3f, r25	; 63
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	08 95       	ret

000006f8 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     6f8:	20 91 9e 01 	lds	r18, 0x019E
     6fc:	30 91 9f 01 	lds	r19, 0x019F
     700:	28 17       	cp	r18, r24
     702:	39 07       	cpc	r19, r25
     704:	31 f4       	brne	.+12     	; 0x712 <_ZN14SoftwareSerial4readEv+0x1a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     706:	90 91 e1 01 	lds	r25, 0x01E1
     70a:	80 91 e0 01 	lds	r24, 0x01E0
     70e:	98 17       	cp	r25, r24
     710:	19 f4       	brne	.+6      	; 0x718 <_ZN14SoftwareSerial4readEv+0x20>
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	3f ef       	ldi	r19, 0xFF	; 255
     716:	0f c0       	rjmp	.+30     	; 0x736 <_ZN14SoftwareSerial4readEv+0x3e>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     718:	e0 91 e1 01 	lds	r30, 0x01E1
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	e0 56       	subi	r30, 0x60	; 96
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	20 81       	ld	r18, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     724:	80 91 e1 01 	lds	r24, 0x01E1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	8f 73       	andi	r24, 0x3F	; 63
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	80 93 e1 01 	sts	0x01E1, r24
  return d;
     734:	30 e0       	ldi	r19, 0x00	; 0
}
     736:	c9 01       	movw	r24, r18
     738:	08 95       	ret

0000073a <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
     73a:	20 91 9e 01 	lds	r18, 0x019E
     73e:	30 91 9f 01 	lds	r19, 0x019F
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	19 f0       	breq	.+6      	; 0x74e <_ZN14SoftwareSerial9availableEv+0x14>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	0e c0       	rjmp	.+28     	; 0x76a <_ZN14SoftwareSerial9availableEv+0x30>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     74e:	80 91 e0 01 	lds	r24, 0x01E0
     752:	20 91 e1 01 	lds	r18, 0x01E1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	80 5c       	subi	r24, 0xC0	; 192
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	82 1b       	sub	r24, r18
     75e:	91 09       	sbc	r25, r1
     760:	60 e4       	ldi	r22, 0x40	; 64
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__divmodhi4>
     768:	9c 01       	movw	r18, r24
}
     76a:	c9 01       	movw	r24, r18
     76c:	08 95       	ret

0000076e <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	dc 01       	movw	r26, r24
{
  if (_tx_delay == 0) {
     774:	59 96       	adiw	r26, 0x19	; 25
     776:	8d 91       	ld	r24, X+
     778:	9c 91       	ld	r25, X
     77a:	5a 97       	sbiw	r26, 0x1a	; 26
     77c:	89 2b       	or	r24, r25
     77e:	49 f4       	brne	.+18     	; 0x792 <_ZN14SoftwareSerial5writeEh+0x24>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	13 96       	adiw	r26, 0x03	; 3
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	12 97       	sbiw	r26, 0x02	; 2
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	97 c0       	rjmp	.+302    	; 0x8c0 <_ZN14SoftwareSerial5writeEh+0x152>
    setWriteError();
    return 0;
  }

  uint8_t oldSREG = SREG;
     792:	0f b7       	in	r16, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
     794:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     796:	5b 96       	adiw	r26, 0x1b	; 27
     798:	8c 91       	ld	r24, X
     79a:	5b 97       	sbiw	r26, 0x1b	; 27
     79c:	51 96       	adiw	r26, 0x11	; 17
     79e:	ed 91       	ld	r30, X+
     7a0:	fc 91       	ld	r31, X
     7a2:	52 97       	sbiw	r26, 0x12	; 18
     7a4:	50 96       	adiw	r26, 0x10	; 16
     7a6:	2c 91       	ld	r18, X
     7a8:	50 97       	sbiw	r26, 0x10	; 16
     7aa:	81 ff       	sbrs	r24, 1
     7ac:	8d c0       	rjmp	.+282    	; 0x8c8 <_ZN14SoftwareSerial5writeEh+0x15a>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     7ae:	80 81       	ld	r24, Z
     7b0:	82 2b       	or	r24, r18
     7b2:	80 83       	st	Z, r24
  uint8_t oldSREG = SREG;
  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     7b4:	59 96       	adiw	r26, 0x19	; 25
     7b6:	8d 91       	ld	r24, X+
     7b8:	9c 91       	ld	r25, X
     7ba:	5a 97       	sbiw	r26, 0x1a	; 26
     7bc:	05 96       	adiw	r24, 0x05	; 5
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	2f ef       	ldi	r18, 0xFF	; 255
     7c4:	8f 3f       	cpi	r24, 0xFF	; 255
     7c6:	92 07       	cpc	r25, r18
     7c8:	d9 f7       	brne	.-10     	; 0x7c0 <_ZN14SoftwareSerial5writeEh+0x52>
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
     7ca:	5b 96       	adiw	r26, 0x1b	; 27
     7cc:	8c 91       	ld	r24, X
     7ce:	5b 97       	sbiw	r26, 0x1b	; 27
     7d0:	81 ff       	sbrs	r24, 1
     7d2:	35 c0       	rjmp	.+106    	; 0x83e <_ZN14SoftwareSerial5writeEh+0xd0>
     7d4:	31 e0       	ldi	r19, 0x01	; 1
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     7da:	70 e0       	ldi	r23, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     7dc:	10 e0       	ldi	r17, 0x00	; 0
  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     7de:	83 2f       	mov	r24, r19
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	86 23       	and	r24, r22
     7e4:	97 23       	and	r25, r23
     7e6:	51 96       	adiw	r26, 0x11	; 17
     7e8:	ed 91       	ld	r30, X+
     7ea:	fc 91       	ld	r31, X
     7ec:	52 97       	sbiw	r26, 0x12	; 18
     7ee:	50 96       	adiw	r26, 0x10	; 16
     7f0:	2c 91       	ld	r18, X
     7f2:	50 97       	sbiw	r26, 0x10	; 16
     7f4:	89 2b       	or	r24, r25
     7f6:	29 f0       	breq	.+10     	; 0x802 <_ZN14SoftwareSerial5writeEh+0x94>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     7f8:	80 81       	ld	r24, Z
     7fa:	20 95       	com	r18
     7fc:	28 23       	and	r18, r24
     7fe:	20 83       	st	Z, r18
     800:	03 c0       	rjmp	.+6      	; 0x808 <_ZN14SoftwareSerial5writeEh+0x9a>
  else
    *_transmitPortRegister |= _transmitBitMask;
     802:	80 81       	ld	r24, Z
     804:	82 2b       	or	r24, r18
     806:	80 83       	st	Z, r24
      if (b & mask) // choose bit
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
     808:	59 96       	adiw	r26, 0x19	; 25
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     810:	21 2f       	mov	r18, r17
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	2f ef       	ldi	r18, 0xFF	; 255
     816:	8f 3f       	cpi	r24, 0xFF	; 255
     818:	92 07       	cpc	r25, r18
     81a:	d9 f7       	brne	.-10     	; 0x812 <_ZN14SoftwareSerial5writeEh+0xa4>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     81c:	33 0f       	add	r19, r19
     81e:	4f 5f       	subi	r20, 0xFF	; 255
     820:	5f 4f       	sbci	r21, 0xFF	; 255
     822:	48 30       	cpi	r20, 0x08	; 8
     824:	51 05       	cpc	r21, r1
     826:	d9 f6       	brne	.-74     	; 0x7de <_ZN14SoftwareSerial5writeEh+0x70>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     828:	51 96       	adiw	r26, 0x11	; 17
     82a:	ed 91       	ld	r30, X+
     82c:	fc 91       	ld	r31, X
     82e:	52 97       	sbiw	r26, 0x12	; 18
     830:	90 81       	ld	r25, Z
     832:	50 96       	adiw	r26, 0x10	; 16
     834:	8c 91       	ld	r24, X
     836:	50 97       	sbiw	r26, 0x10	; 16
     838:	80 95       	com	r24
     83a:	89 23       	and	r24, r25
     83c:	33 c0       	rjmp	.+102    	; 0x8a4 <_ZN14SoftwareSerial5writeEh+0x136>
     83e:	31 e0       	ldi	r19, 0x01	; 1
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     844:	70 e0       	ldi	r23, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     846:	10 e0       	ldi	r17, 0x00	; 0
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     848:	83 2f       	mov	r24, r19
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	86 23       	and	r24, r22
     84e:	97 23       	and	r25, r23
     850:	51 96       	adiw	r26, 0x11	; 17
     852:	ed 91       	ld	r30, X+
     854:	fc 91       	ld	r31, X
     856:	52 97       	sbiw	r26, 0x12	; 18
     858:	50 96       	adiw	r26, 0x10	; 16
     85a:	2c 91       	ld	r18, X
     85c:	50 97       	sbiw	r26, 0x10	; 16
     85e:	89 2b       	or	r24, r25
     860:	21 f0       	breq	.+8      	; 0x86a <_ZN14SoftwareSerial5writeEh+0xfc>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     862:	80 81       	ld	r24, Z
     864:	82 2b       	or	r24, r18
     866:	80 83       	st	Z, r24
     868:	04 c0       	rjmp	.+8      	; 0x872 <_ZN14SoftwareSerial5writeEh+0x104>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     86a:	80 81       	ld	r24, Z
     86c:	20 95       	com	r18
     86e:	28 23       	and	r18, r24
     870:	20 83       	st	Z, r18
      if (b & mask) // choose bit
        tx_pin_write(HIGH); // send 1
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
     872:	59 96       	adiw	r26, 0x19	; 25
     874:	8d 91       	ld	r24, X+
     876:	9c 91       	ld	r25, X
     878:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     87a:	21 2f       	mov	r18, r17
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	2f ef       	ldi	r18, 0xFF	; 255
     880:	8f 3f       	cpi	r24, 0xFF	; 255
     882:	92 07       	cpc	r25, r18
     884:	d9 f7       	brne	.-10     	; 0x87c <_ZN14SoftwareSerial5writeEh+0x10e>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     886:	33 0f       	add	r19, r19
     888:	4f 5f       	subi	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	48 30       	cpi	r20, 0x08	; 8
     88e:	51 05       	cpc	r21, r1
     890:	d9 f6       	brne	.-74     	; 0x848 <_ZN14SoftwareSerial5writeEh+0xda>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     892:	51 96       	adiw	r26, 0x11	; 17
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	52 97       	sbiw	r26, 0x12	; 18
     89a:	80 81       	ld	r24, Z
     89c:	50 96       	adiw	r26, 0x10	; 16
     89e:	9c 91       	ld	r25, X
     8a0:	50 97       	sbiw	r26, 0x10	; 16
     8a2:	89 2b       	or	r24, r25
     8a4:	80 83       	st	Z, r24
    }

    tx_pin_write(HIGH); // restore pin to natural state
  }

  SREG = oldSREG; // turn interrupts back on
     8a6:	0f bf       	out	0x3f, r16	; 63
  tunedDelay(_tx_delay);
     8a8:	59 96       	adiw	r26, 0x19	; 25
     8aa:	8d 91       	ld	r24, X+
     8ac:	9c 91       	ld	r25, X
     8ae:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	2f ef       	ldi	r18, 0xFF	; 255
     8b6:	8f 3f       	cpi	r24, 0xFF	; 255
     8b8:	92 07       	cpc	r25, r18
     8ba:	d9 f7       	brne	.-10     	; 0x8b2 <_ZN14SoftwareSerial5writeEh+0x144>
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     8c0:	c9 01       	movw	r24, r18
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	08 95       	ret
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     8c8:	80 81       	ld	r24, Z
     8ca:	20 95       	com	r18
     8cc:	28 23       	and	r18, r24
     8ce:	20 83       	st	Z, r18
     8d0:	71 cf       	rjmp	.-286    	; 0x7b4 <_ZN14SoftwareSerial5writeEh+0x46>

000008d2 <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     8d2:	20 91 9e 01 	lds	r18, 0x019E
     8d6:	30 91 9f 01 	lds	r19, 0x019F
     8da:	28 17       	cp	r18, r24
     8dc:	39 07       	cpc	r19, r25
     8de:	49 f4       	brne	.+18     	; 0x8f2 <_ZN14SoftwareSerial5flushEv+0x20>
    return;

  uint8_t oldSREG = SREG;
     8e0:	9f b7       	in	r25, 0x3f	; 63
  cli();
     8e2:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
     8e4:	10 92 e0 01 	sts	0x01E0, r1
     8e8:	80 91 e0 01 	lds	r24, 0x01E0
     8ec:	80 93 e1 01 	sts	0x01E1, r24
  SREG = oldSREG;
     8f0:	9f bf       	out	0x3f, r25	; 63
     8f2:	08 95       	ret

000008f4 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
     8f4:	20 91 9e 01 	lds	r18, 0x019E
     8f8:	30 91 9f 01 	lds	r19, 0x019F
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	31 f4       	brne	.+12     	; 0x90e <__stack+0xf>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     902:	90 91 e1 01 	lds	r25, 0x01E1
     906:	80 91 e0 01 	lds	r24, 0x01E0
     90a:	98 17       	cp	r25, r24
     90c:	19 f4       	brne	.+6      	; 0x914 <__stack+0x15>
     90e:	2f ef       	ldi	r18, 0xFF	; 255
     910:	3f ef       	ldi	r19, 0xFF	; 255
     912:	0a c0       	rjmp	.+20     	; 0x928 <__stack+0x29>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     914:	e0 91 e1 01 	lds	r30, 0x01E1
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	e0 56       	subi	r30, 0x60	; 96
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	80 81       	ld	r24, Z
     920:	28 2f       	mov	r18, r24
     922:	33 27       	eor	r19, r19
     924:	27 fd       	sbrc	r18, 7
     926:	30 95       	com	r19
}
     928:	c9 01       	movw	r24, r18
     92a:	08 95       	ret

0000092c <_ZN14SoftwareSerial5setRXEh>:
  _transmitBitMask = digitalPinToBitMask(tx);
  uint8_t port = digitalPinToPort(tx);
  _transmitPortRegister = portOutputRegister(port);
}

void SoftwareSerial::setRX(uint8_t rx)
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
     934:	16 2f       	mov	r17, r22
{
  pinMode(rx, INPUT);
     936:	86 2f       	mov	r24, r22
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pinMode>
  if (!_inverse_logic)
     93e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     940:	81 fd       	sbrc	r24, 1
     942:	04 c0       	rjmp	.+8      	; 0x94c <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     944:	81 2f       	mov	r24, r17
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <digitalWrite>
  _receivePin = rx;
     94c:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     94e:	21 2f       	mov	r18, r17
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	c9 01       	movw	r24, r18
     954:	86 5d       	subi	r24, 0xD6	; 214
     956:	9e 4f       	sbci	r25, 0xFE	; 254
     958:	fc 01       	movw	r30, r24
     95a:	84 91       	lpm	r24, Z+
     95c:	8d 87       	std	Y+13, r24	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     95e:	2a 5e       	subi	r18, 0xEA	; 234
     960:	3e 4f       	sbci	r19, 0xFE	; 254
     962:	f9 01       	movw	r30, r18
     964:	64 91       	lpm	r22, Z+
  _receivePortRegister = portInputRegister(port);
     966:	e6 2f       	mov	r30, r22
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	e4 5f       	subi	r30, 0xF4	; 244
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	85 91       	lpm	r24, Z+
     974:	94 91       	lpm	r25, Z+
     976:	9f 87       	std	Y+15, r25	; 0x0f
     978:	8e 87       	std	Y+14, r24	; 0x0e
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	08 95       	ret

00000982 <_ZN14SoftwareSerial5setTXEh>:
SoftwareSerial::~SoftwareSerial()
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	8c 01       	movw	r16, r24
     98a:	f6 2e       	mov	r15, r22
{
  pinMode(tx, OUTPUT);
     98c:	86 2f       	mov	r24, r22
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pinMode>
  digitalWrite(tx, HIGH);
     994:	8f 2d       	mov	r24, r15
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <digitalWrite>
  _transmitBitMask = digitalPinToBitMask(tx);
     99c:	8f 2d       	mov	r24, r15
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	e6 5d       	subi	r30, 0xD6	; 214
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	e4 91       	lpm	r30, Z+
     9a8:	d8 01       	movw	r26, r16
     9aa:	50 96       	adiw	r26, 0x10	; 16
     9ac:	ec 93       	st	X, r30
     9ae:	50 97       	sbiw	r26, 0x10	; 16
  uint8_t port = digitalPinToPort(tx);
     9b0:	8a 5e       	subi	r24, 0xEA	; 234
     9b2:	9e 4f       	sbci	r25, 0xFE	; 254
     9b4:	fc 01       	movw	r30, r24
     9b6:	64 91       	lpm	r22, Z+
  _transmitPortRegister = portOutputRegister(port);
     9b8:	e6 2f       	mov	r30, r22
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	ee 5f       	subi	r30, 0xFE	; 254
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	85 91       	lpm	r24, Z+
     9c6:	94 91       	lpm	r25, Z+
     9c8:	52 96       	adiw	r26, 0x12	; 18
     9ca:	9c 93       	st	X, r25
     9cc:	8e 93       	st	-X, r24
     9ce:	51 97       	sbiw	r26, 0x11	; 17
}
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	08 95       	ret

000009d8 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	8c 01       	movw	r16, r24
     9e0:	f6 2e       	mov	r15, r22
  public:
    Print() : write_error(0) {}
     9e2:	fc 01       	movw	r30, r24
     9e4:	13 82       	std	Z+3, r1	; 0x03
     9e6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     9e8:	88 ee       	ldi	r24, 0xE8	; 232
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	a0 e0       	ldi	r26, 0x00	; 0
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	84 83       	std	Z+4, r24	; 0x04
     9f2:	95 83       	std	Z+5, r25	; 0x05
     9f4:	a6 83       	std	Z+6, r26	; 0x06
     9f6:	b7 83       	std	Z+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     9f8:	87 e7       	ldi	r24, 0x77	; 119
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
     a00:	14 8a       	std	Z+20, r1	; 0x14
     a02:	13 8a       	std	Z+19, r1	; 0x13
     a04:	16 8a       	std	Z+22, r1	; 0x16
     a06:	15 8a       	std	Z+21, r1	; 0x15
     a08:	10 8e       	std	Z+24, r1	; 0x18
     a0a:	17 8a       	std	Z+23, r1	; 0x17
     a0c:	12 8e       	std	Z+26, r1	; 0x1a
     a0e:	11 8e       	std	Z+25, r1	; 0x19
     a10:	83 8d       	ldd	r24, Z+27	; 0x1b
     a12:	21 70       	andi	r18, 0x01	; 1
     a14:	22 0f       	add	r18, r18
     a16:	8c 7f       	andi	r24, 0xFC	; 252
     a18:	82 2b       	or	r24, r18
     a1a:	83 8f       	std	Z+27, r24	; 0x1b
{
  setTX(transmitPin);
     a1c:	c8 01       	movw	r24, r16
     a1e:	64 2f       	mov	r22, r20
     a20:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     a24:	c8 01       	movw	r24, r16
     a26:	6f 2d       	mov	r22, r15
     a28:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN14SoftwareSerial5setRXEh>
}
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	08 95       	ret

00000a34 <_ZN9URMSerialC1Ev>:
     a34:	08 95       	ret

00000a36 <_ZN9URMSerial10hasReadingEv>:

// See whether the serial port has sufficient data for a 'reading'
bool URMSerial::hasReading(void)
{
	// We require at least 3 bytes before it can be considered a valid reading
	return (serial->available()>3);
     a36:	dc 01       	movw	r26, r24
     a38:	14 96       	adiw	r26, 0x04	; 4
     a3a:	ed 91       	ld	r30, X+
     a3c:	fc 91       	ld	r31, X
     a3e:	15 97       	sbiw	r26, 0x05	; 5
     a40:	a0 81       	ld	r26, Z
     a42:	b1 81       	ldd	r27, Z+1	; 0x01
     a44:	14 96       	adiw	r26, 0x04	; 4
     a46:	2d 91       	ld	r18, X+
     a48:	3c 91       	ld	r19, X
     a4a:	15 97       	sbiw	r26, 0x05	; 5
     a4c:	cf 01       	movw	r24, r30
     a4e:	f9 01       	movw	r30, r18
     a50:	09 95       	icall
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	04 97       	sbiw	r24, 0x04	; 4
     a56:	0c f0       	brlt	.+2      	; 0xa5a <_ZN9URMSerial10hasReadingEv+0x24>
     a58:	21 e0       	ldi	r18, 0x01	; 1
}
     a5a:	82 2f       	mov	r24, r18
     a5c:	08 95       	ret

00000a5e <_ZN9URMSerial10readSerialEv>:

// Read in serial data (max four bytes)
void URMSerial::readSerial(void)
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	8c 01       	movw	r16, r24
     a6c:	ec 01       	movw	r28, r24
{
    for(int i=0;i<4;i++) serialData[i] = serial->read();
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	e8 2e       	mov	r14, r24
     a72:	f1 2c       	mov	r15, r1
     a74:	e0 0e       	add	r14, r16
     a76:	f1 1e       	adc	r15, r17
     a78:	d8 01       	movw	r26, r16
     a7a:	14 96       	adiw	r26, 0x04	; 4
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	15 97       	sbiw	r26, 0x05	; 5
     a82:	a0 81       	ld	r26, Z
     a84:	b1 81       	ldd	r27, Z+1	; 0x01
     a86:	16 96       	adiw	r26, 0x06	; 6
     a88:	2d 91       	ld	r18, X+
     a8a:	3c 91       	ld	r19, X
     a8c:	17 97       	sbiw	r26, 0x07	; 7
     a8e:	cf 01       	movw	r24, r30
     a90:	f9 01       	movw	r30, r18
     a92:	09 95       	icall
     a94:	8b 87       	std	Y+11, r24	; 0x0b
     a96:	21 96       	adiw	r28, 0x01	; 1
     a98:	ce 15       	cp	r28, r14
     a9a:	df 05       	cpc	r29, r15
     a9c:	69 f7       	brne	.-38     	; 0xa78 <_ZN9URMSerial10readSerialEv+0x1a>
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <_ZN9URMSerial11sendCommandEPh>:
    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);

}

void URMSerial::sendCommand(byte* pCommand)
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	6c 01       	movw	r12, r24
     abc:	8b 01       	movw	r16, r22
     abe:	ff 24       	eor	r15, r15
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
{
	byte sum = 0;
    // Send command
    for(int i=0;i<3;i++)
	{
		serial->write(pCommand[i]);
     ac4:	f6 01       	movw	r30, r12
     ac6:	a4 81       	ldd	r26, Z+4	; 0x04
     ac8:	b5 81       	ldd	r27, Z+5	; 0x05
     aca:	ed 91       	ld	r30, X+
     acc:	fc 91       	ld	r31, X
     ace:	11 97       	sbiw	r26, 0x01	; 1
     ad0:	01 90       	ld	r0, Z+
     ad2:	f0 81       	ld	r31, Z
     ad4:	e0 2d       	mov	r30, r0
     ad6:	cd 01       	movw	r24, r26
     ad8:	d8 01       	movw	r26, r16
     ada:	6c 91       	ld	r22, X
     adc:	09 95       	icall
		sum += pCommand[i];
     ade:	f8 01       	movw	r30, r16
     ae0:	81 91       	ld	r24, Z+
     ae2:	8f 01       	movw	r16, r30
     ae4:	f8 0e       	add	r15, r24

void URMSerial::sendCommand(byte* pCommand)
{
	byte sum = 0;
    // Send command
    for(int i=0;i<3;i++)
     ae6:	21 96       	adiw	r28, 0x01	; 1
     ae8:	c3 30       	cpi	r28, 0x03	; 3
     aea:	d1 05       	cpc	r29, r1
     aec:	59 f7       	brne	.-42     	; 0xac4 <_ZN9URMSerial11sendCommandEPh+0x18>
	{
		serial->write(pCommand[i]);
		sum += pCommand[i];
	}
	serial->write(sum);
     aee:	d6 01       	movw	r26, r12
     af0:	14 96       	adiw	r26, 0x04	; 4
     af2:	ed 91       	ld	r30, X+
     af4:	fc 91       	ld	r31, X
     af6:	15 97       	sbiw	r26, 0x05	; 5
     af8:	a0 81       	ld	r26, Z
     afa:	b1 81       	ldd	r27, Z+1	; 0x01
     afc:	2d 91       	ld	r18, X+
     afe:	3c 91       	ld	r19, X
     b00:	cf 01       	movw	r24, r30
     b02:	6f 2d       	mov	r22, r15
     b04:	f9 01       	movw	r30, r18
     b06:	09 95       	icall
	
	
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <_ZN9URMSerial5beginEhhl>:


// Setup our serial-> connection
void URMSerial::begin(uint8_t rxPin, uint8_t txPin, long baud)
     b18:	8f 92       	push	r8
     b1a:	9f 92       	push	r9
     b1c:	af 92       	push	r10
     b1e:	bf 92       	push	r11
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	7c 01       	movw	r14, r24
     b2e:	96 2e       	mov	r9, r22
     b30:	84 2e       	mov	r8, r20
     b32:	58 01       	movw	r10, r16
     b34:	69 01       	movw	r12, r18
{
    // Initalise measurements
	distanceRequested = false;
     b36:	fc 01       	movw	r30, r24
     b38:	11 86       	std	Z+9, r1	; 0x09
	temperatureRequested = false;
     b3a:	12 86       	std	Z+10, r1	; 0x0a
	
	servoAngle = 23; // 90*
     b3c:	87 e1       	ldi	r24, 0x17	; 23
     b3e:	86 83       	std	Z+6, r24	; 0x06
	servoMin = 0;
     b40:	10 86       	std	Z+8, r1	; 0x08
	servoMax = 30;
     b42:	8e e1       	ldi	r24, 0x1E	; 30
     b44:	87 83       	std	Z+7, r24	; 0x07
	
	timeout = 200;
     b46:	88 ec       	ldi	r24, 0xC8	; 200
     b48:	87 87       	std	Z+15, r24	; 0x0f

    // Initalise serial data
    for(int i=0; i<4;i++) serialData[i]=0;
     b4a:	13 86       	std	Z+11, r1	; 0x0b
     b4c:	14 86       	std	Z+12, r1	; 0x0c
     b4e:	15 86       	std	Z+13, r1	; 0x0d
     b50:	16 86       	std	Z+14, r1	; 0x0e

    // Initalise the software serial to handle our serial communication
    // Please note: using software serial over hardware-serial has some potential issues.
	serial = new SoftwareSerial(rxPin, txPin);
     b52:	8c e1       	ldi	r24, 0x1C	; 28
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <_Znwj>
     b5a:	18 2f       	mov	r17, r24
     b5c:	09 2f       	mov	r16, r25
     b5e:	69 2d       	mov	r22, r9
     b60:	48 2d       	mov	r20, r8
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN14SoftwareSerialC1Ehhb>
     b68:	f7 01       	movw	r30, r14
     b6a:	14 83       	std	Z+4, r17	; 0x04
     b6c:	05 83       	std	Z+5, r16	; 0x05
	serial->begin(baud);
     b6e:	81 2f       	mov	r24, r17
     b70:	90 2f       	mov	r25, r16
     b72:	b6 01       	movw	r22, r12
     b74:	a5 01       	movw	r20, r10
     b76:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN14SoftwareSerial5beginEl>
}
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	08 95       	ret

00000b90 <_ZN9URMSerial10reqTimeoutEv>:
	return TEMPERATURE;
    //value = value >> 1; // Note: Bad practise, decimal value truncated
}

// Has the current request timed out?
bool URMSerial::reqTimeout()
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
{
    if(temperatureRequested || distanceRequested)
     b96:	8a 85       	ldd	r24, Y+10	; 0x0a
     b98:	88 23       	and	r24, r24
     b9a:	19 f4       	brne	.+6      	; 0xba2 <_ZN9URMSerial10reqTimeoutEv+0x12>
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	88 23       	and	r24, r24
     ba0:	81 f0       	breq	.+32     	; 0xbc2 <_ZN9URMSerial10reqTimeoutEv+0x32>
    {
        int tDelta = millis() - timeRequested;
     ba2:	0e 94 9c 0c 	call	0x1938	; 0x1938 <millis>
     ba6:	28 81       	ld	r18, Y
     ba8:	39 81       	ldd	r19, Y+1	; 0x01
     baa:	62 1b       	sub	r22, r18
     bac:	73 0b       	sbc	r23, r19
        // If we've waited to long
        if(tDelta>timeout || tDelta < 0) // If the delta is greater than our timeout or if it has wrapped around
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	86 17       	cp	r24, r22
     bb4:	97 07       	cpc	r25, r23
     bb6:	2c f0       	brlt	.+10     	; 0xbc2 <_ZN9URMSerial10reqTimeoutEv+0x32>
     bb8:	87 2f       	mov	r24, r23
     bba:	88 1f       	adc	r24, r24
     bbc:	88 27       	eor	r24, r24
     bbe:	88 1f       	adc	r24, r24
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <_ZN9URMSerial10reqTimeoutEv+0x34>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
    }else{
	
        // No pending requests
        return true; // Return true anyway
    }
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_ZN9URMSerial14getMeasurementERi>:
{
    for(int i=0;i<4;i++) serialData[i] = serial->read();
}

// Recieve distance from URM device
byte URMSerial::getMeasurement(int& value)
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ec 01       	movw	r28, r24
     bd4:	8b 01       	movw	r16, r22
{
  if(!hasReading()) return NOTREADY;
     bd6:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN9URMSerial10hasReadingEv>
     bda:	88 23       	and	r24, r24
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <_ZN9URMSerial14getMeasurementERi+0x18>
     bde:	84 e0       	ldi	r24, 0x04	; 4
     be0:	42 c0       	rjmp	.+132    	; 0xc66 <_ZN9URMSerial14getMeasurementERi+0x9c>
  
  if(reqTimeout()) return TIMEOUT;
     be2:	ce 01       	movw	r24, r28
     be4:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN9URMSerial10reqTimeoutEv>
     be8:	88 23       	and	r24, r24
     bea:	11 f0       	breq	.+4      	; 0xbf0 <_ZN9URMSerial14getMeasurementERi+0x26>
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	3b c0       	rjmp	.+118    	; 0xc66 <_ZN9URMSerial14getMeasurementERi+0x9c>
  
	// Read in data
	readSerial();
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN9URMSerial10readSerialEv>

    // Validate the reading type
    switch(serialData[Header]) // Three types of command responses. 0x11 is a temperature, 0x22 Distance, 0x33 EEPROM
     bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf8:	81 31       	cpi	r24, 0x11	; 17
     bfa:	c9 f0       	breq	.+50     	; 0xc2e <_ZN9URMSerial14getMeasurementERi+0x64>
     bfc:	82 32       	cpi	r24, 0x22	; 34
     bfe:	69 f5       	brne	.+90     	; 0xc5a <_ZN9URMSerial14getMeasurementERi+0x90>
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
}

byte URMSerial::processDistance(int& value)
{
    distanceRequested = false;
     c00:	19 86       	std	Y+9, r1	; 0x09


// Process the 4 byte serial data and see whether the device reported an error (happens occationally)
bool URMSerial::hasError()
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
     c02:	4c 85       	ldd	r20, Y+12	; 0x0c
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
byte URMSerial::processDistance(int& value)
{
    distanceRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	84 2f       	mov	r24, r20
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	82 23       	and	r24, r18
     c10:	93 23       	and	r25, r19
     c12:	8f 3f       	cpi	r24, 0xFF	; 255
     c14:	91 05       	cpc	r25, r1
     c16:	31 f1       	breq	.+76     	; 0xc64 <_ZN9URMSerial14getMeasurementERi+0x9a>

    // 1x16bit value wrapped over two bytes
    // HighByte must be multiplied by 255 to represent the correct byte
    // Both are added together to calculate the value in Centimeters (I believe)
    value = serialData[HighByte]*255+serialData[LowByte];
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	48 9f       	mul	r20, r24
     c1c:	c0 01       	movw	r24, r0
     c1e:	11 24       	eor	r1, r1
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	f8 01       	movw	r30, r16
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	1c c0       	rjmp	.+56     	; 0xc66 <_ZN9URMSerial14getMeasurementERi+0x9c>
	return DISTANCE;
}

byte URMSerial::processTemperature(int& value)
{
    temperatureRequested = false;
     c2e:	1a 86       	std	Y+10, r1	; 0x0a


// Process the 4 byte serial data and see whether the device reported an error (happens occationally)
bool URMSerial::hasError()
{
    return((serialData[HighByte] & serialData[LowByte])==255); // If the High and Low byte are both 255: error
     c30:	4d 85       	ldd	r20, Y+13	; 0x0d
byte URMSerial::processTemperature(int& value)
{
    temperatureRequested = false;

	// If the serial data returned an error, quit
	if(hasError()) return ERROR;
     c32:	24 2f       	mov	r18, r20
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	8c 85       	ldd	r24, Y+12	; 0x0c
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	28 23       	and	r18, r24
     c3c:	39 23       	and	r19, r25
     c3e:	2f 3f       	cpi	r18, 0xFF	; 255
     c40:	31 05       	cpc	r19, r1
     c42:	81 f0       	breq	.+32     	; 0xc64 <_ZN9URMSerial14getMeasurementERi+0x9a>

    // If 0, the value is the same regardless
    if(serialData[LowByte]==0)
     c44:	44 23       	and	r20, r20
     c46:	21 f4       	brne	.+8      	; 0xc50 <_ZN9URMSerial14getMeasurementERi+0x86>
    {
        value = 0;
     c48:	f8 01       	movw	r30, r16
     c4a:	11 82       	std	Z+1, r1	; 0x01
     c4c:	10 82       	st	Z, r1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <_ZN9URMSerial14getMeasurementERi+0x8c>
		// Below 0
		if(serialData[HighByte]==0x255)
		{
			value = -serialData[LowByte];
		}else{ // above zero
			value = serialData[LowByte]; // Consider below zero 1111
     c50:	f8 01       	movw	r30, r16
     c52:	40 83       	st	Z, r20
     c54:	11 82       	std	Z+1, r1	; 0x01
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <_ZN9URMSerial14getMeasurementERi+0x9c>
        return processTemperature(value);
     break;
    }

    // Strange return result!
	distanceRequested = temperatureRequested = false; // This is a bug fix. If an error was returned (conrrupt byte array), reset distance measurements so we can re-request
     c5a:	1a 86       	std	Y+10, r1	; 0x0a
     c5c:	19 86       	std	Y+9, r1	; 0x09
    value = 0;
     c5e:	f8 01       	movw	r30, r16
     c60:	11 82       	std	Z+1, r1	; 0x01
     c62:	10 82       	st	Z, r1
    return ERROR;
     c64:	83 e0       	ldi	r24, 0x03	; 3
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <_ZN9URMSerial18requestMeasurementEh>:
        return true; // Return true anyway
    }
}

// send the temperature request to the serial port [*note, no delay]
bool URMSerial::requestMeasurement(byte mType)
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <_ZN9URMSerial18requestMeasurementEh+0xc>
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	8c 01       	movw	r16, r24
     c84:	f6 2e       	mov	r15, r22
{
    if(!reqTimeout()) return false;
     c86:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN9URMSerial10reqTimeoutEv>
     c8a:	88 23       	and	r24, r24
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <_ZN9URMSerial18requestMeasurementEh+0x80>

    timeRequested = millis(); // store request time
     c8e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <millis>
     c92:	f8 01       	movw	r30, r16
     c94:	60 83       	st	Z, r22
     c96:	71 83       	std	Z+1, r23	; 0x01
     c98:	82 83       	std	Z+2, r24	; 0x02
     c9a:	93 83       	std	Z+3, r25	; 0x03

	byte ttlCOMMAND[3] = {0,0,0};
     c9c:	de 01       	movw	r26, r28
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	e3 e8       	ldi	r30, 0x83	; 131
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	01 90       	ld	r0, Z+
     ca8:	0d 92       	st	X+, r0
     caa:	81 50       	subi	r24, 0x01	; 1
     cac:	e1 f7       	brne	.-8      	; 0xca6 <_ZN9URMSerial18requestMeasurementEh+0x36>
    // Select appropriate memory addresses
    switch(mType)
     cae:	f1 e0       	ldi	r31, 0x01	; 1
     cb0:	ff 16       	cp	r15, r31
     cb2:	79 f0       	breq	.+30     	; 0xcd2 <_ZN9URMSerial18requestMeasurementEh+0x62>
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	f8 16       	cp	r15, r24
     cb8:	d9 f4       	brne	.+54     	; 0xcf0 <_ZN9URMSerial18requestMeasurementEh+0x80>
    {
         case TEMPERATURE:
			ttlCOMMAND[Header] = COMMAND_TEMP;
     cba:	81 e1       	ldi	r24, 0x11	; 17
     cbc:	89 83       	std	Y+1, r24	; 0x01
            sendCommand(ttlCOMMAND);
     cbe:	c8 01       	movw	r24, r16
     cc0:	be 01       	movw	r22, r28
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN9URMSerial11sendCommandEPh>
            temperatureRequested = true;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	f8 01       	movw	r30, r16
     cce:	82 87       	std	Z+10, r24	; 0x0a
     cd0:	10 c0       	rjmp	.+32     	; 0xcf2 <_ZN9URMSerial18requestMeasurementEh+0x82>
            return true;
         break;
         case DISTANCE:
			ttlCOMMAND[Header] = COMMAND_DISTANCE;
     cd2:	82 e2       	ldi	r24, 0x22	; 34
     cd4:	89 83       	std	Y+1, r24	; 0x01
			ttlCOMMAND[HighByte] = servoAngle;
     cd6:	f8 01       	movw	r30, r16
     cd8:	86 81       	ldd	r24, Z+6	; 0x06
     cda:	8a 83       	std	Y+2, r24	; 0x02
			
            sendCommand(ttlCOMMAND);
     cdc:	c8 01       	movw	r24, r16
     cde:	be 01       	movw	r22, r28
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN9URMSerial11sendCommandEPh>
            distanceRequested = true;
     ce8:	f8 01       	movw	r30, r16
     cea:	f1 86       	std	Z+9, r15	; 0x09
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <_ZN9URMSerial18requestMeasurementEh+0x82>
            return true;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
         default:
         // Do nothing
            return false;
         break;
    }
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	08 95       	ret

00000d04 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>:

byte URMSerial::requestMeasurementOrTimeout(byte mType, int& value)
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	8a 01       	movw	r16, r20
{
    // Request measurement or fail
    if(!requestMeasurement(mType))
     d10:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN9URMSerial18requestMeasurementEh>
     d14:	88 23       	and	r24, r24
     d16:	11 f4       	brne	.+4      	; 0xd1c <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x18>
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	15 c0       	rjmp	.+42     	; 0xd46 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x42>
    {
        return NOTREADY;
    }

    // Wait until we either timeout or we have a reading
    while(!reqTimeout() && !hasReading())
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN9URMSerial10reqTimeoutEv>
     d22:	88 23       	and	r24, r24
     d24:	a9 f4       	brne	.+42     	; 0xd50 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x4c>
     d26:	ce 01       	movw	r24, r28
     d28:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN9URMSerial10hasReadingEv>
     d2c:	88 23       	and	r24, r24
     d2e:	81 f4       	brne	.+32     	; 0xd50 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x4c>
    {
        delay(10); // Wait a bit
     d30:	6a e0       	ldi	r22, 0x0A	; 10
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 aa 0c 	call	0x1954	; 0x1954 <delay>
     d3c:	ef cf       	rjmp	.-34     	; 0xd1c <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x18>

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;

    // Pass control to getMeasurement which will return the requested measurement
    return getMeasurement(value);
     d3e:	ce 01       	movw	r24, r28
     d40:	b8 01       	movw	r22, r16
     d42:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN9URMSerial14getMeasurementERi>

}
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret
    {
        delay(10); // Wait a bit
    }

    // Request has timed out, FAIL
    if(reqTimeout()) return TIMEOUT;
     d50:	ce 01       	movw	r24, r28
     d52:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN9URMSerial10reqTimeoutEv>
     d56:	88 23       	and	r24, r24
     d58:	91 f3       	breq	.-28     	; 0xd3e <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x3a>
     d5a:	85 e0       	ldi	r24, 0x05	; 5
     d5c:	f4 cf       	rjmp	.-24     	; 0xd46 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi+0x42>

00000d5e <_ZN11MeetAndroidC1Ev>:
	}
}


// public methods
MeetAndroid::MeetAndroid()
     d5e:	fc 01       	movw	r30, r24
     d60:	13 82       	std	Z+3, r1	; 0x03
     d62:	12 82       	std	Z+2, r1	; 0x02
     d64:	8a e8       	ldi	r24, 0x8A	; 138
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	80 83       	st	Z, r24
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
     d6c:	e5 5b       	subi	r30, 0xB5	; 181
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	10 82       	st	Z, r1
     d72:	eb 54       	subi	r30, 0x4B	; 75
     d74:	f0 40       	sbci	r31, 0x00	; 0
	errorFunc = 0;
     d76:	df 01       	movw	r26, r30
     d78:	ae 51       	subi	r26, 0x1E	; 30
     d7a:	bf 4f       	sbci	r27, 0xFF	; 255
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	1c 92       	st	X, r1
     d80:	1e 92       	st	-X, r1
}


void MeetAndroid::init()
{
	waitTime = 30;
     d82:	ec 51       	subi	r30, 0x1C	; 28
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	8e e1       	ldi	r24, 0x1E	; 30
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
	startFlag = 18;
     d8e:	ea 59       	subi	r30, 0x9A	; 154
     d90:	f0 40       	sbci	r31, 0x00	; 0
     d92:	82 e1       	ldi	r24, 0x12	; 18
     d94:	80 83       	st	Z, r24
	ack = 19;
     d96:	32 97       	sbiw	r30, 0x02	; 2
     d98:	83 e1       	ldi	r24, 0x13	; 19
     d9a:	80 83       	st	Z, r24
	abord = 27;
     d9c:	8b e1       	ldi	r24, 0x1B	; 27
     d9e:	82 93       	st	-Z, r24
	delimiter = 59; //';'
     da0:	32 96       	adiw	r30, 0x02	; 2
     da2:	8b e3       	ldi	r24, 0x3B	; 59
     da4:	80 83       	st	Z, r24

	numberOfValues = 0;
     da6:	34 97       	sbiw	r30, 0x04	; 4
     da8:	11 82       	std	Z+1, r1	; 0x01
     daa:	10 82       	st	Z, r1
     dac:	37 96       	adiw	r30, 0x07	; 7
	
	for(int a = 0;a < FunctionBufferLenght;a++){
		intFunc[a] = errorFunc;
     dae:	8d 91       	ld	r24, X+
     db0:	9c 91       	ld	r25, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	81 93       	st	Z+, r24
     db6:	91 93       	st	Z+, r25
	abord = 27;
	delimiter = 59; //';'

	numberOfValues = 0;
	
	for(int a = 0;a < FunctionBufferLenght;a++){
     db8:	ea 17       	cp	r30, r26
     dba:	fb 07       	cpc	r31, r27
     dbc:	c1 f7       	brne	.-16     	; 0xdae <_ZN11MeetAndroidC1Ev+0x50>
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
	errorFunc = 0;
	init();
}
     dbe:	08 95       	ret

00000dc0 <_ZN11MeetAndroid4sendEi>:
void MeetAndroid::send(uint8_t n){
	Serial.print(startFlag);
	Serial.print(n);
	Serial.print(ack);
}
void MeetAndroid::send(int n){
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	8c 01       	movw	r16, r24
     dce:	6b 01       	movw	r12, r22
	Serial.print(startFlag);
     dd0:	b0 e6       	ldi	r27, 0x60	; 96
     dd2:	eb 2e       	mov	r14, r27
     dd4:	b3 e0       	ldi	r27, 0x03	; 3
     dd6:	fb 2e       	mov	r15, r27
     dd8:	06 5b       	subi	r16, 0xB6	; 182
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	c7 01       	movw	r24, r14
     dde:	f8 01       	movw	r30, r16
     de0:	60 81       	ld	r22, Z
     de2:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN5Print5printEc>
	Serial.print(n);
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	4a e0       	ldi	r20, 0x0A	; 10
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN5Print5printEii>
	Serial.print(ack);
     df2:	02 50       	subi	r16, 0x02	; 2
     df4:	10 40       	sbci	r17, 0x00	; 0
     df6:	c7 01       	movw	r24, r14
     df8:	f8 01       	movw	r30, r16
     dfa:	60 81       	ld	r22, Z
     dfc:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN5Print5printEc>
}
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	08 95       	ret

00000e0e <_ZN11MeetAndroid4sendEh>:
void MeetAndroid::send(const char str[]){
	Serial.print(startFlag);
	Serial.print(str);
	Serial.print(ack);
}
void MeetAndroid::send(uint8_t n){
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	8c 01       	movw	r16, r24
     e1a:	d6 2e       	mov	r13, r22
	Serial.print(startFlag);
     e1c:	80 e6       	ldi	r24, 0x60	; 96
     e1e:	e8 2e       	mov	r14, r24
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	f8 2e       	mov	r15, r24
     e24:	06 5b       	subi	r16, 0xB6	; 182
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	c7 01       	movw	r24, r14
     e2a:	f8 01       	movw	r30, r16
     e2c:	60 81       	ld	r22, Z
     e2e:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN5Print5printEc>
	Serial.print(n);
     e32:	c7 01       	movw	r24, r14
     e34:	6d 2d       	mov	r22, r13
     e36:	4a e0       	ldi	r20, 0x0A	; 10
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print5printEhi>
	Serial.print(ack);
     e3e:	02 50       	subi	r16, 0x02	; 2
     e40:	10 40       	sbci	r17, 0x00	; 0
     e42:	c7 01       	movw	r24, r14
     e44:	f8 01       	movw	r30, r16
     e46:	60 81       	ld	r22, Z
     e48:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN5Print5printEc>
}
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	08 95       	ret

00000e58 <_ZN11MeetAndroid5writeEh>:
}


#if defined(ARDUINO) && ARDUINO >= 100
size_t MeetAndroid::write(uint8_t b){
	return Serial.print(b);
     e58:	80 e6       	ldi	r24, 0x60	; 96
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print5printEhi>
}
     e64:	08 95       	ret

00000e66 <_ZN11MeetAndroid4sendEPKc>:
	Serial.print(startFlag);
	Serial.print(c);
	Serial.print(ack);
}

void MeetAndroid::send(const char str[]){
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	8c 01       	movw	r16, r24
     e74:	6b 01       	movw	r12, r22
	Serial.print(startFlag);
     e76:	90 e6       	ldi	r25, 0x60	; 96
     e78:	e9 2e       	mov	r14, r25
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	f9 2e       	mov	r15, r25
     e7e:	06 5b       	subi	r16, 0xB6	; 182
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	c7 01       	movw	r24, r14
     e84:	f8 01       	movw	r30, r16
     e86:	60 81       	ld	r22, Z
     e88:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN5Print5printEc>
	Serial.print(str);
     e8c:	c7 01       	movw	r24, r14
     e8e:	b6 01       	movw	r22, r12
     e90:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN5Print5printEPKc>
	Serial.print(ack);
     e94:	02 50       	subi	r16, 0x02	; 2
     e96:	10 40       	sbci	r17, 0x00	; 0
     e98:	c7 01       	movw	r24, r14
     e9a:	f8 01       	movw	r30, r16
     e9c:	60 81       	ld	r22, Z
     e9e:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN5Print5printEc>
}
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <_ZN11MeetAndroid14processCommandEv>:
#include <stdlib.h>
}


// Private methods
void MeetAndroid::processCommand(){
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
	if(buffer[0]-FunctionBufferOffset < FunctionBufferLenght){
     ec0:	fd 80       	ldd	r15, Y+5	; 0x05
     ec2:	ef 2d       	mov	r30, r15
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	eb 37       	cpi	r30, 0x7B	; 123
     ec8:	f1 05       	cpc	r31, r1
     eca:	d4 f5       	brge	.+116    	; 0xf40 <_ZN11MeetAndroid14processCommandEv+0x90>
		void (*H_FuncPtr)(uint8_t, uint8_t) = intFunc[buffer[0]-FunctionBufferOffset];
     ecc:	3a 97       	sbiw	r30, 0x0a	; 10
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e8 0f       	add	r30, r24
     ed4:	f9 1f       	adc	r31, r25
     ed6:	00 81       	ld	r16, Z
     ed8:	11 81       	ldd	r17, Z+1	; 0x01
		if (H_FuncPtr != 0) {
     eda:	01 15       	cp	r16, r1
     edc:	11 05       	cpc	r17, r1
     ede:	69 f1       	breq	.+90     	; 0xf3a <_ZN11MeetAndroid14processCommandEv+0x8a>
	return (float)getDouble();
}

int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	e9 f1       	breq	.+122    	; 0xf60 <_ZN11MeetAndroid14processCommandEv+0xb0>
	numberOfValues = 1;
     ee6:	fe 01       	movw	r30, r28
     ee8:	eb 5b       	subi	r30, 0xBB	; 187
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
     ef4:	de 01       	movw	r26, r28
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	50 e0       	ldi	r21, 0x00	; 0
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
		if (buffer[a]==delimiter) numberOfValues++;
     efa:	be 01       	movw	r22, r28
     efc:	67 5b       	subi	r22, 0xB7	; 183
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	6f 01       	movw	r12, r30
     f02:	15 c0       	rjmp	.+42     	; 0xf2e <_ZN11MeetAndroid14processCommandEv+0x7e>
     f04:	16 96       	adiw	r26, 0x06	; 6
     f06:	2c 91       	ld	r18, X
     f08:	16 97       	sbiw	r26, 0x06	; 6
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	fb 01       	movw	r30, r22
     f0e:	80 81       	ld	r24, Z
     f10:	99 27       	eor	r25, r25
     f12:	87 fd       	sbrc	r24, 7
     f14:	90 95       	com	r25
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	31 f4       	brne	.+12     	; 0xf28 <_ZN11MeetAndroid14processCommandEv+0x78>
     f1c:	f6 01       	movw	r30, r12
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
	numberOfValues = 1;
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
     f28:	4f 5f       	subi	r20, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	48 17       	cp	r20, r24
     f34:	59 07       	cpc	r21, r25
     f36:	34 f3       	brlt	.-52     	; 0xf04 <_ZN11MeetAndroid14processCommandEv+0x54>
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <_ZN11MeetAndroid14processCommandEv+0x108>
		void (*H_FuncPtr)(uint8_t, uint8_t) = intFunc[buffer[0]-FunctionBufferOffset];
		if (H_FuncPtr != 0) {
			H_FuncPtr(buffer[0], getArrayLength());
		}
		else {
			send("Flag not registered: ");
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <_ZN11MeetAndroid14processCommandEv+0x11e>
			send(buffer[0]);
		}
	}
	else {
		if (customErrorFunc)
     f40:	c5 5b       	subi	r28, 0xB5	; 181
     f42:	df 4f       	sbci	r29, 0xFF	; 255
     f44:	88 81       	ld	r24, Y
     f46:	cb 54       	subi	r28, 0x4B	; 75
     f48:	d0 40       	sbci	r29, 0x00	; 0
     f4a:	88 23       	and	r24, r24
     f4c:	e9 f1       	breq	.+122    	; 0xfc8 <_ZN11MeetAndroid14processCommandEv+0x118>
			errorFunc(buffer[0], getArrayLength());
     f4e:	ce 51       	subi	r28, 0x1E	; 30
     f50:	df 4f       	sbci	r29, 0xFF	; 255
     f52:	08 81       	ld	r16, Y
     f54:	19 81       	ldd	r17, Y+1	; 0x01
     f56:	c2 5e       	subi	r28, 0xE2	; 226
     f58:	d0 40       	sbci	r29, 0x00	; 0
	return (float)getDouble();
}

int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	19 f4       	brne	.+6      	; 0xf66 <_ZN11MeetAndroid14processCommandEv+0xb6>
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	2d c0       	rjmp	.+90     	; 0xfc0 <_ZN11MeetAndroid14processCommandEv+0x110>
	numberOfValues = 1;
     f66:	fe 01       	movw	r30, r28
     f68:	eb 5b       	subi	r30, 0xBB	; 187
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
     f74:	de 01       	movw	r26, r28
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	50 e0       	ldi	r21, 0x00	; 0
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
		if (buffer[a]==delimiter) numberOfValues++;
     f7a:	be 01       	movw	r22, r28
     f7c:	67 5b       	subi	r22, 0xB7	; 183
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	6f 01       	movw	r12, r30
     f82:	15 c0       	rjmp	.+42     	; 0xfae <_ZN11MeetAndroid14processCommandEv+0xfe>
     f84:	16 96       	adiw	r26, 0x06	; 6
     f86:	2c 91       	ld	r18, X
     f88:	16 97       	sbiw	r26, 0x06	; 6
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	fb 01       	movw	r30, r22
     f8e:	80 81       	ld	r24, Z
     f90:	99 27       	eor	r25, r25
     f92:	87 fd       	sbrc	r24, 7
     f94:	90 95       	com	r25
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	31 f4       	brne	.+12     	; 0xfa8 <_ZN11MeetAndroid14processCommandEv+0xf8>
     f9c:	f6 01       	movw	r30, r12
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
	numberOfValues = 1;
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
     fa8:	4f 5f       	subi	r20, 0xFF	; 255
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	11 96       	adiw	r26, 0x01	; 1
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	48 17       	cp	r20, r24
     fb4:	59 07       	cpc	r21, r25
     fb6:	34 f3       	brlt	.-52     	; 0xf84 <_ZN11MeetAndroid14processCommandEv+0xd4>
		if (buffer[a]==delimiter) numberOfValues++;
	}
	return numberOfValues;
     fb8:	cb 5b       	subi	r28, 0xBB	; 187
     fba:	df 4f       	sbci	r29, 0xFF	; 255
     fbc:	68 81       	ld	r22, Y
     fbe:	79 81       	ldd	r23, Y+1	; 0x01
			send(buffer[0]);
		}
	}
	else {
		if (customErrorFunc)
			errorFunc(buffer[0], getArrayLength());
     fc0:	8f 2d       	mov	r24, r15
     fc2:	f8 01       	movw	r30, r16
     fc4:	09 95       	icall
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <_ZN11MeetAndroid14processCommandEv+0x12a>
		else {
			send("Flag out of bounds: ");
     fc8:	ce 01       	movw	r24, r28
     fca:	66 e1       	ldi	r22, 0x16	; 22
     fcc:	71 e0       	ldi	r23, 0x01	; 1
     fce:	0e 94 33 07 	call	0xe66	; 0xe66 <_ZN11MeetAndroid4sendEPKc>
			send(buffer[0]);
     fd2:	ce 01       	movw	r24, r28
     fd4:	6d 81       	ldd	r22, Y+5	; 0x05
     fd6:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN11MeetAndroid4sendEh>
		}
	}
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	08 95       	ret

00000fea <_ZN11MeetAndroid7receiveEv>:
}
void MeetAndroid::unregisterFunction(uint8_t command){
	intFunc[command-FunctionBufferOffset] = errorFunc;
}

bool MeetAndroid::receive(){
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
	{
		while(Serial.available() > 0)
		{
			lastByte = Serial.read();
			
			if(lastByte == abord){
    1000:	37 e4       	ldi	r19, 0x47	; 71
    1002:	a3 2e       	mov	r10, r19
    1004:	b1 2c       	mov	r11, r1
    1006:	a8 0e       	add	r10, r24
    1008:	b9 1e       	adc	r11, r25
				flush();
			}
			else if(lastByte == ack){
    100a:	28 e4       	ldi	r18, 0x48	; 72
    100c:	c2 2e       	mov	r12, r18
    100e:	d1 2c       	mov	r13, r1
    1010:	c8 0e       	add	r12, r24
    1012:	d9 1e       	adc	r13, r25
void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
	}
	bufferCount = 0;
	numberOfValues = 0;
    1014:	8c 01       	movw	r16, r24
    1016:	0b 5b       	subi	r16, 0xBB	; 187
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			else return false;
		}
		
		if(Serial.available() <= 0 && !timeout){
			if(waitTime > 0) delayMicroseconds(waitTime);
    101a:	94 ee       	ldi	r25, 0xE4	; 228
    101c:	e9 2e       	mov	r14, r25
    101e:	f1 2c       	mov	r15, r1
    1020:	ec 0e       	add	r14, r28
    1022:	fd 1e       	adc	r15, r29
    1024:	37 c0       	rjmp	.+110    	; 0x1094 <_ZN11MeetAndroid7receiveEv+0xaa>
	boolean timeout = false;
	while(!timeout)
	{
		while(Serial.available() > 0)
		{
			lastByte = Serial.read();
    1026:	80 e6       	ldi	r24, 0x60	; 96
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN14HardwareSerial4readEv>
    102e:	48 2f       	mov	r20, r24
			
			if(lastByte == abord){
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f5 01       	movw	r30, r10
    1036:	80 81       	ld	r24, Z
    1038:	99 27       	eor	r25, r25
    103a:	87 fd       	sbrc	r24, 7
    103c:	90 95       	com	r25
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	41 f4       	brne	.+16     	; 0x1054 <_ZN11MeetAndroid7receiveEv+0x6a>
    1044:	fe 01       	movw	r30, r28
    1046:	80 e0       	ldi	r24, 0x00	; 0
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
    1048:	15 82       	std	Z+5, r1	; 0x05
	Serial.println();
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	31 96       	adiw	r30, 0x01	; 1
    104e:	80 34       	cpi	r24, 0x40	; 64
    1050:	d9 f7       	brne	.-10     	; 0x1048 <_ZN11MeetAndroid7receiveEv+0x5e>
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <_ZN11MeetAndroid7receiveEv+0x8e>
			lastByte = Serial.read();
			
			if(lastByte == abord){
				flush();
			}
			else if(lastByte == ack){
    1054:	f6 01       	movw	r30, r12
    1056:	80 81       	ld	r24, Z
    1058:	99 27       	eor	r25, r25
    105a:	87 fd       	sbrc	r24, 7
    105c:	90 95       	com	r25
    105e:	28 17       	cp	r18, r24
    1060:	39 07       	cpc	r19, r25
    1062:	79 f4       	brne	.+30     	; 0x1082 <_ZN11MeetAndroid7receiveEv+0x98>
				processCommand();
    1064:	ce 01       	movw	r24, r28
    1066:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN11MeetAndroid14processCommandEv>
    106a:	fe 01       	movw	r30, r28
    106c:	80 e0       	ldi	r24, 0x00	; 0
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
    106e:	15 82       	std	Z+5, r1	; 0x05
	Serial.println();
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	31 96       	adiw	r30, 0x01	; 1
    1074:	80 34       	cpi	r24, 0x40	; 64
    1076:	d9 f7       	brne	.-10     	; 0x106e <_ZN11MeetAndroid7receiveEv+0x84>
		buffer[a] = 0;
	}
	bufferCount = 0;
    1078:	1c 82       	std	Y+4, r1	; 0x04
	numberOfValues = 0;
    107a:	f8 01       	movw	r30, r16
    107c:	11 82       	std	Z+1, r1	; 0x01
    107e:	10 82       	st	Z, r1
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <_ZN11MeetAndroid7receiveEv+0xaa>
			}
			else if(lastByte == ack){
				processCommand();
				flush();
			}
			else if(bufferCount < ByteBufferLenght){
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	80 34       	cpi	r24, 0x40	; 64
    1086:	20 f5       	brcc	.+72     	; 0x10d0 <_ZN11MeetAndroid7receiveEv+0xe6>
				buffer[bufferCount] = lastByte;
    1088:	fe 01       	movw	r30, r28
    108a:	e8 0f       	add	r30, r24
    108c:	f1 1d       	adc	r31, r1
    108e:	45 83       	std	Z+5, r20	; 0x05
				bufferCount++;
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	8c 83       	std	Y+4, r24	; 0x04
bool MeetAndroid::receive(){
	uint8_t lastByte;
	boolean timeout = false;
	while(!timeout)
	{
		while(Serial.available() > 0)
    1094:	80 e6       	ldi	r24, 0x60	; 96
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN14HardwareSerial9availableEv>
    109c:	18 16       	cp	r1, r24
    109e:	19 06       	cpc	r1, r25
    10a0:	14 f2       	brlt	.-124    	; 0x1026 <_ZN11MeetAndroid7receiveEv+0x3c>
				bufferCount++;
			}
			else return false;
		}
		
		if(Serial.available() <= 0 && !timeout){
    10a2:	80 e6       	ldi	r24, 0x60	; 96
    10a4:	93 e0       	ldi	r25, 0x03	; 3
    10a6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN14HardwareSerial9availableEv>
    10aa:	18 16       	cp	r1, r24
    10ac:	19 06       	cpc	r1, r25
    10ae:	94 f3       	brlt	.-28     	; 0x1094 <_ZN11MeetAndroid7receiveEv+0xaa>
			if(waitTime > 0) delayMicroseconds(waitTime);
    10b0:	f7 01       	movw	r30, r14
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	11 f0       	breq	.+4      	; 0x10be <_ZN11MeetAndroid7receiveEv+0xd4>
    10ba:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <delayMicroseconds>
			if(Serial.available() <= 0) timeout = true;
    10be:	80 e6       	ldi	r24, 0x60	; 96
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN14HardwareSerial9availableEv>
    10c6:	18 16       	cp	r1, r24
    10c8:	19 06       	cpc	r1, r25
    10ca:	24 f3       	brlt	.-56     	; 0x1094 <_ZN11MeetAndroid7receiveEv+0xaa>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <_ZN11MeetAndroid7receiveEv+0xe8>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return timeout;
}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	08 95       	ret

000010e8 <_GLOBAL__I_meetAndroid>:
#define ERROR 3
#define NOTREADY 4
#define TIMEOUT 5

extern HardwareSerial Serial;
MeetAndroid meetAndroid;
    10e8:	82 ee       	ldi	r24, 0xE2	; 226
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN11MeetAndroidC1Ev>
URMSerial urm;
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN9URMSerialC1Ev>
		Serial.println("Timeout");
		break;
	}

	return -1;
}
    10f8:	08 95       	ret

000010fa <_Z16getUSMeasurementv>:

	// add a little delay otherwise the phone is pretty busy
	delay(10000);
}

int getUSMeasurement() {
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <_Z16getUSMeasurementv+0x6>
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	int value; // This value will be populated
	// Request a distance reading from the URM37
	switch (urm.requestMeasurementOrTimeout(DISTANCE, value)) // Find out the type of request
    1104:	88 ec       	ldi	r24, 0xC8	; 200
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	ae 01       	movw	r20, r28
    110c:	4f 5f       	subi	r20, 0xFF	; 255
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9URMSerial27requestMeasurementOrTimeoutEhRi>
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	a1 f0       	breq	.+40     	; 0x1140 <_Z16getUSMeasurementv+0x46>
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	28 f4       	brcc	.+10     	; 0x1126 <_Z16getUSMeasurementv+0x2c>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	41 f0       	breq	.+16     	; 0x1130 <_Z16getUSMeasurementv+0x36>
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	f1 f4       	brne	.+60     	; 0x1160 <_Z16getUSMeasurementv+0x66>
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <_Z16getUSMeasurementv+0x3c>
    1126:	84 30       	cpi	r24, 0x04	; 4
    1128:	81 f0       	breq	.+32     	; 0x114a <_Z16getUSMeasurementv+0x50>
    112a:	85 30       	cpi	r24, 0x05	; 5
    112c:	c9 f4       	brne	.+50     	; 0x1160 <_Z16getUSMeasurementv+0x66>
    112e:	12 c0       	rjmp	.+36     	; 0x1154 <_Z16getUSMeasurementv+0x5a>
	{
	case DISTANCE: // Double check the reading we recieve is of DISTANCE type
		return value;
    1130:	29 81       	ldd	r18, Y+1	; 0x01
    1132:	3a 81       	ldd	r19, Y+2	; 0x02
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <_Z16getUSMeasurementv+0x6a>
		break;
	case TEMPERATURE:
		Serial.println("Wrong reading type: Temperature");
    1136:	80 e6       	ldi	r24, 0x60	; 96
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	6b e2       	ldi	r22, 0x2B	; 43
    113c:	71 e0       	ldi	r23, 0x01	; 1
    113e:	0e c0       	rjmp	.+28     	; 0x115c <_Z16getUSMeasurementv+0x62>
		break;
	case ERROR:
		Serial.println("Error");
    1140:	80 e6       	ldi	r24, 0x60	; 96
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	6b e4       	ldi	r22, 0x4B	; 75
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	09 c0       	rjmp	.+18     	; 0x115c <_Z16getUSMeasurementv+0x62>
		break;
	case NOTREADY:
		Serial.println("Not Ready");
    114a:	80 e6       	ldi	r24, 0x60	; 96
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	61 e5       	ldi	r22, 0x51	; 81
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	04 c0       	rjmp	.+8      	; 0x115c <_Z16getUSMeasurementv+0x62>
		break;
	case TIMEOUT:
		Serial.println("Timeout");
    1154:	80 e6       	ldi	r24, 0x60	; 96
    1156:	93 e0       	ldi	r25, 0x03	; 3
    1158:	6b e5       	ldi	r22, 0x5B	; 91
    115a:	71 e0       	ldi	r23, 0x01	; 1
    115c:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN5Print7printlnEPKc>
    1160:	2f ef       	ldi	r18, 0xFF	; 255
    1162:	3f ef       	ldi	r19, 0xFF	; 255
		break;
	}

	return -1;
}
    1164:	c9 01       	movw	r24, r18
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <loop>:
	pinMode(sensor, INPUT);

	urm.begin(US_FRONT_RX, US_FRONT_TX, 9600);
}

void loop() {
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
	meetAndroid.receive(); // you need to keep this in your loop() to receive events
    1174:	02 ee       	ldi	r16, 0xE2	; 226
    1176:	11 e0       	ldi	r17, 0x01	; 1
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN11MeetAndroid7receiveEv>

	// read input pin and send result to Android
	//meetAndroid.send(digitalRead(sensor));
	int value = getUSMeasurement();
    117e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Z16getUSMeasurementv>
    1182:	bc 01       	movw	r22, r24

	meetAndroid.send(value);
    1184:	c8 01       	movw	r24, r16
    1186:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN11MeetAndroid4sendEi>

	// add a little delay otherwise the phone is pretty busy
	delay(10000);
    118a:	60 e1       	ldi	r22, 0x10	; 16
    118c:	77 e2       	ldi	r23, 0x27	; 39
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 aa 0c 	call	0x1954	; 0x1954 <delay>
}
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <setup>:
long BAUD_RATE = 115200;

int US_FRONT_RX = 2; //Ultrasonic sensor output  1
int US_FRONT_TX = 3; //Ultrasonic sensor output 2

void setup() {
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
	// use the baud rate your bluetooth module is configured to
	Serial.begin(BAUD_RATE);
    11a0:	40 91 6b 01 	lds	r20, 0x016B
    11a4:	50 91 6c 01 	lds	r21, 0x016C
    11a8:	60 91 6d 01 	lds	r22, 0x016D
    11ac:	70 91 6e 01 	lds	r23, 0x016E
    11b0:	80 e6       	ldi	r24, 0x60	; 96
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN14HardwareSerial5beginEm>

	// we initialize pin 11 as an input pin
	pinMode(sensor, INPUT);
    11b8:	80 91 69 01 	lds	r24, 0x0169
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pinMode>

	urm.begin(US_FRONT_RX, US_FRONT_TX, 9600);
    11c2:	88 ec       	ldi	r24, 0xC8	; 200
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	60 91 6f 01 	lds	r22, 0x016F
    11ca:	40 91 71 01 	lds	r20, 0x0171
    11ce:	00 e8       	ldi	r16, 0x80	; 128
    11d0:	15 e2       	ldi	r17, 0x25	; 37
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	0e 94 8c 05 	call	0xb18	; 0xb18 <_ZN9URMSerial5beginEhhl>
}
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    11e0:	08 95       	ret

000011e2 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	ef 93       	push	r30
    11f8:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    11fa:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    11fe:	20 91 18 03 	lds	r18, 0x0318
    1202:	30 91 19 03 	lds	r19, 0x0319

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1206:	2f 5f       	subi	r18, 0xFF	; 255
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	2f 73       	andi	r18, 0x3F	; 63
    120c:	30 70       	andi	r19, 0x00	; 0
    120e:	80 91 1a 03 	lds	r24, 0x031A
    1212:	90 91 1b 03 	lds	r25, 0x031B
    1216:	28 17       	cp	r18, r24
    1218:	39 07       	cpc	r19, r25
    121a:	59 f0       	breq	.+22     	; 0x1232 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    121c:	e0 91 18 03 	lds	r30, 0x0318
    1220:	f0 91 19 03 	lds	r31, 0x0319
    1224:	e8 52       	subi	r30, 0x28	; 40
    1226:	fd 4f       	sbci	r31, 0xFD	; 253
    1228:	40 83       	st	Z, r20
    buffer->head = i;
    122a:	30 93 19 03 	sts	0x0319, r19
    122e:	20 93 18 03 	sts	0x0318, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    124a:	e0 91 6c 03 	lds	r30, 0x036C
    124e:	f0 91 6d 03 	lds	r31, 0x036D
    1252:	e0 5c       	subi	r30, 0xC0	; 192
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	81 91       	ld	r24, Z+
    1258:	91 91       	ld	r25, Z+
    125a:	20 81       	ld	r18, Z
    125c:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    125e:	82 1b       	sub	r24, r18
    1260:	93 0b       	sbc	r25, r19
    1262:	8f 73       	andi	r24, 0x3F	; 63
    1264:	90 70       	andi	r25, 0x00	; 0
    1266:	89 2b       	or	r24, r25
    1268:	11 f0       	breq	.+4      	; 0x126e <_Z14serialEventRunv+0x24>
    126a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_Z11serialEventv>
    126e:	08 95       	ret

00001270 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1286:	20 91 5c 03 	lds	r18, 0x035C
    128a:	30 91 5d 03 	lds	r19, 0x035D
    128e:	80 91 5e 03 	lds	r24, 0x035E
    1292:	90 91 5f 03 	lds	r25, 0x035F
    1296:	28 17       	cp	r18, r24
    1298:	39 07       	cpc	r19, r25
    129a:	31 f4       	brne	.+12     	; 0x12a8 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    129c:	80 91 c1 00 	lds	r24, 0x00C1
    12a0:	8f 7d       	andi	r24, 0xDF	; 223
    12a2:	80 93 c1 00 	sts	0x00C1, r24
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    12a8:	e0 91 5e 03 	lds	r30, 0x035E
    12ac:	f0 91 5f 03 	lds	r31, 0x035F
    12b0:	e4 5e       	subi	r30, 0xE4	; 228
    12b2:	fc 4f       	sbci	r31, 0xFC	; 252
    12b4:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    12b6:	80 91 5e 03 	lds	r24, 0x035E
    12ba:	90 91 5f 03 	lds	r25, 0x035F
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	8f 73       	andi	r24, 0x3F	; 63
    12c2:	90 70       	andi	r25, 0x00	; 0
    12c4:	90 93 5f 03 	sts	0x035F, r25
    12c8:	80 93 5e 03 	sts	0x035E, r24
	
  #if defined(UDR0)
    UDR0 = c;
    12cc:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	9f 91       	pop	r25
    12d6:	8f 91       	pop	r24
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	ec 01       	movw	r28, r24
    12fa:	7a 01       	movw	r14, r20
    12fc:	8b 01       	movw	r16, r22
    12fe:	dd 24       	eor	r13, r13
    1300:	40 30       	cpi	r20, 0x00	; 0
    1302:	81 ee       	ldi	r24, 0xE1	; 225
    1304:	58 07       	cpc	r21, r24
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	68 07       	cpc	r22, r24
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	78 07       	cpc	r23, r24
    130e:	11 f0       	breq	.+4      	; 0x1314 <_ZN14HardwareSerial5beginEm+0x2e>
    1310:	dd 24       	eor	r13, r13
    1312:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	a9 2e       	mov	r10, r25
    1318:	b1 2c       	mov	r11, r1
    131a:	ec 89       	ldd	r30, Y+20	; 0x14
    131c:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    131e:	dd 20       	and	r13, r13
    1320:	69 f0       	breq	.+26     	; 0x133c <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1322:	c5 01       	movw	r24, r10
    1324:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1326:	02 c0       	rjmp	.+4      	; 0x132c <_ZN14HardwareSerial5beginEm+0x46>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <_ZN14HardwareSerial5beginEm+0x42>
    1330:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	79 e0       	ldi	r23, 0x09	; 9
    1336:	8d e3       	ldi	r24, 0x3D	; 61
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    133c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    133e:	60 e8       	ldi	r22, 0x80	; 128
    1340:	74 e8       	ldi	r23, 0x84	; 132
    1342:	8e e1       	ldi	r24, 0x1E	; 30
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a8 01       	movw	r20, r16
    1348:	97 01       	movw	r18, r14
    134a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__udivmodsi4>
    134e:	21 50       	subi	r18, 0x01	; 1
    1350:	30 40       	sbci	r19, 0x00	; 0
    1352:	40 40       	sbci	r20, 0x00	; 0
    1354:	50 40       	sbci	r21, 0x00	; 0
    1356:	56 95       	lsr	r21
    1358:	47 95       	ror	r20
    135a:	37 95       	ror	r19
    135c:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    135e:	80 e1       	ldi	r24, 0x10	; 16
    1360:	20 30       	cpi	r18, 0x00	; 0
    1362:	38 07       	cpc	r19, r24
    1364:	20 f0       	brcs	.+8      	; 0x136e <_ZN14HardwareSerial5beginEm+0x88>
    1366:	dd 20       	and	r13, r13
    1368:	11 f0       	breq	.+4      	; 0x136e <_ZN14HardwareSerial5beginEm+0x88>
    136a:	dd 24       	eor	r13, r13
    136c:	d6 cf       	rjmp	.-84     	; 0x131a <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    136e:	e8 89       	ldd	r30, Y+16	; 0x10
    1370:	f9 89       	ldd	r31, Y+17	; 0x11
    1372:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1374:	ea 89       	ldd	r30, Y+18	; 0x12
    1376:	fb 89       	ldd	r31, Y+19	; 0x13
    1378:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    137a:	ee 89       	ldd	r30, Y+22	; 0x16
    137c:	ff 89       	ldd	r31, Y+23	; 0x17
    137e:	40 81       	ld	r20, Z
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	c9 01       	movw	r24, r18
    1386:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1388:	02 c0       	rjmp	.+4      	; 0x138e <_ZN14HardwareSerial5beginEm+0xa8>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <_ZN14HardwareSerial5beginEm+0xa4>
    1392:	48 2b       	or	r20, r24
    1394:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1396:	ee 89       	ldd	r30, Y+22	; 0x16
    1398:	ff 89       	ldd	r31, Y+23	; 0x17
    139a:	40 81       	ld	r20, Z
    139c:	c9 01       	movw	r24, r18
    139e:	0b 8c       	ldd	r0, Y+27	; 0x1b
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <_ZN14HardwareSerial5beginEm+0xc0>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <_ZN14HardwareSerial5beginEm+0xbc>
    13aa:	48 2b       	or	r20, r24
    13ac:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    13ae:	ee 89       	ldd	r30, Y+22	; 0x16
    13b0:	ff 89       	ldd	r31, Y+23	; 0x17
    13b2:	40 81       	ld	r20, Z
    13b4:	c9 01       	movw	r24, r18
    13b6:	0c 8c       	ldd	r0, Y+28	; 0x1c
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <_ZN14HardwareSerial5beginEm+0xd8>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <_ZN14HardwareSerial5beginEm+0xd4>
    13c2:	48 2b       	or	r20, r24
    13c4:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    13c6:	ee 89       	ldd	r30, Y+22	; 0x16
    13c8:	ff 89       	ldd	r31, Y+23	; 0x17
    13ca:	80 81       	ld	r24, Z
    13cc:	0d 8c       	ldd	r0, Y+29	; 0x1d
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <_ZN14HardwareSerial5beginEm+0xee>
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <_ZN14HardwareSerial5beginEm+0xea>
    13d8:	20 95       	com	r18
    13da:	28 23       	and	r18, r24
    13dc:	20 83       	st	Z, r18
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	08 95       	ret

000013f2 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    13f2:	dc 01       	movw	r26, r24
    13f4:	1c 96       	adiw	r26, 0x0c	; 12
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	1d 97       	sbiw	r26, 0x0d	; 13
    13fc:	e0 5c       	subi	r30, 0xC0	; 192
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	21 91       	ld	r18, Z+
    1402:	31 91       	ld	r19, Z+
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	28 1b       	sub	r18, r24
    140a:	39 0b       	sbc	r19, r25
    140c:	2f 73       	andi	r18, 0x3F	; 63
    140e:	30 70       	andi	r19, 0x00	; 0
}
    1410:	c9 01       	movw	r24, r18
    1412:	08 95       	ret

00001414 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1414:	dc 01       	movw	r26, r24
    1416:	1c 96       	adiw	r26, 0x0c	; 12
    1418:	ed 91       	ld	r30, X+
    141a:	fc 91       	ld	r31, X
    141c:	1d 97       	sbiw	r26, 0x0d	; 13
    141e:	e0 5c       	subi	r30, 0xC0	; 192
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	20 81       	ld	r18, Z
    1424:	31 81       	ldd	r19, Z+1	; 0x01
    1426:	e0 54       	subi	r30, 0x40	; 64
    1428:	f0 40       	sbci	r31, 0x00	; 0
    142a:	df 01       	movw	r26, r30
    142c:	ae 5b       	subi	r26, 0xBE	; 190
    142e:	bf 4f       	sbci	r27, 0xFF	; 255
    1430:	8d 91       	ld	r24, X+
    1432:	9c 91       	ld	r25, X
    1434:	11 97       	sbiw	r26, 0x01	; 1
    1436:	28 17       	cp	r18, r24
    1438:	39 07       	cpc	r19, r25
    143a:	19 f4       	brne	.+6      	; 0x1442 <_ZN14HardwareSerial4peekEv+0x2e>
    143c:	2f ef       	ldi	r18, 0xFF	; 255
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1442:	8d 91       	ld	r24, X+
    1444:	9c 91       	ld	r25, X
    1446:	e8 0f       	add	r30, r24
    1448:	f9 1f       	adc	r31, r25
    144a:	80 81       	ld	r24, Z
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1450:	c9 01       	movw	r24, r18
    1452:	08 95       	ret

00001454 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1454:	dc 01       	movw	r26, r24
    1456:	1c 96       	adiw	r26, 0x0c	; 12
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	1d 97       	sbiw	r26, 0x0d	; 13
    145e:	e0 5c       	subi	r30, 0xC0	; 192
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	20 81       	ld	r18, Z
    1464:	31 81       	ldd	r19, Z+1	; 0x01
    1466:	e0 54       	subi	r30, 0x40	; 64
    1468:	f0 40       	sbci	r31, 0x00	; 0
    146a:	df 01       	movw	r26, r30
    146c:	ae 5b       	subi	r26, 0xBE	; 190
    146e:	bf 4f       	sbci	r27, 0xFF	; 255
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	11 97       	sbiw	r26, 0x01	; 1
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	19 f4       	brne	.+6      	; 0x1482 <_ZN14HardwareSerial4readEv+0x2e>
    147c:	2f ef       	ldi	r18, 0xFF	; 255
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	10 c0       	rjmp	.+32     	; 0x14a2 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	11 97       	sbiw	r26, 0x01	; 1
    1488:	e8 0f       	add	r30, r24
    148a:	f9 1f       	adc	r31, r25
    148c:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    148e:	8d 91       	ld	r24, X+
    1490:	9c 91       	ld	r25, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	8f 73       	andi	r24, 0x3F	; 63
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	11 96       	adiw	r26, 0x01	; 1
    149c:	9c 93       	st	X, r25
    149e:	8e 93       	st	-X, r24
    return c;
    14a0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    14a2:	c9 01       	movw	r24, r18
    14a4:	08 95       	ret

000014a6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    14a6:	fc 01       	movw	r30, r24
    14a8:	86 85       	ldd	r24, Z+14	; 0x0e
    14aa:	97 85       	ldd	r25, Z+15	; 0x0f
    14ac:	dc 01       	movw	r26, r24
    14ae:	a0 5c       	subi	r26, 0xC0	; 192
    14b0:	bf 4f       	sbci	r27, 0xFF	; 255
    14b2:	fc 01       	movw	r30, r24
    14b4:	ee 5b       	subi	r30, 0xBE	; 190
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	2d 91       	ld	r18, X+
    14ba:	3c 91       	ld	r19, X
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	28 17       	cp	r18, r24
    14c4:	39 07       	cpc	r19, r25
    14c6:	c1 f7       	brne	.-16     	; 0x14b8 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    14c8:	08 95       	ret

000014ca <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    14d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    14d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    14d4:	e0 5c       	subi	r30, 0xC0	; 192
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	20 81       	ld	r18, Z
    14da:	31 81       	ldd	r19, Z+1	; 0x01
    14dc:	e0 54       	subi	r30, 0x40	; 64
    14de:	f0 40       	sbci	r31, 0x00	; 0
    14e0:	2f 5f       	subi	r18, 0xFF	; 255
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	2f 73       	andi	r18, 0x3F	; 63
    14e6:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    14e8:	df 01       	movw	r26, r30
    14ea:	ae 5b       	subi	r26, 0xBE	; 190
    14ec:	bf 4f       	sbci	r27, 0xFF	; 255
    14ee:	8d 91       	ld	r24, X+
    14f0:	9c 91       	ld	r25, X
    14f2:	11 97       	sbiw	r26, 0x01	; 1
    14f4:	28 17       	cp	r18, r24
    14f6:	39 07       	cpc	r19, r25
    14f8:	d1 f3       	breq	.-12     	; 0x14ee <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    14fa:	e0 5c       	subi	r30, 0xC0	; 192
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	e0 54       	subi	r30, 0x40	; 64
    1504:	f0 40       	sbci	r31, 0x00	; 0
    1506:	e8 0f       	add	r30, r24
    1508:	f9 1f       	adc	r31, r25
    150a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    150c:	ee 85       	ldd	r30, Y+14	; 0x0e
    150e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1510:	e0 5c       	subi	r30, 0xC0	; 192
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	31 83       	std	Z+1, r19	; 0x01
    1516:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1518:	ee 89       	ldd	r30, Y+22	; 0x16
    151a:	ff 89       	ldd	r31, Y+23	; 0x17
    151c:	20 81       	ld	r18, Z
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1524:	02 c0       	rjmp	.+4      	; 0x152a <_ZN14HardwareSerial5writeEh+0x60>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <_ZN14HardwareSerial5writeEh+0x5c>
    152e:	28 2b       	or	r18, r24
    1530:	20 83       	st	Z, r18
  
  return 1;
}
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    153c:	10 92 63 03 	sts	0x0363, r1
    1540:	10 92 62 03 	sts	0x0362, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1544:	88 ee       	ldi	r24, 0xE8	; 232
    1546:	93 e0       	ldi	r25, 0x03	; 3
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	80 93 64 03 	sts	0x0364, r24
    1550:	90 93 65 03 	sts	0x0365, r25
    1554:	a0 93 66 03 	sts	0x0366, r26
    1558:	b0 93 67 03 	sts	0x0367, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    155c:	82 e9       	ldi	r24, 0x92	; 146
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	90 93 61 03 	sts	0x0361, r25
    1564:	80 93 60 03 	sts	0x0360, r24
{
  _rx_buffer = rx_buffer;
    1568:	88 ed       	ldi	r24, 0xD8	; 216
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	90 93 6d 03 	sts	0x036D, r25
    1570:	80 93 6c 03 	sts	0x036C, r24
  _tx_buffer = tx_buffer;
    1574:	8c e1       	ldi	r24, 0x1C	; 28
    1576:	93 e0       	ldi	r25, 0x03	; 3
    1578:	90 93 6f 03 	sts	0x036F, r25
    157c:	80 93 6e 03 	sts	0x036E, r24
  _ubrrh = ubrrh;
    1580:	85 ec       	ldi	r24, 0xC5	; 197
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	90 93 71 03 	sts	0x0371, r25
    1588:	80 93 70 03 	sts	0x0370, r24
  _ubrrl = ubrrl;
    158c:	84 ec       	ldi	r24, 0xC4	; 196
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	90 93 73 03 	sts	0x0373, r25
    1594:	80 93 72 03 	sts	0x0372, r24
  _ucsra = ucsra;
    1598:	80 ec       	ldi	r24, 0xC0	; 192
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	90 93 75 03 	sts	0x0375, r25
    15a0:	80 93 74 03 	sts	0x0374, r24
  _ucsrb = ucsrb;
    15a4:	81 ec       	ldi	r24, 0xC1	; 193
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 77 03 	sts	0x0377, r25
    15ac:	80 93 76 03 	sts	0x0376, r24
  _udr = udr;
    15b0:	86 ec       	ldi	r24, 0xC6	; 198
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	90 93 79 03 	sts	0x0379, r25
    15b8:	80 93 78 03 	sts	0x0378, r24
  _rxen = rxen;
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	80 93 7a 03 	sts	0x037A, r24
  _txen = txen;
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	80 93 7b 03 	sts	0x037B, r24
  _rxcie = rxcie;
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	80 93 7c 03 	sts	0x037C, r24
  _udrie = udrie;
    15ce:	85 e0       	ldi	r24, 0x05	; 5
    15d0:	80 93 7d 03 	sts	0x037D, r24
  _u2x = u2x;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 7e 03 	sts	0x037E, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    15da:	08 95       	ret

000015dc <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	7c 01       	movw	r14, r24
    15ee:	6b 01       	movw	r12, r22
    15f0:	8a 01       	movw	r16, r20
    15f2:	c0 e0       	ldi	r28, 0x00	; 0
    15f4:	d0 e0       	ldi	r29, 0x00	; 0
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    15f8:	d6 01       	movw	r26, r12
    15fa:	6d 91       	ld	r22, X+
    15fc:	6d 01       	movw	r12, r26
    15fe:	d7 01       	movw	r26, r14
    1600:	ed 91       	ld	r30, X+
    1602:	fc 91       	ld	r31, X
    1604:	01 90       	ld	r0, Z+
    1606:	f0 81       	ld	r31, Z
    1608:	e0 2d       	mov	r30, r0
    160a:	c7 01       	movw	r24, r14
    160c:	09 95       	icall
    160e:	c8 0f       	add	r28, r24
    1610:	d9 1f       	adc	r29, r25
    1612:	01 50       	subi	r16, 0x01	; 1
    1614:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1616:	01 15       	cp	r16, r1
    1618:	11 05       	cpc	r17, r1
    161a:	71 f7       	brne	.-36     	; 0x15f8 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    161c:	ce 01       	movw	r24, r28
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	08 95       	ret

00001630 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1630:	dc 01       	movw	r26, r24
{
  return write(c);
    1632:	ed 91       	ld	r30, X+
    1634:	fc 91       	ld	r31, X
    1636:	01 90       	ld	r0, Z+
    1638:	f0 81       	ld	r31, Z
    163a:	e0 2d       	mov	r30, r0
    163c:	09 95       	icall
}
    163e:	08 95       	ret

00001640 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    164a:	dc 01       	movw	r26, r24
    164c:	ed 91       	ld	r30, X+
    164e:	fc 91       	ld	r31, X
    1650:	01 90       	ld	r0, Z+
    1652:	f0 81       	ld	r31, Z
    1654:	e0 2d       	mov	r30, r0
    1656:	6d e0       	ldi	r22, 0x0D	; 13
    1658:	09 95       	icall
    165a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    165c:	d8 01       	movw	r26, r16
    165e:	ed 91       	ld	r30, X+
    1660:	fc 91       	ld	r31, X
    1662:	01 90       	ld	r0, Z+
    1664:	f0 81       	ld	r31, Z
    1666:	e0 2d       	mov	r30, r0
    1668:	c8 01       	movw	r24, r16
    166a:	6a e0       	ldi	r22, 0x0A	; 10
    166c:	09 95       	icall
    166e:	9c 01       	movw	r18, r24
    1670:	2e 0d       	add	r18, r14
    1672:	3f 1d       	adc	r19, r15
    1674:	c9 01       	movw	r24, r18
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	08 95       	ret

00001680 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	db 01       	movw	r26, r22
    1686:	0d 90       	ld	r0, X+
    1688:	00 20       	and	r0, r0
    168a:	e9 f7       	brne	.-6      	; 0x1686 <_ZN5Print5writeEPKc+0x6>
    168c:	11 97       	sbiw	r26, 0x01	; 1
    168e:	a6 1b       	sub	r26, r22
    1690:	b7 0b       	sbc	r27, r23
    1692:	ec 01       	movw	r28, r24
    1694:	e8 81       	ld	r30, Y
    1696:	f9 81       	ldd	r31, Y+1	; 0x01
    1698:	02 80       	ldd	r0, Z+2	; 0x02
    169a:	f3 81       	ldd	r31, Z+3	; 0x03
    169c:	e0 2d       	mov	r30, r0
    169e:	ad 01       	movw	r20, r26
    16a0:	09 95       	icall
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    16a8:	4f 92       	push	r4
    16aa:	5f 92       	push	r5
    16ac:	7f 92       	push	r7
    16ae:	8f 92       	push	r8
    16b0:	9f 92       	push	r9
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	a1 97       	sbiw	r28, 0x21	; 33
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	2c 01       	movw	r4, r24
    16d8:	74 2e       	mov	r7, r20
    16da:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <_ZN5Print11printNumberEmh+0x3a>
    16e0:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    16e2:	19 a2       	std	Y+33, r1	; 0x21
    16e4:	31 e2       	ldi	r19, 0x21	; 33
    16e6:	c3 2e       	mov	r12, r19
    16e8:	d1 2c       	mov	r13, r1
    16ea:	cc 0e       	add	r12, r28
    16ec:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    16ee:	82 2e       	mov	r8, r18
    16f0:	99 24       	eor	r9, r9
    16f2:	aa 24       	eor	r10, r10
    16f4:	bb 24       	eor	r11, r11
    16f6:	67 2d       	mov	r22, r7
    16f8:	75 2f       	mov	r23, r21
    16fa:	a5 01       	movw	r20, r10
    16fc:	94 01       	movw	r18, r8
    16fe:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__udivmodsi4>
    1702:	79 01       	movw	r14, r18
    1704:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1706:	c8 01       	movw	r24, r16
    1708:	b7 01       	movw	r22, r14
    170a:	a5 01       	movw	r20, r10
    170c:	94 01       	movw	r18, r8
    170e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__mulsi3>
    1712:	47 2d       	mov	r20, r7
    1714:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1716:	08 94       	sec
    1718:	c1 08       	sbc	r12, r1
    171a:	d1 08       	sbc	r13, r1
    171c:	4a 30       	cpi	r20, 0x0A	; 10
    171e:	14 f4       	brge	.+4      	; 0x1724 <_ZN5Print11printNumberEmh+0x7c>
    1720:	40 5d       	subi	r20, 0xD0	; 208
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <_ZN5Print11printNumberEmh+0x7e>
    1724:	49 5c       	subi	r20, 0xC9	; 201
    1726:	f6 01       	movw	r30, r12
    1728:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    172a:	e1 14       	cp	r14, r1
    172c:	f1 04       	cpc	r15, r1
    172e:	01 05       	cpc	r16, r1
    1730:	11 05       	cpc	r17, r1
    1732:	21 f0       	breq	.+8      	; 0x173c <_ZN5Print11printNumberEmh+0x94>
    1734:	7e 2c       	mov	r7, r14
    1736:	5f 2d       	mov	r21, r15
    1738:	c8 01       	movw	r24, r16
    173a:	dd cf       	rjmp	.-70     	; 0x16f6 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    173c:	c2 01       	movw	r24, r4
    173e:	b6 01       	movw	r22, r12
    1740:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN5Print5writeEPKc>
}
    1744:	a1 96       	adiw	r28, 0x21	; 33
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	7f 90       	pop	r7
    176a:	5f 90       	pop	r5
    176c:	4f 90       	pop	r4
    176e:	08 95       	ret

00001770 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1770:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1772:	21 15       	cp	r18, r1
    1774:	31 05       	cpc	r19, r1
    1776:	41 f4       	brne	.+16     	; 0x1788 <_ZN5Print5printEmi+0x18>
    1778:	ed 91       	ld	r30, X+
    177a:	fc 91       	ld	r31, X
    177c:	01 90       	ld	r0, Z+
    177e:	f0 81       	ld	r31, Z
    1780:	e0 2d       	mov	r30, r0
    1782:	64 2f       	mov	r22, r20
    1784:	09 95       	icall
    1786:	08 95       	ret
  else return printNumber(n, base);
    1788:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN5Print11printNumberEmh>
}
    178c:	08 95       	ret

0000178e <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1798:	e6 2e       	mov	r14, r22
    179a:	ff 24       	eor	r15, r15
    179c:	00 e0       	ldi	r16, 0x00	; 0
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	b8 01       	movw	r22, r16
    17a2:	a7 01       	movw	r20, r14
    17a4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN5Print5printEmi>
}
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	08 95       	ret

000017b2 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	ec 01       	movw	r28, r24
    17c4:	6a 01       	movw	r12, r20
    17c6:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	41 f4       	brne	.+16     	; 0x17de <_ZN5Print5printEli+0x2c>
    return write(n);
    17ce:	e8 81       	ld	r30, Y
    17d0:	f9 81       	ldd	r31, Y+1	; 0x01
    17d2:	01 90       	ld	r0, Z+
    17d4:	f0 81       	ld	r31, Z
    17d6:	e0 2d       	mov	r30, r0
    17d8:	64 2f       	mov	r22, r20
    17da:	09 95       	icall
    17dc:	1f c0       	rjmp	.+62     	; 0x181c <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    17de:	2a 30       	cpi	r18, 0x0A	; 10
    17e0:	31 05       	cpc	r19, r1
    17e2:	d1 f4       	brne	.+52     	; 0x1818 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    17e4:	77 ff       	sbrs	r23, 7
    17e6:	17 c0       	rjmp	.+46     	; 0x1816 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    17e8:	e8 81       	ld	r30, Y
    17ea:	f9 81       	ldd	r31, Y+1	; 0x01
    17ec:	01 90       	ld	r0, Z+
    17ee:	f0 81       	ld	r31, Z
    17f0:	e0 2d       	mov	r30, r0
    17f2:	6d e2       	ldi	r22, 0x2D	; 45
    17f4:	09 95       	icall
    17f6:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    17f8:	44 27       	eor	r20, r20
    17fa:	55 27       	eor	r21, r21
    17fc:	ba 01       	movw	r22, r20
    17fe:	4c 19       	sub	r20, r12
    1800:	5d 09       	sbc	r21, r13
    1802:	6e 09       	sbc	r22, r14
    1804:	7f 09       	sbc	r23, r15
    1806:	ce 01       	movw	r24, r28
    1808:	2a e0       	ldi	r18, 0x0A	; 10
    180a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN5Print11printNumberEmh>
    180e:	98 01       	movw	r18, r16
    1810:	28 0f       	add	r18, r24
    1812:	39 1f       	adc	r19, r25
    1814:	04 c0       	rjmp	.+8      	; 0x181e <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1816:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1818:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN5Print11printNumberEmh>
    181c:	9c 01       	movw	r18, r24
  }
}
    181e:	c9 01       	movw	r24, r18
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	08 95       	ret

00001832 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	7b 01       	movw	r14, r22
    183c:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    183e:	00 27       	eor	r16, r16
    1840:	f7 fc       	sbrc	r15, 7
    1842:	00 95       	com	r16
    1844:	10 2f       	mov	r17, r16
    1846:	b8 01       	movw	r22, r16
    1848:	a7 01       	movw	r20, r14
    184a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN5Print5printEli>
}
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	08 95       	ret

00001858 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1858:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN5Print5writeEPKc>
}
    185c:	08 95       	ret

0000185e <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1868:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN5Print5writeEPKc>
    186c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    186e:	c7 01       	movw	r24, r14
    1870:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN5Print7printlnEv>
    1874:	08 0f       	add	r16, r24
    1876:	19 1f       	adc	r17, r25
  return n;
}
    1878:	c8 01       	movw	r24, r16
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	08 95       	ret

00001884 <main>:
#include <Arduino.h>

int main(void)
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
{
	init();
    1888:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    188c:	0e 94 ce 08 	call	0x119c	; 0x119c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1890:	c5 e2       	ldi	r28, 0x25	; 37
    1892:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1894:	0e 94 b8 08 	call	0x1170	; 0x1170 <loop>
		if (serialEventRun) serialEventRun();
    1898:	20 97       	sbiw	r28, 0x00	; 0
    189a:	e1 f3       	breq	.-8      	; 0x1894 <main+0x10>
    189c:	0e 94 25 09 	call	0x124a	; 0x124a <_Z14serialEventRunv>
    18a0:	f9 cf       	rjmp	.-14     	; 0x1894 <main+0x10>

000018a2 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    18a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <malloc>
}
    18a6:	08 95       	ret

000018a8 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    18a8:	1f 92       	push	r1
    18aa:	0f 92       	push	r0
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	0f 92       	push	r0
    18b0:	11 24       	eor	r1, r1
    18b2:	2f 93       	push	r18
    18b4:	3f 93       	push	r19
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    18be:	80 91 83 03 	lds	r24, 0x0383
    18c2:	90 91 84 03 	lds	r25, 0x0384
    18c6:	a0 91 85 03 	lds	r26, 0x0385
    18ca:	b0 91 86 03 	lds	r27, 0x0386
	unsigned char f = timer0_fract;
    18ce:	30 91 87 03 	lds	r19, 0x0387

	m += MILLIS_INC;
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	a1 1d       	adc	r26, r1
    18d6:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    18d8:	23 2f       	mov	r18, r19
    18da:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    18dc:	2d 37       	cpi	r18, 0x7D	; 125
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <__vector_16+0x40>
		f -= FRACT_MAX;
    18e0:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	a1 1d       	adc	r26, r1
    18e6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    18e8:	20 93 87 03 	sts	0x0387, r18
	timer0_millis = m;
    18ec:	80 93 83 03 	sts	0x0383, r24
    18f0:	90 93 84 03 	sts	0x0384, r25
    18f4:	a0 93 85 03 	sts	0x0385, r26
    18f8:	b0 93 86 03 	sts	0x0386, r27
	timer0_overflow_count++;
    18fc:	80 91 7f 03 	lds	r24, 0x037F
    1900:	90 91 80 03 	lds	r25, 0x0380
    1904:	a0 91 81 03 	lds	r26, 0x0381
    1908:	b0 91 82 03 	lds	r27, 0x0382
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	a1 1d       	adc	r26, r1
    1910:	b1 1d       	adc	r27, r1
    1912:	80 93 7f 03 	sts	0x037F, r24
    1916:	90 93 80 03 	sts	0x0380, r25
    191a:	a0 93 81 03 	sts	0x0381, r26
    191e:	b0 93 82 03 	sts	0x0382, r27
}
    1922:	bf 91       	pop	r27
    1924:	af 91       	pop	r26
    1926:	9f 91       	pop	r25
    1928:	8f 91       	pop	r24
    192a:	3f 91       	pop	r19
    192c:	2f 91       	pop	r18
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1938:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    193a:	f8 94       	cli
	m = timer0_millis;
    193c:	20 91 83 03 	lds	r18, 0x0383
    1940:	30 91 84 03 	lds	r19, 0x0384
    1944:	40 91 85 03 	lds	r20, 0x0385
    1948:	50 91 86 03 	lds	r21, 0x0386
	SREG = oldSREG;
    194c:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    194e:	b9 01       	movw	r22, r18
    1950:	ca 01       	movw	r24, r20
    1952:	08 95       	ret

00001954 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1958:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    195a:	f8 94       	cli
	m = timer0_overflow_count;
    195c:	80 91 7f 03 	lds	r24, 0x037F
    1960:	90 91 80 03 	lds	r25, 0x0380
    1964:	a0 91 81 03 	lds	r26, 0x0381
    1968:	b0 91 82 03 	lds	r27, 0x0382
#if defined(TCNT0)
	t = TCNT0;
    196c:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    196e:	a8 9b       	sbis	0x15, 0	; 21
    1970:	05 c0       	rjmp	.+10     	; 0x197c <delay+0x28>
    1972:	6f 3f       	cpi	r22, 0xFF	; 255
    1974:	19 f0       	breq	.+6      	; 0x197c <delay+0x28>
		m++;
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	a1 1d       	adc	r26, r1
    197a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    197c:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    197e:	ba 2f       	mov	r27, r26
    1980:	a9 2f       	mov	r26, r25
    1982:	98 2f       	mov	r25, r24
    1984:	88 27       	eor	r24, r24
    1986:	86 0f       	add	r24, r22
    1988:	91 1d       	adc	r25, r1
    198a:	a1 1d       	adc	r26, r1
    198c:	b1 1d       	adc	r27, r1
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	aa 1f       	adc	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	6a 95       	dec	r22
    199a:	d1 f7       	brne	.-12     	; 0x1990 <delay+0x3c>
    199c:	bc 01       	movw	r22, r24
    199e:	2d c0       	rjmp	.+90     	; 0x19fa <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    19a0:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    19a2:	f8 94       	cli
	m = timer0_overflow_count;
    19a4:	80 91 7f 03 	lds	r24, 0x037F
    19a8:	90 91 80 03 	lds	r25, 0x0380
    19ac:	a0 91 81 03 	lds	r26, 0x0381
    19b0:	b0 91 82 03 	lds	r27, 0x0382
#if defined(TCNT0)
	t = TCNT0;
    19b4:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    19b6:	a8 9b       	sbis	0x15, 0	; 21
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <delay+0x70>
    19ba:	ef 3f       	cpi	r30, 0xFF	; 255
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <delay+0x70>
		m++;
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	a1 1d       	adc	r26, r1
    19c2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    19c4:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    19c6:	ba 2f       	mov	r27, r26
    19c8:	a9 2f       	mov	r26, r25
    19ca:	98 2f       	mov	r25, r24
    19cc:	88 27       	eor	r24, r24
    19ce:	8e 0f       	add	r24, r30
    19d0:	91 1d       	adc	r25, r1
    19d2:	a1 1d       	adc	r26, r1
    19d4:	b1 1d       	adc	r27, r1
    19d6:	e2 e0       	ldi	r30, 0x02	; 2
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	aa 1f       	adc	r26, r26
    19de:	bb 1f       	adc	r27, r27
    19e0:	ea 95       	dec	r30
    19e2:	d1 f7       	brne	.-12     	; 0x19d8 <delay+0x84>
    19e4:	86 1b       	sub	r24, r22
    19e6:	97 0b       	sbc	r25, r23
    19e8:	88 5e       	subi	r24, 0xE8	; 232
    19ea:	93 40       	sbci	r25, 0x03	; 3
    19ec:	c8 f2       	brcs	.-78     	; 0x19a0 <delay+0x4c>
			ms--;
    19ee:	21 50       	subi	r18, 0x01	; 1
    19f0:	30 40       	sbci	r19, 0x00	; 0
    19f2:	40 40       	sbci	r20, 0x00	; 0
    19f4:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    19f6:	68 51       	subi	r22, 0x18	; 24
    19f8:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    19fa:	21 15       	cp	r18, r1
    19fc:	31 05       	cpc	r19, r1
    19fe:	41 05       	cpc	r20, r1
    1a00:	51 05       	cpc	r21, r1
    1a02:	71 f6       	brne	.-100    	; 0x19a0 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1a04:	08 95       	ret

00001a06 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	39 f0       	breq	.+14     	; 0x1a18 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1a12:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <delayMicroseconds+0xe>
    1a18:	08 95       	ret

00001a1a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a1a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a1c:	84 b5       	in	r24, 0x24	; 36
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a22:	84 b5       	in	r24, 0x24	; 36
    1a24:	81 60       	ori	r24, 0x01	; 1
    1a26:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a28:	85 b5       	in	r24, 0x25	; 37
    1a2a:	82 60       	ori	r24, 0x02	; 2
    1a2c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a2e:	85 b5       	in	r24, 0x25	; 37
    1a30:	81 60       	ori	r24, 0x01	; 1
    1a32:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a34:	ee e6       	ldi	r30, 0x6E	; 110
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	81 60       	ori	r24, 0x01	; 1
    1a3c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a3e:	e1 e8       	ldi	r30, 0x81	; 129
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a44:	80 81       	ld	r24, Z
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 60       	ori	r24, 0x01	; 1
    1a4e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a50:	e0 e8       	ldi	r30, 0x80	; 128
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	81 60       	ori	r24, 0x01	; 1
    1a58:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a5a:	e1 eb       	ldi	r30, 0xB1	; 177
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	84 60       	ori	r24, 0x04	; 4
    1a62:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1a64:	e0 eb       	ldi	r30, 0xB0	; 176
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	81 60       	ori	r24, 0x01	; 1
    1a6c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1a6e:	ea e7       	ldi	r30, 0x7A	; 122
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	84 60       	ori	r24, 0x04	; 4
    1a76:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1a78:	80 81       	ld	r24, Z
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 60       	ori	r24, 0x01	; 1
    1a82:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1a84:	80 81       	ld	r24, Z
    1a86:	80 68       	ori	r24, 0x80	; 128
    1a88:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a8a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1a8e:	08 95       	ret

00001a90 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1a94:	48 2f       	mov	r20, r24
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	ca 01       	movw	r24, r20
    1a9a:	86 5d       	subi	r24, 0xD6	; 214
    1a9c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    1aa2:	4a 5e       	subi	r20, 0xEA	; 234
    1aa4:	5e 4f       	sbci	r21, 0xFE	; 254
    1aa6:	fa 01       	movw	r30, r20
    1aa8:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1aaa:	88 23       	and	r24, r24
    1aac:	69 f1       	breq	.+90     	; 0x1b08 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e8 50       	subi	r30, 0x08	; 8
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	a5 91       	lpm	r26, Z+
    1abc:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    1abe:	fc 01       	movw	r30, r24
    1ac0:	ee 5f       	subi	r30, 0xFE	; 254
    1ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac4:	c5 91       	lpm	r28, Z+
    1ac6:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    1ac8:	66 23       	and	r22, r22
    1aca:	51 f4       	brne	.+20     	; 0x1ae0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1acc:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1ace:	f8 94       	cli
		*reg &= ~bit;
    1ad0:	8c 91       	ld	r24, X
    1ad2:	93 2f       	mov	r25, r19
    1ad4:	90 95       	com	r25
    1ad6:	89 23       	and	r24, r25
    1ad8:	8c 93       	st	X, r24
		*out &= ~bit;
    1ada:	88 81       	ld	r24, Y
    1adc:	89 23       	and	r24, r25
    1ade:	0b c0       	rjmp	.+22     	; 0x1af6 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1ae0:	62 30       	cpi	r22, 0x02	; 2
    1ae2:	61 f4       	brne	.+24     	; 0x1afc <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1ae4:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1ae6:	f8 94       	cli
		*reg &= ~bit;
    1ae8:	8c 91       	ld	r24, X
    1aea:	93 2f       	mov	r25, r19
    1aec:	90 95       	com	r25
    1aee:	89 23       	and	r24, r25
    1af0:	8c 93       	st	X, r24
		*out |= bit;
    1af2:	88 81       	ld	r24, Y
    1af4:	83 2b       	or	r24, r19
    1af6:	88 83       	st	Y, r24
		SREG = oldSREG;
    1af8:	2f bf       	out	0x3f, r18	; 63
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1afc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1afe:	f8 94       	cli
		*reg |= bit;
    1b00:	8c 91       	ld	r24, X
    1b02:	83 2b       	or	r24, r19
    1b04:	8c 93       	st	X, r24
		SREG = oldSREG;
    1b06:	9f bf       	out	0x3f, r25	; 63
	}
}
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1b0e:	48 2f       	mov	r20, r24
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	ca 01       	movw	r24, r20
    1b14:	82 5c       	subi	r24, 0xC2	; 194
    1b16:	9e 4f       	sbci	r25, 0xFE	; 254
    1b18:	fc 01       	movw	r30, r24
    1b1a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	86 5d       	subi	r24, 0xD6	; 214
    1b20:	9e 4f       	sbci	r25, 0xFE	; 254
    1b22:	fc 01       	movw	r30, r24
    1b24:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1b26:	4a 5e       	subi	r20, 0xEA	; 234
    1b28:	5e 4f       	sbci	r21, 0xFE	; 254
    1b2a:	fa 01       	movw	r30, r20
    1b2c:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b2e:	33 23       	and	r19, r19
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <digitalWrite+0x26>
    1b32:	40 c0       	rjmp	.+128    	; 0x1bb4 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b34:	22 23       	and	r18, r18
    1b36:	51 f1       	breq	.+84     	; 0x1b8c <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b38:	23 30       	cpi	r18, 0x03	; 3
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <digitalWrite+0x4a>
    1b3c:	24 30       	cpi	r18, 0x04	; 4
    1b3e:	28 f4       	brcc	.+10     	; 0x1b4a <digitalWrite+0x3c>
    1b40:	21 30       	cpi	r18, 0x01	; 1
    1b42:	a1 f0       	breq	.+40     	; 0x1b6c <digitalWrite+0x5e>
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	11 f5       	brne	.+68     	; 0x1b8c <digitalWrite+0x7e>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <digitalWrite+0x64>
    1b4a:	26 30       	cpi	r18, 0x06	; 6
    1b4c:	b1 f0       	breq	.+44     	; 0x1b7a <digitalWrite+0x6c>
    1b4e:	27 30       	cpi	r18, 0x07	; 7
    1b50:	c1 f0       	breq	.+48     	; 0x1b82 <digitalWrite+0x74>
    1b52:	24 30       	cpi	r18, 0x04	; 4
    1b54:	d9 f4       	brne	.+54     	; 0x1b8c <digitalWrite+0x7e>
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b58:	80 91 80 00 	lds	r24, 0x0080
    1b5c:	8f 77       	andi	r24, 0x7F	; 127
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b60:	80 91 80 00 	lds	r24, 0x0080
    1b64:	8f 7d       	andi	r24, 0xDF	; 223
    1b66:	80 93 80 00 	sts	0x0080, r24
    1b6a:	10 c0       	rjmp	.+32     	; 0x1b8c <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b6c:	84 b5       	in	r24, 0x24	; 36
    1b6e:	8f 77       	andi	r24, 0x7F	; 127
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b72:	84 b5       	in	r24, 0x24	; 36
    1b74:	8f 7d       	andi	r24, 0xDF	; 223
    1b76:	84 bd       	out	0x24, r24	; 36
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b7a:	80 91 b0 00 	lds	r24, 0x00B0
    1b7e:	8f 77       	andi	r24, 0x7F	; 127
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b82:	80 91 b0 00 	lds	r24, 0x00B0
    1b86:	8f 7d       	andi	r24, 0xDF	; 223
    1b88:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1b8c:	e3 2f       	mov	r30, r19
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	ee 5f       	subi	r30, 0xFE	; 254
    1b96:	fe 4f       	sbci	r31, 0xFE	; 254
    1b98:	a5 91       	lpm	r26, Z+
    1b9a:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1b9c:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1b9e:	f8 94       	cli

	if (val == LOW) {
    1ba0:	66 23       	and	r22, r22
    1ba2:	21 f4       	brne	.+8      	; 0x1bac <digitalWrite+0x9e>
		*out &= ~bit;
    1ba4:	8c 91       	ld	r24, X
    1ba6:	90 95       	com	r25
    1ba8:	89 23       	and	r24, r25
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1bac:	8c 91       	ld	r24, X
    1bae:	89 2b       	or	r24, r25
    1bb0:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1bb2:	2f bf       	out	0x3f, r18	; 63
    1bb4:	08 95       	ret

00001bb6 <__mulsi3>:
    1bb6:	62 9f       	mul	r22, r18
    1bb8:	d0 01       	movw	r26, r0
    1bba:	73 9f       	mul	r23, r19
    1bbc:	f0 01       	movw	r30, r0
    1bbe:	82 9f       	mul	r24, r18
    1bc0:	e0 0d       	add	r30, r0
    1bc2:	f1 1d       	adc	r31, r1
    1bc4:	64 9f       	mul	r22, r20
    1bc6:	e0 0d       	add	r30, r0
    1bc8:	f1 1d       	adc	r31, r1
    1bca:	92 9f       	mul	r25, r18
    1bcc:	f0 0d       	add	r31, r0
    1bce:	83 9f       	mul	r24, r19
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	74 9f       	mul	r23, r20
    1bd4:	f0 0d       	add	r31, r0
    1bd6:	65 9f       	mul	r22, r21
    1bd8:	f0 0d       	add	r31, r0
    1bda:	99 27       	eor	r25, r25
    1bdc:	72 9f       	mul	r23, r18
    1bde:	b0 0d       	add	r27, r0
    1be0:	e1 1d       	adc	r30, r1
    1be2:	f9 1f       	adc	r31, r25
    1be4:	63 9f       	mul	r22, r19
    1be6:	b0 0d       	add	r27, r0
    1be8:	e1 1d       	adc	r30, r1
    1bea:	f9 1f       	adc	r31, r25
    1bec:	bd 01       	movw	r22, r26
    1bee:	cf 01       	movw	r24, r30
    1bf0:	11 24       	eor	r1, r1
    1bf2:	08 95       	ret

00001bf4 <__divmodhi4>:
    1bf4:	97 fb       	bst	r25, 7
    1bf6:	09 2e       	mov	r0, r25
    1bf8:	07 26       	eor	r0, r23
    1bfa:	0a d0       	rcall	.+20     	; 0x1c10 <__divmodhi4_neg1>
    1bfc:	77 fd       	sbrc	r23, 7
    1bfe:	04 d0       	rcall	.+8      	; 0x1c08 <__divmodhi4_neg2>
    1c00:	2e d0       	rcall	.+92     	; 0x1c5e <__udivmodhi4>
    1c02:	06 d0       	rcall	.+12     	; 0x1c10 <__divmodhi4_neg1>
    1c04:	00 20       	and	r0, r0
    1c06:	1a f4       	brpl	.+6      	; 0x1c0e <__divmodhi4_exit>

00001c08 <__divmodhi4_neg2>:
    1c08:	70 95       	com	r23
    1c0a:	61 95       	neg	r22
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255

00001c0e <__divmodhi4_exit>:
    1c0e:	08 95       	ret

00001c10 <__divmodhi4_neg1>:
    1c10:	f6 f7       	brtc	.-4      	; 0x1c0e <__divmodhi4_exit>
    1c12:	90 95       	com	r25
    1c14:	81 95       	neg	r24
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	08 95       	ret

00001c1a <__udivmodsi4>:
    1c1a:	a1 e2       	ldi	r26, 0x21	; 33
    1c1c:	1a 2e       	mov	r1, r26
    1c1e:	aa 1b       	sub	r26, r26
    1c20:	bb 1b       	sub	r27, r27
    1c22:	fd 01       	movw	r30, r26
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <__udivmodsi4_ep>

00001c26 <__udivmodsi4_loop>:
    1c26:	aa 1f       	adc	r26, r26
    1c28:	bb 1f       	adc	r27, r27
    1c2a:	ee 1f       	adc	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	a2 17       	cp	r26, r18
    1c30:	b3 07       	cpc	r27, r19
    1c32:	e4 07       	cpc	r30, r20
    1c34:	f5 07       	cpc	r31, r21
    1c36:	20 f0       	brcs	.+8      	; 0x1c40 <__udivmodsi4_ep>
    1c38:	a2 1b       	sub	r26, r18
    1c3a:	b3 0b       	sbc	r27, r19
    1c3c:	e4 0b       	sbc	r30, r20
    1c3e:	f5 0b       	sbc	r31, r21

00001c40 <__udivmodsi4_ep>:
    1c40:	66 1f       	adc	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	88 1f       	adc	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	1a 94       	dec	r1
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <__udivmodsi4_loop>
    1c4c:	60 95       	com	r22
    1c4e:	70 95       	com	r23
    1c50:	80 95       	com	r24
    1c52:	90 95       	com	r25
    1c54:	9b 01       	movw	r18, r22
    1c56:	ac 01       	movw	r20, r24
    1c58:	bd 01       	movw	r22, r26
    1c5a:	cf 01       	movw	r24, r30
    1c5c:	08 95       	ret

00001c5e <__udivmodhi4>:
    1c5e:	aa 1b       	sub	r26, r26
    1c60:	bb 1b       	sub	r27, r27
    1c62:	51 e1       	ldi	r21, 0x11	; 17
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <__udivmodhi4_ep>

00001c66 <__udivmodhi4_loop>:
    1c66:	aa 1f       	adc	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	a6 17       	cp	r26, r22
    1c6c:	b7 07       	cpc	r27, r23
    1c6e:	10 f0       	brcs	.+4      	; 0x1c74 <__udivmodhi4_ep>
    1c70:	a6 1b       	sub	r26, r22
    1c72:	b7 0b       	sbc	r27, r23

00001c74 <__udivmodhi4_ep>:
    1c74:	88 1f       	adc	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	5a 95       	dec	r21
    1c7a:	a9 f7       	brne	.-22     	; 0x1c66 <__udivmodhi4_loop>
    1c7c:	80 95       	com	r24
    1c7e:	90 95       	com	r25
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	08 95       	ret

00001c86 <__tablejump2__>:
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31

00001c8a <__tablejump__>:
    1c8a:	05 90       	lpm	r0, Z+
    1c8c:	f4 91       	lpm	r31, Z+
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	09 94       	ijmp

00001c92 <_exit>:
    1c92:	f8 94       	cli

00001c94 <__stop_program>:
    1c94:	ff cf       	rjmp	.-2      	; 0x1c94 <__stop_program>
