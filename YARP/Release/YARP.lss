
YARP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  000025ca  0000265e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020d  008001a4  008001a4  00002702  2**0
                  ALLOC
  3 .debug_aranges 00000920  00000000  00000000  00002702  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001812  00000000  00000000  00003022  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ba81  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022c8  00000000  00000000  000102b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000051d3  00000000  00000000  0001257d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001060  00000000  00000000  00017750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a26  00000000  00000000  000187b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000058e2  00000000  00000000  0001b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000968  00000000  00000000  00020ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    SREG = oldSREG;
    return true;
  }

  return false;
}
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
  if( ServoCount < MAX_SERVOS) {
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
	errorFunc = 0;
	init();
}
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	usservo.write(SERVO_RIGHT);
}
void setServoLeft() {
	usservo.write(SERVO_LEFT);
}
void setServoTo(int angle) {
       c:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_3>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      10:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_4>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      14:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_5>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
}
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_18>
      4c:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	b9 07       	cpc	r27, r25
      c4:	3a 0c       	add	r3, r10

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea ec       	ldi	r30, 0xCA	; 202
      da:	f5 e2       	ldi	r31, 0x25	; 37
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
      e2:	a4 3a       	cpi	r26, 0xA4	; 164
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
      e8:	13 e0       	ldi	r17, 0x03	; 3
      ea:	a4 ea       	ldi	r26, 0xA4	; 164
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a1 3b       	cpi	r26, 0xB1	; 177
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 a8 12 	call	0x2550	; 0x2550 <__tablejump__>

00000108 <.do_global_ctors_start>:
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
     10e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <main>
     112:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <malloc>:
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	bc 01       	movw	r22, r24
     120:	82 30       	cpi	r24, 0x02	; 2
     122:	91 05       	cpc	r25, r1
     124:	10 f4       	brcc	.+4      	; 0x12a <malloc+0x10>
     126:	62 e0       	ldi	r22, 0x02	; 2
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	a0 91 af 03 	lds	r26, 0x03AF
     12e:	b0 91 b0 03 	lds	r27, 0x03B0
     132:	ed 01       	movw	r28, r26
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 c0       	rjmp	.+66     	; 0x180 <malloc+0x66>
     13e:	88 81       	ld	r24, Y
     140:	99 81       	ldd	r25, Y+1	; 0x01
     142:	86 17       	cp	r24, r22
     144:	97 07       	cpc	r25, r23
     146:	69 f4       	brne	.+26     	; 0x162 <malloc+0x48>
     148:	8a 81       	ldd	r24, Y+2	; 0x02
     14a:	9b 81       	ldd	r25, Y+3	; 0x03
     14c:	30 97       	sbiw	r30, 0x00	; 0
     14e:	19 f0       	breq	.+6      	; 0x156 <malloc+0x3c>
     150:	93 83       	std	Z+3, r25	; 0x03
     152:	82 83       	std	Z+2, r24	; 0x02
     154:	04 c0       	rjmp	.+8      	; 0x15e <malloc+0x44>
     156:	90 93 b0 03 	sts	0x03B0, r25
     15a:	80 93 af 03 	sts	0x03AF, r24
     15e:	fe 01       	movw	r30, r28
     160:	34 c0       	rjmp	.+104    	; 0x1ca <malloc+0xb0>
     162:	68 17       	cp	r22, r24
     164:	79 07       	cpc	r23, r25
     166:	38 f4       	brcc	.+14     	; 0x176 <malloc+0x5c>
     168:	41 15       	cp	r20, r1
     16a:	51 05       	cpc	r21, r1
     16c:	19 f0       	breq	.+6      	; 0x174 <malloc+0x5a>
     16e:	84 17       	cp	r24, r20
     170:	95 07       	cpc	r25, r21
     172:	08 f4       	brcc	.+2      	; 0x176 <malloc+0x5c>
     174:	ac 01       	movw	r20, r24
     176:	fe 01       	movw	r30, r28
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	9b 81       	ldd	r25, Y+3	; 0x03
     17c:	9c 01       	movw	r18, r24
     17e:	e9 01       	movw	r28, r18
     180:	20 97       	sbiw	r28, 0x00	; 0
     182:	e9 f6       	brne	.-70     	; 0x13e <malloc+0x24>
     184:	41 15       	cp	r20, r1
     186:	51 05       	cpc	r21, r1
     188:	a9 f1       	breq	.+106    	; 0x1f4 <malloc+0xda>
     18a:	ca 01       	movw	r24, r20
     18c:	86 1b       	sub	r24, r22
     18e:	97 0b       	sbc	r25, r23
     190:	04 97       	sbiw	r24, 0x04	; 4
     192:	08 f4       	brcc	.+2      	; 0x196 <malloc+0x7c>
     194:	ba 01       	movw	r22, r20
     196:	e0 e0       	ldi	r30, 0x00	; 0
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	2a c0       	rjmp	.+84     	; 0x1f0 <malloc+0xd6>
     19c:	8d 91       	ld	r24, X+
     19e:	9c 91       	ld	r25, X
     1a0:	11 97       	sbiw	r26, 0x01	; 1
     1a2:	84 17       	cp	r24, r20
     1a4:	95 07       	cpc	r25, r21
     1a6:	f9 f4       	brne	.+62     	; 0x1e6 <malloc+0xcc>
     1a8:	64 17       	cp	r22, r20
     1aa:	75 07       	cpc	r23, r21
     1ac:	81 f4       	brne	.+32     	; 0x1ce <malloc+0xb4>
     1ae:	12 96       	adiw	r26, 0x02	; 2
     1b0:	8d 91       	ld	r24, X+
     1b2:	9c 91       	ld	r25, X
     1b4:	13 97       	sbiw	r26, 0x03	; 3
     1b6:	30 97       	sbiw	r30, 0x00	; 0
     1b8:	19 f0       	breq	.+6      	; 0x1c0 <malloc+0xa6>
     1ba:	93 83       	std	Z+3, r25	; 0x03
     1bc:	82 83       	std	Z+2, r24	; 0x02
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <malloc+0xae>
     1c0:	90 93 b0 03 	sts	0x03B0, r25
     1c4:	80 93 af 03 	sts	0x03AF, r24
     1c8:	fd 01       	movw	r30, r26
     1ca:	32 96       	adiw	r30, 0x02	; 2
     1cc:	4c c0       	rjmp	.+152    	; 0x266 <malloc+0x14c>
     1ce:	ca 01       	movw	r24, r20
     1d0:	86 1b       	sub	r24, r22
     1d2:	97 0b       	sbc	r25, r23
     1d4:	fd 01       	movw	r30, r26
     1d6:	e8 0f       	add	r30, r24
     1d8:	f9 1f       	adc	r31, r25
     1da:	61 93       	st	Z+, r22
     1dc:	71 93       	st	Z+, r23
     1de:	02 97       	sbiw	r24, 0x02	; 2
     1e0:	8d 93       	st	X+, r24
     1e2:	9c 93       	st	X, r25
     1e4:	40 c0       	rjmp	.+128    	; 0x266 <malloc+0x14c>
     1e6:	fd 01       	movw	r30, r26
     1e8:	82 81       	ldd	r24, Z+2	; 0x02
     1ea:	93 81       	ldd	r25, Z+3	; 0x03
     1ec:	9c 01       	movw	r18, r24
     1ee:	d9 01       	movw	r26, r18
     1f0:	10 97       	sbiw	r26, 0x00	; 0
     1f2:	a1 f6       	brne	.-88     	; 0x19c <malloc+0x82>
     1f4:	80 91 ad 03 	lds	r24, 0x03AD
     1f8:	90 91 ae 03 	lds	r25, 0x03AE
     1fc:	89 2b       	or	r24, r25
     1fe:	41 f4       	brne	.+16     	; 0x210 <malloc+0xf6>
     200:	80 91 72 01 	lds	r24, 0x0172
     204:	90 91 73 01 	lds	r25, 0x0173
     208:	90 93 ae 03 	sts	0x03AE, r25
     20c:	80 93 ad 03 	sts	0x03AD, r24
     210:	40 91 74 01 	lds	r20, 0x0174
     214:	50 91 75 01 	lds	r21, 0x0175
     218:	41 15       	cp	r20, r1
     21a:	51 05       	cpc	r21, r1
     21c:	41 f4       	brne	.+16     	; 0x22e <malloc+0x114>
     21e:	4d b7       	in	r20, 0x3d	; 61
     220:	5e b7       	in	r21, 0x3e	; 62
     222:	80 91 70 01 	lds	r24, 0x0170
     226:	90 91 71 01 	lds	r25, 0x0171
     22a:	48 1b       	sub	r20, r24
     22c:	59 0b       	sbc	r21, r25
     22e:	20 91 ad 03 	lds	r18, 0x03AD
     232:	30 91 ae 03 	lds	r19, 0x03AE
     236:	ca 01       	movw	r24, r20
     238:	82 1b       	sub	r24, r18
     23a:	93 0b       	sbc	r25, r19
     23c:	86 17       	cp	r24, r22
     23e:	97 07       	cpc	r25, r23
     240:	80 f0       	brcs	.+32     	; 0x262 <malloc+0x148>
     242:	ab 01       	movw	r20, r22
     244:	4e 5f       	subi	r20, 0xFE	; 254
     246:	5f 4f       	sbci	r21, 0xFF	; 255
     248:	84 17       	cp	r24, r20
     24a:	95 07       	cpc	r25, r21
     24c:	50 f0       	brcs	.+20     	; 0x262 <malloc+0x148>
     24e:	42 0f       	add	r20, r18
     250:	53 1f       	adc	r21, r19
     252:	50 93 ae 03 	sts	0x03AE, r21
     256:	40 93 ad 03 	sts	0x03AD, r20
     25a:	f9 01       	movw	r30, r18
     25c:	61 93       	st	Z+, r22
     25e:	71 93       	st	Z+, r23
     260:	02 c0       	rjmp	.+4      	; 0x266 <malloc+0x14c>
     262:	e0 e0       	ldi	r30, 0x00	; 0
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	cf 01       	movw	r24, r30
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <free>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	00 97       	sbiw	r24, 0x00	; 0
     274:	09 f4       	brne	.+2      	; 0x278 <free+0xa>
     276:	50 c0       	rjmp	.+160    	; 0x318 <free+0xaa>
     278:	ec 01       	movw	r28, r24
     27a:	22 97       	sbiw	r28, 0x02	; 2
     27c:	1b 82       	std	Y+3, r1	; 0x03
     27e:	1a 82       	std	Y+2, r1	; 0x02
     280:	a0 91 af 03 	lds	r26, 0x03AF
     284:	b0 91 b0 03 	lds	r27, 0x03B0
     288:	10 97       	sbiw	r26, 0x00	; 0
     28a:	09 f1       	breq	.+66     	; 0x2ce <free+0x60>
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	ac 17       	cp	r26, r28
     292:	bd 07       	cpc	r27, r29
     294:	08 f1       	brcs	.+66     	; 0x2d8 <free+0x6a>
     296:	bb 83       	std	Y+3, r27	; 0x03
     298:	aa 83       	std	Y+2, r26	; 0x02
     29a:	fe 01       	movw	r30, r28
     29c:	21 91       	ld	r18, Z+
     29e:	31 91       	ld	r19, Z+
     2a0:	e2 0f       	add	r30, r18
     2a2:	f3 1f       	adc	r31, r19
     2a4:	ae 17       	cp	r26, r30
     2a6:	bf 07       	cpc	r27, r31
     2a8:	79 f4       	brne	.+30     	; 0x2c8 <free+0x5a>
     2aa:	8d 91       	ld	r24, X+
     2ac:	9c 91       	ld	r25, X
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	28 0f       	add	r18, r24
     2b2:	39 1f       	adc	r19, r25
     2b4:	2e 5f       	subi	r18, 0xFE	; 254
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	39 83       	std	Y+1, r19	; 0x01
     2ba:	28 83       	st	Y, r18
     2bc:	12 96       	adiw	r26, 0x02	; 2
     2be:	8d 91       	ld	r24, X+
     2c0:	9c 91       	ld	r25, X
     2c2:	13 97       	sbiw	r26, 0x03	; 3
     2c4:	9b 83       	std	Y+3, r25	; 0x03
     2c6:	8a 83       	std	Y+2, r24	; 0x02
     2c8:	41 15       	cp	r20, r1
     2ca:	51 05       	cpc	r21, r1
     2cc:	71 f4       	brne	.+28     	; 0x2ea <free+0x7c>
     2ce:	d0 93 b0 03 	sts	0x03B0, r29
     2d2:	c0 93 af 03 	sts	0x03AF, r28
     2d6:	20 c0       	rjmp	.+64     	; 0x318 <free+0xaa>
     2d8:	12 96       	adiw	r26, 0x02	; 2
     2da:	8d 91       	ld	r24, X+
     2dc:	9c 91       	ld	r25, X
     2de:	13 97       	sbiw	r26, 0x03	; 3
     2e0:	ad 01       	movw	r20, r26
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	11 f0       	breq	.+4      	; 0x2ea <free+0x7c>
     2e6:	dc 01       	movw	r26, r24
     2e8:	d3 cf       	rjmp	.-90     	; 0x290 <free+0x22>
     2ea:	fa 01       	movw	r30, r20
     2ec:	d3 83       	std	Z+3, r29	; 0x03
     2ee:	c2 83       	std	Z+2, r28	; 0x02
     2f0:	21 91       	ld	r18, Z+
     2f2:	31 91       	ld	r19, Z+
     2f4:	e2 0f       	add	r30, r18
     2f6:	f3 1f       	adc	r31, r19
     2f8:	ce 17       	cp	r28, r30
     2fa:	df 07       	cpc	r29, r31
     2fc:	69 f4       	brne	.+26     	; 0x318 <free+0xaa>
     2fe:	88 81       	ld	r24, Y
     300:	99 81       	ldd	r25, Y+1	; 0x01
     302:	28 0f       	add	r18, r24
     304:	39 1f       	adc	r19, r25
     306:	2e 5f       	subi	r18, 0xFE	; 254
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	fa 01       	movw	r30, r20
     30c:	31 83       	std	Z+1, r19	; 0x01
     30e:	20 83       	st	Z, r18
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	9b 81       	ldd	r25, Y+3	; 0x03
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <realloc>:
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e5 e9       	ldi	r30, 0x95	; 149
     324:	f1 e0       	ldi	r31, 0x01	; 1
     326:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__+0x4>
     32a:	6c 01       	movw	r12, r24
     32c:	00 97       	sbiw	r24, 0x00	; 0
     32e:	29 f4       	brne	.+10     	; 0x33a <realloc+0x1c>
     330:	cb 01       	movw	r24, r22
     332:	0e 94 8d 00 	call	0x11a	; 0x11a <malloc>
     336:	6c 01       	movw	r12, r24
     338:	c1 c0       	rjmp	.+386    	; 0x4bc <realloc+0x19e>
     33a:	8e ef       	ldi	r24, 0xFE	; 254
     33c:	88 2e       	mov	r8, r24
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	98 2e       	mov	r9, r24
     342:	8c 0c       	add	r8, r12
     344:	9d 1c       	adc	r9, r13
     346:	86 01       	movw	r16, r12
     348:	06 0f       	add	r16, r22
     34a:	17 1f       	adc	r17, r23
     34c:	08 15       	cp	r16, r8
     34e:	19 05       	cpc	r17, r9
     350:	08 f4       	brcc	.+2      	; 0x354 <realloc+0x36>
     352:	b2 c0       	rjmp	.+356    	; 0x4b8 <realloc+0x19a>
     354:	f4 01       	movw	r30, r8
     356:	a0 81       	ld	r26, Z
     358:	b1 81       	ldd	r27, Z+1	; 0x01
     35a:	a6 17       	cp	r26, r22
     35c:	b7 07       	cpc	r27, r23
     35e:	b8 f0       	brcs	.+46     	; 0x38e <realloc+0x70>
     360:	a5 30       	cpi	r26, 0x05	; 5
     362:	b1 05       	cpc	r27, r1
     364:	08 f4       	brcc	.+2      	; 0x368 <realloc+0x4a>
     366:	aa c0       	rjmp	.+340    	; 0x4bc <realloc+0x19e>
     368:	cd 01       	movw	r24, r26
     36a:	04 97       	sbiw	r24, 0x04	; 4
     36c:	86 17       	cp	r24, r22
     36e:	97 07       	cpc	r25, r23
     370:	08 f4       	brcc	.+2      	; 0x374 <realloc+0x56>
     372:	a4 c0       	rjmp	.+328    	; 0x4bc <realloc+0x19e>
     374:	12 97       	sbiw	r26, 0x02	; 2
     376:	a6 1b       	sub	r26, r22
     378:	b7 0b       	sbc	r27, r23
     37a:	f8 01       	movw	r30, r16
     37c:	a1 93       	st	Z+, r26
     37e:	b1 93       	st	Z+, r27
     380:	d4 01       	movw	r26, r8
     382:	6d 93       	st	X+, r22
     384:	7c 93       	st	X, r23
     386:	cf 01       	movw	r24, r30
     388:	0e 94 37 01 	call	0x26e	; 0x26e <free>
     38c:	97 c0       	rjmp	.+302    	; 0x4bc <realloc+0x19e>
     38e:	7b 01       	movw	r14, r22
     390:	ea 1a       	sub	r14, r26
     392:	fb 0a       	sbc	r15, r27
     394:	ee ef       	ldi	r30, 0xFE	; 254
     396:	ff ef       	ldi	r31, 0xFF	; 255
     398:	ee 0e       	add	r14, r30
     39a:	ff 1e       	adc	r15, r31
     39c:	36 01       	movw	r6, r12
     39e:	6a 0e       	add	r6, r26
     3a0:	7b 1e       	adc	r7, r27
     3a2:	c0 91 af 03 	lds	r28, 0x03AF
     3a6:	d0 91 b0 03 	lds	r29, 0x03B0
     3aa:	44 24       	eor	r4, r4
     3ac:	55 24       	eor	r5, r5
     3ae:	aa 24       	eor	r10, r10
     3b0:	bb 24       	eor	r11, r11
     3b2:	4a c0       	rjmp	.+148    	; 0x448 <realloc+0x12a>
     3b4:	c6 15       	cp	r28, r6
     3b6:	d7 05       	cpc	r29, r7
     3b8:	e1 f5       	brne	.+120    	; 0x432 <realloc+0x114>
     3ba:	48 81       	ld	r20, Y
     3bc:	59 81       	ldd	r21, Y+1	; 0x01
     3be:	4e 15       	cp	r20, r14
     3c0:	5f 05       	cpc	r21, r15
     3c2:	b8 f1       	brcs	.+110    	; 0x432 <realloc+0x114>
     3c4:	ca 01       	movw	r24, r20
     3c6:	04 97       	sbiw	r24, 0x04	; 4
     3c8:	8e 15       	cp	r24, r14
     3ca:	9f 05       	cpc	r25, r15
     3cc:	b0 f4       	brcc	.+44     	; 0x3fa <realloc+0xdc>
     3ce:	12 96       	adiw	r26, 0x02	; 2
     3d0:	a4 0f       	add	r26, r20
     3d2:	b5 1f       	adc	r27, r21
     3d4:	f4 01       	movw	r30, r8
     3d6:	b1 83       	std	Z+1, r27	; 0x01
     3d8:	a0 83       	st	Z, r26
     3da:	2a 81       	ldd	r18, Y+2	; 0x02
     3dc:	3b 81       	ldd	r19, Y+3	; 0x03
     3de:	41 14       	cp	r4, r1
     3e0:	51 04       	cpc	r5, r1
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <realloc+0xd2>
     3e4:	d2 01       	movw	r26, r4
     3e6:	13 96       	adiw	r26, 0x03	; 3
     3e8:	3c 93       	st	X, r19
     3ea:	2e 93       	st	-X, r18
     3ec:	12 97       	sbiw	r26, 0x02	; 2
     3ee:	66 c0       	rjmp	.+204    	; 0x4bc <realloc+0x19e>
     3f0:	30 93 b0 03 	sts	0x03B0, r19
     3f4:	20 93 af 03 	sts	0x03AF, r18
     3f8:	61 c0       	rjmp	.+194    	; 0x4bc <realloc+0x19e>
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	9b 81       	ldd	r25, Y+3	; 0x03
     3fe:	f8 01       	movw	r30, r16
     400:	93 83       	std	Z+3, r25	; 0x03
     402:	82 83       	std	Z+2, r24	; 0x02
     404:	42 50       	subi	r20, 0x02	; 2
     406:	50 40       	sbci	r21, 0x00	; 0
     408:	4e 19       	sub	r20, r14
     40a:	5f 09       	sbc	r21, r15
     40c:	51 83       	std	Z+1, r21	; 0x01
     40e:	40 83       	st	Z, r20
     410:	41 14       	cp	r4, r1
     412:	51 04       	cpc	r5, r1
     414:	31 f0       	breq	.+12     	; 0x422 <realloc+0x104>
     416:	d2 01       	movw	r26, r4
     418:	13 96       	adiw	r26, 0x03	; 3
     41a:	1c 93       	st	X, r17
     41c:	0e 93       	st	-X, r16
     41e:	12 97       	sbiw	r26, 0x02	; 2
     420:	04 c0       	rjmp	.+8      	; 0x42a <realloc+0x10c>
     422:	10 93 b0 03 	sts	0x03B0, r17
     426:	00 93 af 03 	sts	0x03AF, r16
     42a:	f4 01       	movw	r30, r8
     42c:	71 83       	std	Z+1, r23	; 0x01
     42e:	60 83       	st	Z, r22
     430:	45 c0       	rjmp	.+138    	; 0x4bc <realloc+0x19e>
     432:	88 81       	ld	r24, Y
     434:	99 81       	ldd	r25, Y+1	; 0x01
     436:	a8 16       	cp	r10, r24
     438:	b9 06       	cpc	r11, r25
     43a:	08 f4       	brcc	.+2      	; 0x43e <realloc+0x120>
     43c:	5c 01       	movw	r10, r24
     43e:	2e 01       	movw	r4, r28
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	9b 81       	ldd	r25, Y+3	; 0x03
     444:	9c 01       	movw	r18, r24
     446:	e9 01       	movw	r28, r18
     448:	20 97       	sbiw	r28, 0x00	; 0
     44a:	09 f0       	breq	.+2      	; 0x44e <realloc+0x130>
     44c:	b3 cf       	rjmp	.-154    	; 0x3b4 <realloc+0x96>
     44e:	80 91 ad 03 	lds	r24, 0x03AD
     452:	90 91 ae 03 	lds	r25, 0x03AE
     456:	86 15       	cp	r24, r6
     458:	97 05       	cpc	r25, r7
     45a:	e9 f4       	brne	.+58     	; 0x496 <realloc+0x178>
     45c:	a6 16       	cp	r10, r22
     45e:	b7 06       	cpc	r11, r23
     460:	d0 f4       	brcc	.+52     	; 0x496 <realloc+0x178>
     462:	20 91 74 01 	lds	r18, 0x0174
     466:	30 91 75 01 	lds	r19, 0x0175
     46a:	21 15       	cp	r18, r1
     46c:	31 05       	cpc	r19, r1
     46e:	41 f4       	brne	.+16     	; 0x480 <realloc+0x162>
     470:	2d b7       	in	r18, 0x3d	; 61
     472:	3e b7       	in	r19, 0x3e	; 62
     474:	80 91 70 01 	lds	r24, 0x0170
     478:	90 91 71 01 	lds	r25, 0x0171
     47c:	28 1b       	sub	r18, r24
     47e:	39 0b       	sbc	r19, r25
     480:	02 17       	cp	r16, r18
     482:	13 07       	cpc	r17, r19
     484:	c8 f4       	brcc	.+50     	; 0x4b8 <realloc+0x19a>
     486:	10 93 ae 03 	sts	0x03AE, r17
     48a:	00 93 ad 03 	sts	0x03AD, r16
     48e:	d4 01       	movw	r26, r8
     490:	6d 93       	st	X+, r22
     492:	7c 93       	st	X, r23
     494:	13 c0       	rjmp	.+38     	; 0x4bc <realloc+0x19e>
     496:	cb 01       	movw	r24, r22
     498:	0e 94 8d 00 	call	0x11a	; 0x11a <malloc>
     49c:	ec 01       	movw	r28, r24
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	59 f0       	breq	.+22     	; 0x4b8 <realloc+0x19a>
     4a2:	f4 01       	movw	r30, r8
     4a4:	40 81       	ld	r20, Z
     4a6:	51 81       	ldd	r21, Z+1	; 0x01
     4a8:	b6 01       	movw	r22, r12
     4aa:	0e 94 82 02 	call	0x504	; 0x504 <memcpy>
     4ae:	c6 01       	movw	r24, r12
     4b0:	0e 94 37 01 	call	0x26e	; 0x26e <free>
     4b4:	6e 01       	movw	r12, r28
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <realloc+0x19e>
     4b8:	cc 24       	eor	r12, r12
     4ba:	dd 24       	eor	r13, r13
     4bc:	c6 01       	movw	r24, r12
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	e0 e1       	ldi	r30, 0x10	; 16
     4c4:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__+0x4>

000004c8 <atoi>:
     4c8:	fc 01       	movw	r30, r24
     4ca:	88 27       	eor	r24, r24
     4cc:	99 27       	eor	r25, r25
     4ce:	e8 94       	clt
     4d0:	21 91       	ld	r18, Z+
     4d2:	20 32       	cpi	r18, 0x20	; 32
     4d4:	e9 f3       	breq	.-6      	; 0x4d0 <atoi+0x8>
     4d6:	29 30       	cpi	r18, 0x09	; 9
     4d8:	10 f0       	brcs	.+4      	; 0x4de <atoi+0x16>
     4da:	2e 30       	cpi	r18, 0x0E	; 14
     4dc:	c8 f3       	brcs	.-14     	; 0x4d0 <atoi+0x8>
     4de:	2b 32       	cpi	r18, 0x2B	; 43
     4e0:	41 f0       	breq	.+16     	; 0x4f2 <atoi+0x2a>
     4e2:	2d 32       	cpi	r18, 0x2D	; 45
     4e4:	39 f4       	brne	.+14     	; 0x4f4 <atoi+0x2c>
     4e6:	68 94       	set
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <atoi+0x2a>
     4ea:	0e 94 c2 02 	call	0x584	; 0x584 <__mulhi_const_10>
     4ee:	82 0f       	add	r24, r18
     4f0:	91 1d       	adc	r25, r1
     4f2:	21 91       	ld	r18, Z+
     4f4:	20 53       	subi	r18, 0x30	; 48
     4f6:	2a 30       	cpi	r18, 0x0A	; 10
     4f8:	c0 f3       	brcs	.-16     	; 0x4ea <atoi+0x22>
     4fa:	1e f4       	brtc	.+6      	; 0x502 <atoi+0x3a>
     4fc:	90 95       	com	r25
     4fe:	81 95       	neg	r24
     500:	9f 4f       	sbci	r25, 0xFF	; 255
     502:	08 95       	ret

00000504 <memcpy>:
     504:	fb 01       	movw	r30, r22
     506:	dc 01       	movw	r26, r24
     508:	02 c0       	rjmp	.+4      	; 0x50e <memcpy+0xa>
     50a:	01 90       	ld	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	41 50       	subi	r20, 0x01	; 1
     510:	50 40       	sbci	r21, 0x00	; 0
     512:	d8 f7       	brcc	.-10     	; 0x50a <memcpy+0x6>
     514:	08 95       	ret

00000516 <strcpy>:
     516:	fb 01       	movw	r30, r22
     518:	dc 01       	movw	r26, r24
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	00 20       	and	r0, r0
     520:	e1 f7       	brne	.-8      	; 0x51a <strcpy+0x4>
     522:	08 95       	ret

00000524 <strncpy>:
     524:	fb 01       	movw	r30, r22
     526:	dc 01       	movw	r26, r24
     528:	41 50       	subi	r20, 0x01	; 1
     52a:	50 40       	sbci	r21, 0x00	; 0
     52c:	48 f0       	brcs	.+18     	; 0x540 <strncpy+0x1c>
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	00 20       	and	r0, r0
     534:	c9 f7       	brne	.-14     	; 0x528 <strncpy+0x4>
     536:	01 c0       	rjmp	.+2      	; 0x53a <strncpy+0x16>
     538:	1d 92       	st	X+, r1
     53a:	41 50       	subi	r20, 0x01	; 1
     53c:	50 40       	sbci	r21, 0x00	; 0
     53e:	e0 f7       	brcc	.-8      	; 0x538 <strncpy+0x14>
     540:	08 95       	ret

00000542 <itoa>:
     542:	fb 01       	movw	r30, r22
     544:	9f 01       	movw	r18, r30
     546:	e8 94       	clt
     548:	42 30       	cpi	r20, 0x02	; 2
     54a:	c4 f0       	brlt	.+48     	; 0x57c <itoa+0x3a>
     54c:	45 32       	cpi	r20, 0x25	; 37
     54e:	b4 f4       	brge	.+44     	; 0x57c <itoa+0x3a>
     550:	4a 30       	cpi	r20, 0x0A	; 10
     552:	29 f4       	brne	.+10     	; 0x55e <itoa+0x1c>
     554:	97 fb       	bst	r25, 7
     556:	1e f4       	brtc	.+6      	; 0x55e <itoa+0x1c>
     558:	90 95       	com	r25
     55a:	81 95       	neg	r24
     55c:	9f 4f       	sbci	r25, 0xFF	; 255
     55e:	64 2f       	mov	r22, r20
     560:	77 27       	eor	r23, r23
     562:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodhi4>
     566:	80 5d       	subi	r24, 0xD0	; 208
     568:	8a 33       	cpi	r24, 0x3A	; 58
     56a:	0c f0       	brlt	.+2      	; 0x56e <itoa+0x2c>
     56c:	89 5d       	subi	r24, 0xD9	; 217
     56e:	81 93       	st	Z+, r24
     570:	cb 01       	movw	r24, r22
     572:	00 97       	sbiw	r24, 0x00	; 0
     574:	a1 f7       	brne	.-24     	; 0x55e <itoa+0x1c>
     576:	16 f4       	brtc	.+4      	; 0x57c <itoa+0x3a>
     578:	5d e2       	ldi	r21, 0x2D	; 45
     57a:	51 93       	st	Z+, r21
     57c:	10 82       	st	Z, r1
     57e:	c9 01       	movw	r24, r18
     580:	0c 94 ca 02 	jmp	0x594	; 0x594 <strrev>

00000584 <__mulhi_const_10>:
     584:	7a e0       	ldi	r23, 0x0A	; 10
     586:	97 9f       	mul	r25, r23
     588:	90 2d       	mov	r25, r0
     58a:	87 9f       	mul	r24, r23
     58c:	80 2d       	mov	r24, r0
     58e:	91 0d       	add	r25, r1
     590:	11 24       	eor	r1, r1
     592:	08 95       	ret

00000594 <strrev>:
     594:	dc 01       	movw	r26, r24
     596:	fc 01       	movw	r30, r24
     598:	67 2f       	mov	r22, r23
     59a:	71 91       	ld	r23, Z+
     59c:	77 23       	and	r23, r23
     59e:	e1 f7       	brne	.-8      	; 0x598 <strrev+0x4>
     5a0:	32 97       	sbiw	r30, 0x02	; 2
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <strrev+0x18>
     5a4:	7c 91       	ld	r23, X
     5a6:	6d 93       	st	X+, r22
     5a8:	70 83       	st	Z, r23
     5aa:	62 91       	ld	r22, -Z
     5ac:	ae 17       	cp	r26, r30
     5ae:	bf 07       	cpc	r27, r31
     5b0:	c8 f3       	brcs	.-14     	; 0x5a4 <strrev+0x10>
     5b2:	08 95       	ret

000005b4 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	fc 01       	movw	r30, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5be:	73 8d       	ldd	r23, Z+27	; 0x1b
     5c0:	76 95       	lsr	r23
     5c2:	71 70       	andi	r23, 0x01	; 1
     5c4:	a6 85       	ldd	r26, Z+14	; 0x0e
     5c6:	b7 85       	ldd	r27, Z+15	; 0x0f
     5c8:	95 85       	ldd	r25, Z+13	; 0x0d
     5ca:	77 23       	and	r23, r23
     5cc:	29 f0       	breq	.+10     	; 0x5d8 <_ZN14SoftwareSerial4recvEv+0x24>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5ce:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5d0:	89 23       	and	r24, r25
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <_ZN14SoftwareSerial4recvEv+0x22>
     5d4:	54 c0       	rjmp	.+168    	; 0x67e <_ZN14SoftwareSerial4recvEv+0xca>
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <_ZN14SoftwareSerial4recvEv+0x2c>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5d8:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5da:	89 23       	and	r24, r25
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <_ZN14SoftwareSerial4recvEv+0x2c>
     5de:	4f c0       	rjmp	.+158    	; 0x67e <_ZN14SoftwareSerial4recvEv+0xca>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     5e0:	83 89       	ldd	r24, Z+19	; 0x13
     5e2:	94 89       	ldd	r25, Z+20	; 0x14
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	2f ef       	ldi	r18, 0xFF	; 255
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	92 07       	cpc	r25, r18
     5ee:	d9 f7       	brne	.-10     	; 0x5e6 <_ZN14SoftwareSerial4recvEv+0x32>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
     5f0:	c5 89       	ldd	r28, Z+21	; 0x15
     5f2:	d6 89       	ldd	r29, Z+22	; 0x16
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5f4:	a6 85       	ldd	r26, Z+14	; 0x0e
     5f6:	b7 85       	ldd	r27, Z+15	; 0x0f
     5f8:	15 85       	ldd	r17, Z+13	; 0x0d
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	31 e0       	ldi	r19, 0x01	; 1
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     602:	00 e0       	ldi	r16, 0x00	; 0
     604:	ce 01       	movw	r24, r28
     606:	20 2f       	mov	r18, r16
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	2f ef       	ldi	r18, 0xFF	; 255
     60c:	8f 3f       	cpi	r24, 0xFF	; 255
     60e:	92 07       	cpc	r25, r18
     610:	d9 f7       	brne	.-10     	; 0x608 <_ZN14SoftwareSerial4recvEv+0x54>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     612:	8c 91       	ld	r24, X
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     614:	81 23       	and	r24, r17
     616:	11 f0       	breq	.+4      	; 0x61c <_ZN14SoftwareSerial4recvEv+0x68>
        d |= i;
     618:	63 2b       	or	r22, r19
     61a:	03 c0       	rjmp	.+6      	; 0x622 <_ZN14SoftwareSerial4recvEv+0x6e>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     61c:	83 2f       	mov	r24, r19
     61e:	80 95       	com	r24
     620:	68 23       	and	r22, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     622:	33 0f       	add	r19, r19
     624:	4f 5f       	subi	r20, 0xFF	; 255
     626:	5f 4f       	sbci	r21, 0xFF	; 255
     628:	48 30       	cpi	r20, 0x08	; 8
     62a:	51 05       	cpc	r21, r1
     62c:	59 f7       	brne	.-42     	; 0x604 <_ZN14SoftwareSerial4recvEv+0x50>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     62e:	87 89       	ldd	r24, Z+23	; 0x17
     630:	90 8d       	ldd	r25, Z+24	; 0x18
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	8f 3f       	cpi	r24, 0xFF	; 255
     63a:	92 07       	cpc	r25, r18
     63c:	d9 f7       	brne	.-10     	; 0x634 <_ZN14SoftwareSerial4recvEv+0x80>

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     63e:	71 11       	cpse	r23, r1
      d = ~d;
     640:	60 95       	com	r22

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     642:	80 91 e6 01 	lds	r24, 0x01E6
     646:	20 91 e7 01 	lds	r18, 0x01E7
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	8f 73       	andi	r24, 0x3F	; 63
     650:	90 70       	andi	r25, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	82 17       	cp	r24, r18
     656:	93 07       	cpc	r25, r19
     658:	79 f0       	breq	.+30     	; 0x678 <_ZN14SoftwareSerial4recvEv+0xc4>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     65a:	e0 91 e6 01 	lds	r30, 0x01E6
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	ea 55       	subi	r30, 0x5A	; 90
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	60 83       	st	Z, r22
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     666:	80 91 e6 01 	lds	r24, 0x01E6
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	8f 73       	andi	r24, 0x3F	; 63
     670:	90 70       	andi	r25, 0x00	; 0
     672:	80 93 e6 01 	sts	0x01E6, r24
     676:	03 c0       	rjmp	.+6      	; 0x67e <_ZN14SoftwareSerial4recvEv+0xca>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     678:	83 8d       	ldd	r24, Z+27	; 0x1b
     67a:	81 60       	ori	r24, 0x01	; 1
     67c:	83 8f       	std	Z+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <__vector_3>:
    active_object->recv();
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     6aa:	80 91 a4 01 	lds	r24, 0x01A4
     6ae:	90 91 a5 01 	lds	r25, 0x01A5
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	11 f0       	breq	.+4      	; 0x6ba <__vector_3+0x32>
  {
    active_object->recv();
     6b6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	bf 91       	pop	r27
     6c0:	af 91       	pop	r26
     6c2:	9f 91       	pop	r25
     6c4:	8f 91       	pop	r24
     6c6:	7f 91       	pop	r23
     6c8:	6f 91       	pop	r22
     6ca:	5f 91       	pop	r21
     6cc:	4f 91       	pop	r20
     6ce:	3f 91       	pop	r19
     6d0:	2f 91       	pop	r18
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	2f 93       	push	r18
     6e8:	3f 93       	push	r19
     6ea:	4f 93       	push	r20
     6ec:	5f 93       	push	r21
     6ee:	6f 93       	push	r22
     6f0:	7f 93       	push	r23
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     6fe:	80 91 a4 01 	lds	r24, 0x01A4
     702:	90 91 a5 01 	lds	r25, 0x01A5
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	11 f0       	breq	.+4      	; 0x70e <__vector_4+0x32>
  {
    active_object->recv();
     70a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
  SoftwareSerial::handle_interrupt();
}
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	2f 93       	push	r18
     73c:	3f 93       	push	r19
     73e:	4f 93       	push	r20
     740:	5f 93       	push	r21
     742:	6f 93       	push	r22
     744:	7f 93       	push	r23
     746:	8f 93       	push	r24
     748:	9f 93       	push	r25
     74a:	af 93       	push	r26
     74c:	bf 93       	push	r27
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     752:	80 91 a4 01 	lds	r24, 0x01A4
     756:	90 91 a5 01 	lds	r25, 0x01A5
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	11 f0       	breq	.+4      	; 0x762 <__vector_5+0x32>
  {
    active_object->recv();
     75e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
  SoftwareSerial::handle_interrupt();
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
     784:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
     786:	80 91 e8 01 	lds	r24, 0x01E8
     78a:	8c 30       	cpi	r24, 0x0C	; 12
     78c:	90 f4       	brcc	.+36     	; 0x7b2 <_ZN5ServoC1Ev+0x2e>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
     78e:	80 83       	st	Z, r24
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	80 93 e8 01 	sts	0x01E8, r24
     796:	81 50       	subi	r24, 0x01	; 1
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	fc 01       	movw	r30, r24
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e8 0f       	add	r30, r24
     7a2:	f9 1f       	adc	r31, r25
     7a4:	e7 51       	subi	r30, 0x17	; 23
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	88 eb       	ldi	r24, 0xB8	; 184
     7aa:	9b e0       	ldi	r25, 0x0B	; 11
     7ac:	92 83       	std	Z+2, r25	; 0x02
     7ae:	81 83       	std	Z+1, r24	; 0x01
     7b0:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	80 83       	st	Z, r24
     7b6:	08 95       	ret

000007b8 <_ZN5Servo17writeMicrosecondsEi>:
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
     7b8:	fc 01       	movw	r30, r24
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     7ba:	20 81       	ld	r18, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     7bc:	2c 30       	cpi	r18, 0x0C	; 12
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <_ZN5Servo17writeMicrosecondsEi+0xa>
     7c0:	41 c0       	rjmp	.+130    	; 0x844 <_ZN5Servo17writeMicrosecondsEi+0x8c>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     7c2:	81 81       	ldd	r24, Z+1	; 0x01
     7c4:	99 27       	eor	r25, r25
     7c6:	87 fd       	sbrc	r24, 7
     7c8:	90 95       	com	r25
     7ca:	48 e8       	ldi	r20, 0x88	; 136
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	48 1b       	sub	r20, r24
     7d0:	59 0b       	sbc	r21, r25
     7d2:	44 0f       	add	r20, r20
     7d4:	55 1f       	adc	r21, r21
     7d6:	44 0f       	add	r20, r20
     7d8:	55 1f       	adc	r21, r21
     7da:	64 17       	cp	r22, r20
     7dc:	75 07       	cpc	r23, r21
     7de:	84 f0       	brlt	.+32     	; 0x800 <_ZN5Servo17writeMicrosecondsEi+0x48>
     7e0:	82 81       	ldd	r24, Z+2	; 0x02
     7e2:	99 27       	eor	r25, r25
     7e4:	87 fd       	sbrc	r24, 7
     7e6:	90 95       	com	r25
     7e8:	48 e5       	ldi	r20, 0x58	; 88
     7ea:	52 e0       	ldi	r21, 0x02	; 2
     7ec:	48 1b       	sub	r20, r24
     7ee:	59 0b       	sbc	r21, r25
     7f0:	44 0f       	add	r20, r20
     7f2:	55 1f       	adc	r21, r21
     7f4:	44 0f       	add	r20, r20
     7f6:	55 1f       	adc	r21, r21
     7f8:	64 17       	cp	r22, r20
     7fa:	75 07       	cpc	r23, r21
     7fc:	0c f4       	brge	.+2      	; 0x800 <_ZN5Servo17writeMicrosecondsEi+0x48>
     7fe:	ab 01       	movw	r20, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     800:	42 50       	subi	r20, 0x02	; 2
     802:	50 40       	sbci	r21, 0x00	; 0
     804:	ca 01       	movw	r24, r20
     806:	aa 27       	eor	r26, r26
     808:	97 fd       	sbrc	r25, 7
     80a:	a0 95       	com	r26
     80c:	ba 2f       	mov	r27, r26
     80e:	74 e0       	ldi	r23, 0x04	; 4
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	aa 1f       	adc	r26, r26
     816:	bb 1f       	adc	r27, r27
     818:	7a 95       	dec	r23
     81a:	d1 f7       	brne	.-12     	; 0x810 <_ZN5Servo17writeMicrosecondsEi+0x58>
     81c:	63 e0       	ldi	r22, 0x03	; 3
     81e:	b6 95       	lsr	r27
     820:	a7 95       	ror	r26
     822:	97 95       	ror	r25
     824:	87 95       	ror	r24
     826:	6a 95       	dec	r22
     828:	d1 f7       	brne	.-12     	; 0x81e <_ZN5Servo17writeMicrosecondsEi+0x66>

    uint8_t oldSREG = SREG;
     82a:	4f b7       	in	r20, 0x3f	; 63
    cli();
     82c:	f8 94       	cli
    servos[channel].ticks = value;  
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	e2 0f       	add	r30, r18
     838:	f3 1f       	adc	r31, r19
     83a:	e7 51       	subi	r30, 0x17	; 23
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	92 83       	std	Z+2, r25	; 0x02
     840:	81 83       	std	Z+1, r24	; 0x01
    SREG = oldSREG;   
     842:	4f bf       	out	0x3f, r20	; 63
     844:	08 95       	ret

00000846 <_ZN5Servo5writeEi>:
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	9b 01       	movw	r18, r22
{  
  if(value < MIN_PULSE_WIDTH)
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	60 32       	cpi	r22, 0x20	; 32
     862:	78 07       	cpc	r23, r24
     864:	0c f0       	brlt	.+2      	; 0x868 <_ZN5Servo5writeEi+0x22>
     866:	48 c0       	rjmp	.+144    	; 0x8f8 <_ZN5Servo5writeEi+0xb2>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     868:	77 ff       	sbrs	r23, 7
     86a:	03 c0       	rjmp	.+6      	; 0x872 <_ZN5Servo5writeEi+0x2c>
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	05 c0       	rjmp	.+10     	; 0x87c <_ZN5Servo5writeEi+0x36>
    if(value > 180) value = 180;
     872:	65 3b       	cpi	r22, 0xB5	; 181
     874:	71 05       	cpc	r23, r1
     876:	14 f0       	brlt	.+4      	; 0x87c <_ZN5Servo5writeEi+0x36>
     878:	24 eb       	ldi	r18, 0xB4	; 180
     87a:	30 e0       	ldi	r19, 0x00	; 0
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
     87c:	00 d0       	rcall	.+0      	; 0x87e <_ZN5Servo5writeEi+0x38>
     87e:	00 d0       	rcall	.+0      	; 0x880 <_ZN5Servo5writeEi+0x3a>
     880:	b9 01       	movw	r22, r18
     882:	88 27       	eor	r24, r24
     884:	77 fd       	sbrc	r23, 7
     886:	80 95       	com	r24
     888:	98 2f       	mov	r25, r24
     88a:	29 81       	ldd	r18, Y+1	; 0x01
     88c:	33 27       	eor	r19, r19
     88e:	27 fd       	sbrc	r18, 7
     890:	30 95       	com	r19
     892:	e8 e8       	ldi	r30, 0x88	; 136
     894:	ae 2e       	mov	r10, r30
     896:	b1 2c       	mov	r11, r1
     898:	a2 1a       	sub	r10, r18
     89a:	b3 0a       	sbc	r11, r19
     89c:	aa 0c       	add	r10, r10
     89e:	bb 1c       	adc	r11, r11
     8a0:	aa 0c       	add	r10, r10
     8a2:	bb 1c       	adc	r11, r11
     8a4:	cc 24       	eor	r12, r12
     8a6:	b7 fc       	sbrc	r11, 7
     8a8:	c0 94       	com	r12
     8aa:	dc 2c       	mov	r13, r12
     8ac:	ea 81       	ldd	r30, Y+2	; 0x02
     8ae:	ff 27       	eor	r31, r31
     8b0:	e7 fd       	sbrc	r30, 7
     8b2:	f0 95       	com	r31
     8b4:	28 e5       	ldi	r18, 0x58	; 88
     8b6:	32 e0       	ldi	r19, 0x02	; 2
     8b8:	2e 1b       	sub	r18, r30
     8ba:	3f 0b       	sbc	r19, r31
     8bc:	22 0f       	add	r18, r18
     8be:	33 1f       	adc	r19, r19
     8c0:	22 0f       	add	r18, r18
     8c2:	33 1f       	adc	r19, r19
     8c4:	44 27       	eor	r20, r20
     8c6:	37 fd       	sbrc	r19, 7
     8c8:	40 95       	com	r20
     8ca:	54 2f       	mov	r21, r20
     8cc:	ed b7       	in	r30, 0x3d	; 61
     8ce:	fe b7       	in	r31, 0x3e	; 62
     8d0:	21 83       	std	Z+1, r18	; 0x01
     8d2:	32 83       	std	Z+2, r19	; 0x02
     8d4:	43 83       	std	Z+3, r20	; 0x03
     8d6:	54 83       	std	Z+4, r21	; 0x04
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	04 eb       	ldi	r16, 0xB4	; 180
     8e2:	e0 2e       	mov	r14, r16
     8e4:	f1 2c       	mov	r15, r1
     8e6:	01 2d       	mov	r16, r1
     8e8:	11 2d       	mov	r17, r1
     8ea:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_Z3maplllll>
     8ee:	9b 01       	movw	r18, r22
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
     8f8:	ce 01       	movw	r24, r28
     8fa:	b9 01       	movw	r22, r18
     8fc:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN5Servo17writeMicrosecondsEi>
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	af 90       	pop	r10
     914:	08 95       	ret

00000916 <_ZN5Servo6attachEiii>:
uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	16 2f       	mov	r17, r22
     928:	7a 01       	movw	r14, r20
     92a:	69 01       	movw	r12, r18
{
  if(this->servoIndex < MAX_SERVOS ) {
     92c:	88 81       	ld	r24, Y
     92e:	8c 30       	cpi	r24, 0x0C	; 12
     930:	08 f0       	brcs	.+2      	; 0x934 <_ZN5Servo6attachEiii+0x1e>
     932:	64 c0       	rjmp	.+200    	; 0x9fc <_ZN5Servo6attachEiii+0xe6>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     934:	86 2f       	mov	r24, r22
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	0e 94 95 10 	call	0x212a	; 0x212a <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
     93c:	88 81       	ld	r24, Y
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	e8 0f       	add	r30, r24
     948:	f9 1f       	adc	r31, r25
     94a:	e7 51       	subi	r30, 0x17	; 23
     94c:	fe 4f       	sbci	r31, 0xFE	; 254
     94e:	1f 73       	andi	r17, 0x3F	; 63
     950:	80 81       	ld	r24, Z
     952:	80 7c       	andi	r24, 0xC0	; 192
     954:	81 2b       	or	r24, r17
     956:	80 83       	st	Z, r24
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
     958:	80 e2       	ldi	r24, 0x20	; 32
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	8e 19       	sub	r24, r14
     95e:	9f 09       	sbc	r25, r15
     960:	64 e0       	ldi	r22, 0x04	; 4
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0e 94 42 12 	call	0x2484	; 0x2484 <__divmodhi4>
     968:	69 83       	std	Y+1, r22	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
     96a:	80 e6       	ldi	r24, 0x60	; 96
     96c:	99 e0       	ldi	r25, 0x09	; 9
     96e:	8c 19       	sub	r24, r12
     970:	9d 09       	sbc	r25, r13
     972:	64 e0       	ldi	r22, 0x04	; 4
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	0e 94 42 12 	call	0x2484	; 0x2484 <__divmodhi4>
     97a:	6a 83       	std	Y+2, r22	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     97c:	a8 81       	ld	r26, Y
     97e:	8a 2f       	mov	r24, r26
     980:	6c e0       	ldi	r22, 0x0C	; 12
     982:	0e 94 36 12 	call	0x246c	; 0x246c <__udivmodqi4>
     986:	68 2f       	mov	r22, r24
     988:	70 e0       	ldi	r23, 0x00	; 0

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     98a:	ab 01       	movw	r20, r22
     98c:	44 0f       	add	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	46 0f       	add	r20, r22
     992:	57 1f       	adc	r21, r23
     994:	44 0f       	add	r20, r20
     996:	55 1f       	adc	r21, r21
     998:	44 0f       	add	r20, r20
     99a:	55 1f       	adc	r21, r21
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	c9 01       	movw	r24, r18
     9a2:	84 0f       	add	r24, r20
     9a4:	95 1f       	adc	r25, r21
     9a6:	fc 01       	movw	r30, r24
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	e7 51       	subi	r30, 0x17	; 23
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	80 81       	ld	r24, Z
     9b6:	86 fd       	sbrc	r24, 6
     9b8:	15 c0       	rjmp	.+42     	; 0x9e4 <_ZN5Servo6attachEiii+0xce>
     9ba:	2f 5f       	subi	r18, 0xFF	; 255
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     9be:	2c 30       	cpi	r18, 0x0C	; 12
     9c0:	31 05       	cpc	r19, r1
     9c2:	71 f7       	brne	.-36     	; 0x9a0 <_ZN5Servo6attachEiii+0x8a>
     9c4:	24 c0       	rjmp	.+72     	; 0xa0e <_ZN5Servo6attachEiii+0xf8>

static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    TCCR1A = 0;             // normal counting mode 
     9c6:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
     9d0:	10 92 85 00 	sts	0x0085, r1
     9d4:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
     9d8:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
     9da:	80 91 6f 00 	lds	r24, 0x006F
     9de:	82 60       	ori	r24, 0x02	; 2
     9e0:	80 93 6f 00 	sts	0x006F, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     9e4:	8a 2f       	mov	r24, r26
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	fc 01       	movw	r30, r24
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	e8 0f       	add	r30, r24
     9f0:	f9 1f       	adc	r31, r25
     9f2:	e7 51       	subi	r30, 0x17	; 23
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	80 64       	ori	r24, 0x40	; 64
     9fa:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
     9fc:	88 81       	ld	r24, Y
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	08 95       	ret


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
     a0e:	67 2b       	or	r22, r23
     a10:	d1 f2       	breq	.-76     	; 0x9c6 <_ZN5Servo6attachEiii+0xb0>
     a12:	e8 cf       	rjmp	.-48     	; 0x9e4 <_ZN5Servo6attachEiii+0xce>

00000a14 <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
     a14:	40 e2       	ldi	r20, 0x20	; 32
     a16:	52 e0       	ldi	r21, 0x02	; 2
     a18:	20 e6       	ldi	r18, 0x60	; 96
     a1a:	39 e0       	ldi	r19, 0x09	; 9
     a1c:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Servo6attachEiii>
}
     a20:	08 95       	ret

00000a22 <__vector_11>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     a44:	80 91 0d 02 	lds	r24, 0x020D
     a48:	87 ff       	sbrs	r24, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
     a4c:	10 92 85 00 	sts	0x0085, r1
     a50:	10 92 84 00 	sts	0x0084, r1
     a54:	2b c0       	rjmp	.+86     	; 0xaac <__vector_11+0x8a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
     a56:	20 91 0d 02 	lds	r18, 0x020D
     a5a:	33 27       	eor	r19, r19
     a5c:	27 fd       	sbrc	r18, 7
     a5e:	30 95       	com	r19
     a60:	80 91 e8 01 	lds	r24, 0x01E8
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	28 17       	cp	r18, r24
     a68:	39 07       	cpc	r19, r25
     a6a:	04 f5       	brge	.+64     	; 0xaac <__vector_11+0x8a>
     a6c:	80 91 0d 02 	lds	r24, 0x020D
     a70:	99 27       	eor	r25, r25
     a72:	87 fd       	sbrc	r24, 7
     a74:	90 95       	com	r25
     a76:	fc 01       	movw	r30, r24
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	e7 51       	subi	r30, 0x17	; 23
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 81       	ld	r24, Z
     a86:	86 ff       	sbrs	r24, 6
     a88:	11 c0       	rjmp	.+34     	; 0xaac <__vector_11+0x8a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
     a8a:	80 91 0d 02 	lds	r24, 0x020D
     a8e:	99 27       	eor	r25, r25
     a90:	87 fd       	sbrc	r24, 7
     a92:	90 95       	com	r25
     a94:	fc 01       	movw	r30, r24
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	e8 0f       	add	r30, r24
     a9c:	f9 1f       	adc	r31, r25
     a9e:	e7 51       	subi	r30, 0x17	; 23
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	80 81       	ld	r24, Z
     aa4:	8f 73       	andi	r24, 0x3F	; 63
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     aac:	80 91 0d 02 	lds	r24, 0x020D
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	80 93 0d 02 	sts	0x020D, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     ab6:	20 91 0d 02 	lds	r18, 0x020D
     aba:	33 27       	eor	r19, r19
     abc:	27 fd       	sbrc	r18, 7
     abe:	30 95       	com	r19
     ac0:	80 91 e8 01 	lds	r24, 0x01E8
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	28 17       	cp	r18, r24
     ac8:	39 07       	cpc	r19, r25
     aca:	0c f0       	brlt	.+2      	; 0xace <__vector_11+0xac>
     acc:	4e c0       	rjmp	.+156    	; 0xb6a <__vector_11+0x148>
     ace:	80 91 0d 02 	lds	r24, 0x020D
     ad2:	8c 30       	cpi	r24, 0x0C	; 12
     ad4:	0c f0       	brlt	.+2      	; 0xad8 <__vector_11+0xb6>
     ad6:	49 c0       	rjmp	.+146    	; 0xb6a <__vector_11+0x148>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     ad8:	20 91 84 00 	lds	r18, 0x0084
     adc:	30 91 85 00 	lds	r19, 0x0085
     ae0:	80 91 0d 02 	lds	r24, 0x020D
     ae4:	99 27       	eor	r25, r25
     ae6:	87 fd       	sbrc	r24, 7
     ae8:	90 95       	com	r25
     aea:	fc 01       	movw	r30, r24
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	e8 0f       	add	r30, r24
     af2:	f9 1f       	adc	r31, r25
     af4:	e7 51       	subi	r30, 0x17	; 23
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	81 81       	ldd	r24, Z+1	; 0x01
     afa:	92 81       	ldd	r25, Z+2	; 0x02
     afc:	28 0f       	add	r18, r24
     afe:	39 1f       	adc	r19, r25
     b00:	30 93 89 00 	sts	0x0089, r19
     b04:	20 93 88 00 	sts	0x0088, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     b08:	80 91 0d 02 	lds	r24, 0x020D
     b0c:	99 27       	eor	r25, r25
     b0e:	87 fd       	sbrc	r24, 7
     b10:	90 95       	com	r25
     b12:	fc 01       	movw	r30, r24
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	e8 0f       	add	r30, r24
     b1a:	f9 1f       	adc	r31, r25
     b1c:	e7 51       	subi	r30, 0x17	; 23
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	80 81       	ld	r24, Z
     b22:	86 ff       	sbrs	r24, 6
     b24:	2b c0       	rjmp	.+86     	; 0xb7c <__vector_11+0x15a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
     b26:	80 91 0d 02 	lds	r24, 0x020D
     b2a:	99 27       	eor	r25, r25
     b2c:	87 fd       	sbrc	r24, 7
     b2e:	90 95       	com	r25
     b30:	fc 01       	movw	r30, r24
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	e8 0f       	add	r30, r24
     b38:	f9 1f       	adc	r31, r25
     b3a:	e7 51       	subi	r30, 0x17	; 23
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 81       	ld	r24, Z
     b40:	8f 73       	andi	r24, 0x3F	; 63
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
     b48:	19 c0       	rjmp	.+50     	; 0xb7c <__vector_11+0x15a>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	9c e9       	ldi	r25, 0x9C	; 156
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <__vector_11+0x138>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     b50:	80 91 84 00 	lds	r24, 0x0084
     b54:	90 91 85 00 	lds	r25, 0x0085
     b58:	04 96       	adiw	r24, 0x04	; 4
     b5a:	90 93 89 00 	sts	0x0089, r25
     b5e:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 93 0d 02 	sts	0x020D, r24
     b68:	09 c0       	rjmp	.+18     	; 0xb7c <__vector_11+0x15a>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     b6a:	80 91 84 00 	lds	r24, 0x0084
     b6e:	90 91 85 00 	lds	r25, 0x0085
     b72:	04 96       	adiw	r24, 0x04	; 4
     b74:	80 54       	subi	r24, 0x40	; 64
     b76:	9c 49       	sbci	r25, 0x9C	; 156
     b78:	40 f3       	brcs	.-48     	; 0xb4a <__vector_11+0x128>
     b7a:	ea cf       	rjmp	.-44     	; 0xb50 <__vector_11+0x12e>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <_ZN11MeetAndroidC1Ev>:
	}
}


// public methods
MeetAndroid::MeetAndroid()
     b9e:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ba0:	13 82       	std	Z+3, r1	; 0x03
     ba2:	12 82       	std	Z+2, r1	; 0x02
     ba4:	80 e9       	ldi	r24, 0x90	; 144
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	80 83       	st	Z, r24
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
     bac:	e5 5b       	subi	r30, 0xB5	; 181
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	10 82       	st	Z, r1
     bb2:	eb 54       	subi	r30, 0x4B	; 75
     bb4:	f0 40       	sbci	r31, 0x00	; 0
	errorFunc = 0;
     bb6:	df 01       	movw	r26, r30
     bb8:	ae 51       	subi	r26, 0x1E	; 30
     bba:	bf 4f       	sbci	r27, 0xFF	; 255
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	1c 92       	st	X, r1
     bc0:	1e 92       	st	-X, r1
}


void MeetAndroid::init()
{
	waitTime = 30;
     bc2:	ec 51       	subi	r30, 0x1C	; 28
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	8e e1       	ldi	r24, 0x1E	; 30
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
	startFlag = 18;
     bce:	ea 59       	subi	r30, 0x9A	; 154
     bd0:	f0 40       	sbci	r31, 0x00	; 0
     bd2:	82 e1       	ldi	r24, 0x12	; 18
     bd4:	80 83       	st	Z, r24
	ack = 19;
     bd6:	32 97       	sbiw	r30, 0x02	; 2
     bd8:	83 e1       	ldi	r24, 0x13	; 19
     bda:	80 83       	st	Z, r24
	abord = 27;
     bdc:	8b e1       	ldi	r24, 0x1B	; 27
     bde:	82 93       	st	-Z, r24
	delimiter = 59; //';'
     be0:	32 96       	adiw	r30, 0x02	; 2
     be2:	8b e3       	ldi	r24, 0x3B	; 59
     be4:	80 83       	st	Z, r24

	numberOfValues = 0;
     be6:	34 97       	sbiw	r30, 0x04	; 4
     be8:	11 82       	std	Z+1, r1	; 0x01
     bea:	10 82       	st	Z, r1
     bec:	37 96       	adiw	r30, 0x07	; 7
	
	for(int a = 0;a < FunctionBufferLenght;a++){
		intFunc[a] = errorFunc;
     bee:	8d 91       	ld	r24, X+
     bf0:	9c 91       	ld	r25, X
     bf2:	11 97       	sbiw	r26, 0x01	; 1
     bf4:	81 93       	st	Z+, r24
     bf6:	91 93       	st	Z+, r25
	abord = 27;
	delimiter = 59; //';'

	numberOfValues = 0;
	
	for(int a = 0;a < FunctionBufferLenght;a++){
     bf8:	ea 17       	cp	r30, r26
     bfa:	fb 07       	cpc	r31, r27
     bfc:	c1 f7       	brne	.-16     	; 0xbee <_ZN11MeetAndroidC1Ev+0x50>
{
    // it is hard to use member function pointer together with normal function pointers.
    customErrorFunc = false;
	errorFunc = 0;
	init();
}
     bfe:	08 95       	ret

00000c00 <_ZN11MeetAndroid16registerFunctionEPFvhhEh>:
    customErrorFunc = true;
	errorFunc = err;
	init();
}

void MeetAndroid::registerFunction(void(*userfunction)(uint8_t, uint8_t),uint8_t command){
     c00:	e4 2f       	mov	r30, r20
	intFunc[command-FunctionBufferOffset] = userfunction;
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	3a 97       	sbiw	r30, 0x0a	; 10
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	e8 0f       	add	r30, r24
     c0c:	f9 1f       	adc	r31, r25
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	60 83       	st	Z, r22
}
     c12:	08 95       	ret

00000c14 <_ZN11MeetAndroid4sendEh>:
void MeetAndroid::send(const char str[]){
	Serial.print(startFlag);
	Serial.print(str);
	Serial.print(ack);
}
void MeetAndroid::send(uint8_t n){
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	8c 01       	movw	r16, r24
     c20:	d6 2e       	mov	r13, r22
	Serial.print(startFlag);
     c22:	85 e8       	ldi	r24, 0x85	; 133
     c24:	e8 2e       	mov	r14, r24
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	f8 2e       	mov	r15, r24
     c2a:	06 5b       	subi	r16, 0xB6	; 182
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	c7 01       	movw	r24, r14
     c30:	f8 01       	movw	r30, r16
     c32:	60 81       	ld	r22, Z
     c34:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN5Print5printEc>
	Serial.print(n);
     c38:	c7 01       	movw	r24, r14
     c3a:	6d 2d       	mov	r22, r13
     c3c:	4a e0       	ldi	r20, 0x0A	; 10
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN5Print5printEhi>
	Serial.print(ack);
     c44:	02 50       	subi	r16, 0x02	; 2
     c46:	10 40       	sbci	r17, 0x00	; 0
     c48:	c7 01       	movw	r24, r14
     c4a:	f8 01       	movw	r30, r16
     c4c:	60 81       	ld	r22, Z
     c4e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN5Print5printEc>
}
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	08 95       	ret

00000c5e <_ZN11MeetAndroid5writeEh>:
}


#if defined(ARDUINO) && ARDUINO >= 100
size_t MeetAndroid::write(uint8_t b){
	return Serial.print(b);
     c5e:	85 e8       	ldi	r24, 0x85	; 133
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	4a e0       	ldi	r20, 0x0A	; 10
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN5Print5printEhi>
}
     c6a:	08 95       	ret

00000c6c <_ZN11MeetAndroid4sendEPKc>:
	Serial.print(startFlag);
	Serial.print(c);
	Serial.print(ack);
}

void MeetAndroid::send(const char str[]){
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	8c 01       	movw	r16, r24
     c7a:	6b 01       	movw	r12, r22
	Serial.print(startFlag);
     c7c:	95 e8       	ldi	r25, 0x85	; 133
     c7e:	e9 2e       	mov	r14, r25
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	f9 2e       	mov	r15, r25
     c84:	06 5b       	subi	r16, 0xB6	; 182
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	c7 01       	movw	r24, r14
     c8a:	f8 01       	movw	r30, r16
     c8c:	60 81       	ld	r22, Z
     c8e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN5Print5printEc>
	Serial.print(str);
     c92:	c7 01       	movw	r24, r14
     c94:	b6 01       	movw	r22, r12
     c96:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN5Print5printEPKc>
	Serial.print(ack);
     c9a:	02 50       	subi	r16, 0x02	; 2
     c9c:	10 40       	sbci	r17, 0x00	; 0
     c9e:	c7 01       	movw	r24, r14
     ca0:	f8 01       	movw	r30, r16
     ca2:	60 81       	ld	r22, Z
     ca4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN5Print5printEc>
}
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	08 95       	ret

00000cb6 <_ZN11MeetAndroid14processCommandEv>:
#include <stdlib.h>
}


// Private methods
void MeetAndroid::processCommand(){
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
	if(buffer[0]-FunctionBufferOffset < FunctionBufferLenght){
     cc6:	fd 80       	ldd	r15, Y+5	; 0x05
     cc8:	ef 2d       	mov	r30, r15
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	eb 37       	cpi	r30, 0x7B	; 123
     cce:	f1 05       	cpc	r31, r1
     cd0:	d4 f5       	brge	.+116    	; 0xd46 <_ZN11MeetAndroid14processCommandEv+0x90>
		void (*H_FuncPtr)(uint8_t, uint8_t) = intFunc[buffer[0]-FunctionBufferOffset];
     cd2:	3a 97       	sbiw	r30, 0x0a	; 10
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	00 81       	ld	r16, Z
     cde:	11 81       	ldd	r17, Z+1	; 0x01
		if (H_FuncPtr != 0) {
     ce0:	01 15       	cp	r16, r1
     ce2:	11 05       	cpc	r17, r1
     ce4:	69 f1       	breq	.+90     	; 0xd40 <_ZN11MeetAndroid14processCommandEv+0x8a>
	return (float)getDouble();
}

int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	e9 f1       	breq	.+122    	; 0xd66 <_ZN11MeetAndroid14processCommandEv+0xb0>
	numberOfValues = 1;
     cec:	fe 01       	movw	r30, r28
     cee:	eb 5b       	subi	r30, 0xBB	; 187
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
     cfa:	de 01       	movw	r26, r28
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	50 e0       	ldi	r21, 0x00	; 0
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
		if (buffer[a]==delimiter) numberOfValues++;
     d00:	be 01       	movw	r22, r28
     d02:	67 5b       	subi	r22, 0xB7	; 183
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	6f 01       	movw	r12, r30
     d08:	15 c0       	rjmp	.+42     	; 0xd34 <_ZN11MeetAndroid14processCommandEv+0x7e>
     d0a:	16 96       	adiw	r26, 0x06	; 6
     d0c:	2c 91       	ld	r18, X
     d0e:	16 97       	sbiw	r26, 0x06	; 6
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	fb 01       	movw	r30, r22
     d14:	80 81       	ld	r24, Z
     d16:	99 27       	eor	r25, r25
     d18:	87 fd       	sbrc	r24, 7
     d1a:	90 95       	com	r25
     d1c:	28 17       	cp	r18, r24
     d1e:	39 07       	cpc	r19, r25
     d20:	31 f4       	brne	.+12     	; 0xd2e <_ZN11MeetAndroid14processCommandEv+0x78>
     d22:	f6 01       	movw	r30, r12
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
	numberOfValues = 1;
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
     d2e:	4f 5f       	subi	r20, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	48 17       	cp	r20, r24
     d3a:	59 07       	cpc	r21, r25
     d3c:	34 f3       	brlt	.-52     	; 0xd0a <_ZN11MeetAndroid14processCommandEv+0x54>
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <_ZN11MeetAndroid14processCommandEv+0x108>
		void (*H_FuncPtr)(uint8_t, uint8_t) = intFunc[buffer[0]-FunctionBufferOffset];
		if (H_FuncPtr != 0) {
			H_FuncPtr(buffer[0], getArrayLength());
		}
		else {
			send("Flag not registered: ");
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	71 e0       	ldi	r23, 0x01	; 1
     d44:	47 c0       	rjmp	.+142    	; 0xdd4 <_ZN11MeetAndroid14processCommandEv+0x11e>
			send(buffer[0]);
		}
	}
	else {
		if (customErrorFunc)
     d46:	c5 5b       	subi	r28, 0xB5	; 181
     d48:	df 4f       	sbci	r29, 0xFF	; 255
     d4a:	88 81       	ld	r24, Y
     d4c:	cb 54       	subi	r28, 0x4B	; 75
     d4e:	d0 40       	sbci	r29, 0x00	; 0
     d50:	88 23       	and	r24, r24
     d52:	e9 f1       	breq	.+122    	; 0xdce <_ZN11MeetAndroid14processCommandEv+0x118>
			errorFunc(buffer[0], getArrayLength());
     d54:	ce 51       	subi	r28, 0x1E	; 30
     d56:	df 4f       	sbci	r29, 0xFF	; 255
     d58:	08 81       	ld	r16, Y
     d5a:	19 81       	ldd	r17, Y+1	; 0x01
     d5c:	c2 5e       	subi	r28, 0xE2	; 226
     d5e:	d0 40       	sbci	r29, 0x00	; 0
	return (float)getDouble();
}

int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	19 f4       	brne	.+6      	; 0xd6c <_ZN11MeetAndroid14processCommandEv+0xb6>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	2d c0       	rjmp	.+90     	; 0xdc6 <_ZN11MeetAndroid14processCommandEv+0x110>
	numberOfValues = 1;
     d6c:	fe 01       	movw	r30, r28
     d6e:	eb 5b       	subi	r30, 0xBB	; 187
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	de 01       	movw	r26, r28
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	50 e0       	ldi	r21, 0x00	; 0
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
		if (buffer[a]==delimiter) numberOfValues++;
     d80:	be 01       	movw	r22, r28
     d82:	67 5b       	subi	r22, 0xB7	; 183
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	6f 01       	movw	r12, r30
     d88:	15 c0       	rjmp	.+42     	; 0xdb4 <_ZN11MeetAndroid14processCommandEv+0xfe>
     d8a:	16 96       	adiw	r26, 0x06	; 6
     d8c:	2c 91       	ld	r18, X
     d8e:	16 97       	sbiw	r26, 0x06	; 6
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	fb 01       	movw	r30, r22
     d94:	80 81       	ld	r24, Z
     d96:	99 27       	eor	r25, r25
     d98:	87 fd       	sbrc	r24, 7
     d9a:	90 95       	com	r25
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	31 f4       	brne	.+12     	; 0xdae <_ZN11MeetAndroid14processCommandEv+0xf8>
     da2:	f6 01       	movw	r30, r12
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
int MeetAndroid::getArrayLength()
{
	if (bufferCount == 1) return 0; // only a flag and ack was sent, not data attached
	numberOfValues = 1;
	// find the amount of values we got
	for (int a=1; a<bufferCount;a++){
     dae:	4f 5f       	subi	r20, 0xFF	; 255
     db0:	5f 4f       	sbci	r21, 0xFF	; 255
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	48 17       	cp	r20, r24
     dba:	59 07       	cpc	r21, r25
     dbc:	34 f3       	brlt	.-52     	; 0xd8a <_ZN11MeetAndroid14processCommandEv+0xd4>
		if (buffer[a]==delimiter) numberOfValues++;
	}
	return numberOfValues;
     dbe:	cb 5b       	subi	r28, 0xBB	; 187
     dc0:	df 4f       	sbci	r29, 0xFF	; 255
     dc2:	68 81       	ld	r22, Y
     dc4:	79 81       	ldd	r23, Y+1	; 0x01
			send(buffer[0]);
		}
	}
	else {
		if (customErrorFunc)
			errorFunc(buffer[0], getArrayLength());
     dc6:	8f 2d       	mov	r24, r15
     dc8:	f8 01       	movw	r30, r16
     dca:	09 95       	icall
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <_ZN11MeetAndroid14processCommandEv+0x12a>
		else {
			send("Flag out of bounds: ");
     dce:	ce 01       	movw	r24, r28
     dd0:	66 e1       	ldi	r22, 0x16	; 22
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN11MeetAndroid4sendEPKc>
			send(buffer[0]);
     dd8:	ce 01       	movw	r24, r28
     dda:	6d 81       	ldd	r22, Y+5	; 0x05
     ddc:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN11MeetAndroid4sendEh>
		}
	}
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	08 95       	ret

00000df0 <_ZN11MeetAndroid6getIntEv>:
		string[a-1] = buffer[a];
	}
	string[bufferCount-1] = '\0';
}

int MeetAndroid::getInt()
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	ac 01       	movw	r20, r24
		b[a-1] = buffer[a];
	}

	b[bufferCount-1] = '\0';
	return atoi((char*)b);
}
     e02:	ed b6       	in	r14, 0x3d	; 61
     e04:	fe b6       	in	r15, 0x3e	; 62
	string[bufferCount-1] = '\0';
}

int MeetAndroid::getInt()
{
	uint8_t b[bufferCount];
     e06:	fc 01       	movw	r30, r24
     e08:	84 81       	ldd	r24, Z+4	; 0x04
     e0a:	2d b7       	in	r18, 0x3d	; 61
     e0c:	3e b7       	in	r19, 0x3e	; 62
     e0e:	28 1b       	sub	r18, r24
     e10:	31 09       	sbc	r19, r1
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	3e bf       	out	0x3e, r19	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	2d bf       	out	0x3d, r18	; 61
     e1c:	6d b7       	in	r22, 0x3d	; 61
     e1e:	7e b7       	in	r23, 0x3e	; 62
     e20:	6f 5f       	subi	r22, 0xFF	; 255
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	da 01       	movw	r26, r20
     e26:	8b 01       	movw	r16, r22
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <_ZN11MeetAndroid6getIntEv+0x4e>
	for(int a = 1;a < bufferCount;a++){
		b[a-1] = buffer[a];
     e2e:	15 96       	adiw	r26, 0x05	; 5
     e30:	8c 91       	ld	r24, X
     e32:	15 97       	sbiw	r26, 0x05	; 5
     e34:	f8 01       	movw	r30, r16
     e36:	81 93       	st	Z+, r24
     e38:	8f 01       	movw	r16, r30
}

int MeetAndroid::getInt()
{
	uint8_t b[bufferCount];
	for(int a = 1;a < bufferCount;a++){
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	fa 01       	movw	r30, r20
     e40:	84 81       	ldd	r24, Z+4	; 0x04
     e42:	e8 2f       	mov	r30, r24
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	2e 17       	cp	r18, r30
     e4a:	3f 07       	cpc	r19, r31
     e4c:	84 f3       	brlt	.-32     	; 0xe2e <_ZN11MeetAndroid6getIntEv+0x3e>
		b[a-1] = buffer[a];
	}

	b[bufferCount-1] = '\0';
     e4e:	e6 0f       	add	r30, r22
     e50:	f7 1f       	adc	r31, r23
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	10 82       	st	Z, r1
	return atoi((char*)b);
     e56:	cb 01       	movw	r24, r22
     e58:	0e 94 64 02 	call	0x4c8	; 0x4c8 <atoi>
}
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	fe be       	out	0x3e, r15	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	ed be       	out	0x3d, r14	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	08 95       	ret

00000e74 <_ZN11MeetAndroid7receiveEv>:
}
void MeetAndroid::unregisterFunction(uint8_t command){
	intFunc[command-FunctionBufferOffset] = errorFunc;
}

bool MeetAndroid::receive(){
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	ec 01       	movw	r28, r24
	{
		while(Serial.available() > 0)
		{
			lastByte = Serial.read();
			
			if(lastByte == abord){
     e8a:	37 e4       	ldi	r19, 0x47	; 71
     e8c:	a3 2e       	mov	r10, r19
     e8e:	b1 2c       	mov	r11, r1
     e90:	a8 0e       	add	r10, r24
     e92:	b9 1e       	adc	r11, r25
				flush();
			}
			else if(lastByte == ack){
     e94:	28 e4       	ldi	r18, 0x48	; 72
     e96:	c2 2e       	mov	r12, r18
     e98:	d1 2c       	mov	r13, r1
     e9a:	c8 0e       	add	r12, r24
     e9c:	d9 1e       	adc	r13, r25
void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
	}
	bufferCount = 0;
	numberOfValues = 0;
     e9e:	8c 01       	movw	r16, r24
     ea0:	0b 5b       	subi	r16, 0xBB	; 187
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			else return false;
		}
		
		if(Serial.available() <= 0 && !timeout){
			if(waitTime > 0) delayMicroseconds(waitTime);
     ea4:	94 ee       	ldi	r25, 0xE4	; 228
     ea6:	e9 2e       	mov	r14, r25
     ea8:	f1 2c       	mov	r15, r1
     eaa:	ec 0e       	add	r14, r28
     eac:	fd 1e       	adc	r15, r29
     eae:	37 c0       	rjmp	.+110    	; 0xf1e <_ZN11MeetAndroid7receiveEv+0xaa>
	boolean timeout = false;
	while(!timeout)
	{
		while(Serial.available() > 0)
		{
			lastByte = Serial.read();
     eb0:	85 e8       	ldi	r24, 0x85	; 133
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	0e 94 c6 0b 	call	0x178c	; 0x178c <_ZN14HardwareSerial4readEv>
     eb8:	48 2f       	mov	r20, r24
			
			if(lastByte == abord){
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	f5 01       	movw	r30, r10
     ec0:	80 81       	ld	r24, Z
     ec2:	99 27       	eor	r25, r25
     ec4:	87 fd       	sbrc	r24, 7
     ec6:	90 95       	com	r25
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	41 f4       	brne	.+16     	; 0xede <_ZN11MeetAndroid7receiveEv+0x6a>
     ece:	fe 01       	movw	r30, r28
     ed0:	80 e0       	ldi	r24, 0x00	; 0
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
     ed2:	15 82       	std	Z+5, r1	; 0x05
	Serial.println();
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	80 34       	cpi	r24, 0x40	; 64
     eda:	d9 f7       	brne	.-10     	; 0xed2 <_ZN11MeetAndroid7receiveEv+0x5e>
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <_ZN11MeetAndroid7receiveEv+0x8e>
			lastByte = Serial.read();
			
			if(lastByte == abord){
				flush();
			}
			else if(lastByte == ack){
     ede:	f6 01       	movw	r30, r12
     ee0:	80 81       	ld	r24, Z
     ee2:	99 27       	eor	r25, r25
     ee4:	87 fd       	sbrc	r24, 7
     ee6:	90 95       	com	r25
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	79 f4       	brne	.+30     	; 0xf0c <_ZN11MeetAndroid7receiveEv+0x98>
				processCommand();
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN11MeetAndroid14processCommandEv>
     ef4:	fe 01       	movw	r30, r28
     ef6:	80 e0       	ldi	r24, 0x00	; 0
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
		buffer[a] = 0;
     ef8:	15 82       	std	Z+5, r1	; 0x05
	Serial.println();
	Serial.print(ack);
}

void MeetAndroid::flush(){
	for(uint8_t a=0; a < ByteBufferLenght; a++){
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	80 34       	cpi	r24, 0x40	; 64
     f00:	d9 f7       	brne	.-10     	; 0xef8 <_ZN11MeetAndroid7receiveEv+0x84>
		buffer[a] = 0;
	}
	bufferCount = 0;
     f02:	1c 82       	std	Y+4, r1	; 0x04
	numberOfValues = 0;
     f04:	f8 01       	movw	r30, r16
     f06:	11 82       	std	Z+1, r1	; 0x01
     f08:	10 82       	st	Z, r1
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <_ZN11MeetAndroid7receiveEv+0xaa>
			}
			else if(lastByte == ack){
				processCommand();
				flush();
			}
			else if(bufferCount < ByteBufferLenght){
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	80 34       	cpi	r24, 0x40	; 64
     f10:	20 f5       	brcc	.+72     	; 0xf5a <_ZN11MeetAndroid7receiveEv+0xe6>
				buffer[bufferCount] = lastByte;
     f12:	fe 01       	movw	r30, r28
     f14:	e8 0f       	add	r30, r24
     f16:	f1 1d       	adc	r31, r1
     f18:	45 83       	std	Z+5, r20	; 0x05
				bufferCount++;
     f1a:	8f 5f       	subi	r24, 0xFF	; 255
     f1c:	8c 83       	std	Y+4, r24	; 0x04
bool MeetAndroid::receive(){
	uint8_t lastByte;
	boolean timeout = false;
	while(!timeout)
	{
		while(Serial.available() > 0)
     f1e:	85 e8       	ldi	r24, 0x85	; 133
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN14HardwareSerial9availableEv>
     f26:	18 16       	cp	r1, r24
     f28:	19 06       	cpc	r1, r25
     f2a:	14 f2       	brlt	.-124    	; 0xeb0 <_ZN11MeetAndroid7receiveEv+0x3c>
				bufferCount++;
			}
			else return false;
		}
		
		if(Serial.available() <= 0 && !timeout){
     f2c:	85 e8       	ldi	r24, 0x85	; 133
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN14HardwareSerial9availableEv>
     f34:	18 16       	cp	r1, r24
     f36:	19 06       	cpc	r1, r25
     f38:	94 f3       	brlt	.-28     	; 0xf1e <_ZN11MeetAndroid7receiveEv+0xaa>
			if(waitTime > 0) delayMicroseconds(waitTime);
     f3a:	f7 01       	movw	r30, r14
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	11 f0       	breq	.+4      	; 0xf48 <_ZN11MeetAndroid7receiveEv+0xd4>
     f44:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <delayMicroseconds>
			if(Serial.available() <= 0) timeout = true;
     f48:	85 e8       	ldi	r24, 0x85	; 133
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN14HardwareSerial9availableEv>
     f50:	18 16       	cp	r1, r24
     f52:	19 06       	cpc	r1, r25
     f54:	24 f3       	brlt	.-56     	; 0xf1e <_ZN11MeetAndroid7receiveEv+0xaa>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <_ZN11MeetAndroid7receiveEv+0xe8>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return timeout;
}
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	08 95       	ret

00000f72 <_GLOBAL__I_meetAndroid>:
#define NONE 0
#define STOPDELAY 1

//Library references
extern HardwareSerial Serial;
MeetAndroid meetAndroid;
     f72:	8e e0       	ldi	r24, 0x0E	; 14
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN11MeetAndroidC1Ev>
Servo usservo;
     f7a:	84 ef       	ldi	r24, 0xF4	; 244
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5ServoC1Ev>
	String toTrans = prefix + value;
	int length = toTrans.length() + 1;
	char charBuf[length];
	toTrans.toCharArray(charBuf, length);
	meetAndroid.send(charBuf);
}
     f82:	08 95       	ret

00000f84 <_Z8sendDataRK6Stringi>:
			Serial.print("More than one timed event not possible.");
		}
	}
}

void sendData(const String& prefix, int value) {
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	2e 97       	sbiw	r28, 0x0e	; 14
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	9c 01       	movw	r18, r24
     fa6:	7b 01       	movw	r14, r22
	String toTrans = prefix + value;
	int length = toTrans.length() + 1;
	char charBuf[length];
	toTrans.toCharArray(charBuf, length);
	meetAndroid.send(charBuf);
}
     fa8:	cd b6       	in	r12, 0x3d	; 61
     faa:	de b6       	in	r13, 0x3e	; 62
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     fac:	8e 01       	movw	r16, r28
     fae:	08 5f       	subi	r16, 0xF8	; 248
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	c8 01       	movw	r24, r16
     fb4:	b9 01       	movw	r22, r18
     fb6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <_ZN6StringC2ERKS_>
		}
	}
}

void sendData(const String& prefix, int value) {
	String toTrans = prefix + value;
     fba:	c8 01       	movw	r24, r16
     fbc:	b7 01       	movw	r22, r14
     fbe:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZplRK15StringSumHelperi>
     fc2:	bc 01       	movw	r22, r24
     fc4:	7e 01       	movw	r14, r28
     fc6:	08 94       	sec
     fc8:	e1 1c       	adc	r14, r1
     fca:	f1 1c       	adc	r15, r1
     fcc:	c7 01       	movw	r24, r14
     fce:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6StringC1ERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     fd2:	c8 01       	movw	r24, r16
     fd4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN6StringD2Ev>
	int length = toTrans.length() + 1;
     fd8:	4d 81       	ldd	r20, Y+5	; 0x05
     fda:	5e 81       	ldd	r21, Y+6	; 0x06
     fdc:	4f 5f       	subi	r20, 0xFF	; 255
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
	char charBuf[length];
     fe0:	8d b7       	in	r24, 0x3d	; 61
     fe2:	9e b7       	in	r25, 0x3e	; 62
     fe4:	84 1b       	sub	r24, r20
     fe6:	95 0b       	sbc	r25, r21
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	9e bf       	out	0x3e, r25	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	8d bf       	out	0x3d, r24	; 61
     ff2:	0d b7       	in	r16, 0x3d	; 61
     ff4:	1e b7       	in	r17, 0x3e	; 62
     ff6:	0f 5f       	subi	r16, 0xFF	; 255
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
     ffa:	c7 01       	movw	r24, r14
     ffc:	b8 01       	movw	r22, r16
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZNK6String8getBytesEPhjj>
	toTrans.toCharArray(charBuf, length);
	meetAndroid.send(charBuf);
    1006:	8e e0       	ldi	r24, 0x0E	; 14
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	b8 01       	movw	r22, r16
    100c:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN11MeetAndroid4sendEPKc>
    1010:	c7 01       	movw	r24, r14
    1012:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN6StringD1Ev>
}
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de be       	out	0x3e, r13	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd be       	out	0x3d, r12	; 61
    1020:	2e 96       	adiw	r28, 0x0e	; 14
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <_Z6turn_Rcc>:
	analogWrite(E1, a);
	digitalWrite(M1, LOW);
	analogWrite(E2, b);
	digitalWrite(M2, HIGH);
}
void turn_R(char a, char b) {
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	06 2f       	mov	r16, r22
	analogWrite(E1, a);
    1044:	68 2f       	mov	r22, r24
    1046:	77 27       	eor	r23, r23
    1048:	67 fd       	sbrc	r22, 7
    104a:	70 95       	com	r23
    104c:	80 91 76 01 	lds	r24, 0x0176
    1050:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M1, HIGH);
    1054:	80 91 7a 01 	lds	r24, 0x017A
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
	analogWrite(E2, b);
    105e:	11 27       	eor	r17, r17
    1060:	07 fd       	sbrc	r16, 7
    1062:	10 95       	com	r17
    1064:	80 91 78 01 	lds	r24, 0x0178
    1068:	b8 01       	movw	r22, r16
    106a:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M2, LOW);
    106e:	80 91 7c 01 	lds	r24, 0x017C
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
}
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <_Z18turnRightWithAnglehh>:
		} else {
			Serial.print("More than one timed event not possible.");
		}
	}
}
void turnRightWithAngle(byte flag, byte numOfValues) {
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
	int angle = meetAndroid.getInt();
    1082:	8e e0       	ldi	r24, 0x0E	; 14
    1084:	92 e0       	ldi	r25, 0x02	; 2
    1086:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11MeetAndroid6getIntEv>
	int delay = angle * 15;
    108a:	ec 01       	movw	r28, r24
    108c:	24 e0       	ldi	r18, 0x04	; 4
    108e:	cc 0f       	add	r28, r28
    1090:	dd 1f       	adc	r29, r29
    1092:	2a 95       	dec	r18
    1094:	e1 f7       	brne	.-8      	; 0x108e <_Z18turnRightWithAnglehh+0x10>
    1096:	c8 1b       	sub	r28, r24
    1098:	d9 0b       	sbc	r29, r25
	if (delay > 0) {
    109a:	1c 16       	cp	r1, r28
    109c:	1d 06       	cpc	r1, r29
    109e:	5c f5       	brge	.+86     	; 0x10f6 <_Z18turnRightWithAnglehh+0x78>
		if (eventTimerMode == 0) {
    10a0:	80 91 fb 02 	lds	r24, 0x02FB
    10a4:	90 91 fc 02 	lds	r25, 0x02FC
    10a8:	89 2b       	or	r24, r25
    10aa:	f9 f4       	brne	.+62     	; 0x10ea <_Z18turnRightWithAnglehh+0x6c>
			turn_R(TURN_SPEED, TURN_SPEED);
    10ac:	60 91 8a 01 	lds	r22, 0x018A
    10b0:	86 2f       	mov	r24, r22
    10b2:	0e 94 1f 08 	call	0x103e	; 0x103e <_Z6turn_Rcc>
			millisTimer = millis() + delay;
    10b6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <millis>
    10ba:	9e 01       	movw	r18, r28
    10bc:	44 27       	eor	r20, r20
    10be:	37 fd       	sbrc	r19, 7
    10c0:	40 95       	com	r20
    10c2:	54 2f       	mov	r21, r20
    10c4:	26 0f       	add	r18, r22
    10c6:	37 1f       	adc	r19, r23
    10c8:	48 1f       	adc	r20, r24
    10ca:	59 1f       	adc	r21, r25
    10cc:	20 93 f7 02 	sts	0x02F7, r18
    10d0:	30 93 f8 02 	sts	0x02F8, r19
    10d4:	40 93 f9 02 	sts	0x02F9, r20
    10d8:	50 93 fa 02 	sts	0x02FA, r21
			eventTimerMode = STOPDELAY;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 fc 02 	sts	0x02FC, r25
    10e4:	80 93 fb 02 	sts	0x02FB, r24
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <_Z18turnRightWithAnglehh+0x78>
		} else {
			Serial.print("More than one timed event not possible.");
    10ea:	85 e8       	ldi	r24, 0x85	; 133
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	6b e2       	ldi	r22, 0x2B	; 43
    10f0:	71 e0       	ldi	r23, 0x01	; 1
    10f2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN5Print5printEPKc>
		}
	}
}
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <_Z6turn_Lcc>:
	analogWrite(E1, a);
	digitalWrite(M1, HIGH);
	analogWrite(E2, b);
	digitalWrite(M2, HIGH);
}
void turn_L(char a, char b) {
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	06 2f       	mov	r16, r22
	analogWrite(E1, a);
    1102:	68 2f       	mov	r22, r24
    1104:	77 27       	eor	r23, r23
    1106:	67 fd       	sbrc	r22, 7
    1108:	70 95       	com	r23
    110a:	80 91 76 01 	lds	r24, 0x0176
    110e:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M1, LOW);
    1112:	80 91 7a 01 	lds	r24, 0x017A
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
	analogWrite(E2, b);
    111c:	11 27       	eor	r17, r17
    111e:	07 fd       	sbrc	r16, 7
    1120:	10 95       	com	r17
    1122:	80 91 78 01 	lds	r24, 0x0178
    1126:	b8 01       	movw	r22, r16
    1128:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M2, HIGH);
    112c:	80 91 7c 01 	lds	r24, 0x017C
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
}
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <_Z17turnLeftWithAnglehh>:
			Serial.print("More than one timed event not possible.");
		}
	}
}

void turnLeftWithAngle(byte flag, byte numOfValues) {
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
	int angle = meetAndroid.getInt();
    1140:	8e e0       	ldi	r24, 0x0E	; 14
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11MeetAndroid6getIntEv>
	int delay = angle * 15;
    1148:	ec 01       	movw	r28, r24
    114a:	34 e0       	ldi	r19, 0x04	; 4
    114c:	cc 0f       	add	r28, r28
    114e:	dd 1f       	adc	r29, r29
    1150:	3a 95       	dec	r19
    1152:	e1 f7       	brne	.-8      	; 0x114c <_Z17turnLeftWithAnglehh+0x10>
    1154:	c8 1b       	sub	r28, r24
    1156:	d9 0b       	sbc	r29, r25
	if (delay > 0) {
    1158:	1c 16       	cp	r1, r28
    115a:	1d 06       	cpc	r1, r29
    115c:	5c f5       	brge	.+86     	; 0x11b4 <_Z17turnLeftWithAnglehh+0x78>
		if (eventTimerMode == 0) {
    115e:	80 91 fb 02 	lds	r24, 0x02FB
    1162:	90 91 fc 02 	lds	r25, 0x02FC
    1166:	89 2b       	or	r24, r25
    1168:	f9 f4       	brne	.+62     	; 0x11a8 <_Z17turnLeftWithAnglehh+0x6c>
			turn_L(TURN_SPEED, TURN_SPEED);
    116a:	60 91 8a 01 	lds	r22, 0x018A
    116e:	86 2f       	mov	r24, r22
    1170:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_Z6turn_Lcc>
			millisTimer = millis() + delay;
    1174:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <millis>
    1178:	9e 01       	movw	r18, r28
    117a:	44 27       	eor	r20, r20
    117c:	37 fd       	sbrc	r19, 7
    117e:	40 95       	com	r20
    1180:	54 2f       	mov	r21, r20
    1182:	26 0f       	add	r18, r22
    1184:	37 1f       	adc	r19, r23
    1186:	48 1f       	adc	r20, r24
    1188:	59 1f       	adc	r21, r25
    118a:	20 93 f7 02 	sts	0x02F7, r18
    118e:	30 93 f8 02 	sts	0x02F8, r19
    1192:	40 93 f9 02 	sts	0x02F9, r20
    1196:	50 93 fa 02 	sts	0x02FA, r21
			eventTimerMode = STOPDELAY;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	90 93 fc 02 	sts	0x02FC, r25
    11a2:	80 93 fb 02 	sts	0x02FB, r24
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <_Z17turnLeftWithAnglehh+0x78>
		} else {
			Serial.print("More than one timed event not possible.");
    11a8:	85 e8       	ldi	r24, 0x85	; 133
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	6b e2       	ldi	r22, 0x2B	; 43
    11ae:	71 e0       	ldi	r23, 0x01	; 1
    11b0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN5Print5printEPKc>
		}
	}
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <_Z8back_offcc>:
	analogWrite(E1, a); //PWM Speed Control
	digitalWrite(M1, LOW);
	analogWrite(E2, b);
	digitalWrite(M2, LOW);
}
void back_off(char a, char b) {
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	06 2f       	mov	r16, r22
	analogWrite(E1, a);
    11c0:	68 2f       	mov	r22, r24
    11c2:	77 27       	eor	r23, r23
    11c4:	67 fd       	sbrc	r22, 7
    11c6:	70 95       	com	r23
    11c8:	80 91 76 01 	lds	r24, 0x0176
    11cc:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M1, HIGH);
    11d0:	80 91 7a 01 	lds	r24, 0x017A
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
	analogWrite(E2, b);
    11da:	11 27       	eor	r17, r17
    11dc:	07 fd       	sbrc	r16, 7
    11de:	10 95       	com	r17
    11e0:	80 91 78 01 	lds	r24, 0x0178
    11e4:	b8 01       	movw	r22, r16
    11e6:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M2, HIGH);
    11ea:	80 91 7c 01 	lds	r24, 0x017C
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
}
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <_Z14backOffAtSpeedhh>:
	int speed = meetAndroid.getInt();
	advance(speed, speed);
}

void backOffAtSpeed(byte flag, byte numOfValues) {
	int speed = meetAndroid.getInt();
    11fa:	8e e0       	ldi	r24, 0x0E	; 14
    11fc:	92 e0       	ldi	r25, 0x02	; 2
    11fe:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11MeetAndroid6getIntEv>
    1202:	68 2f       	mov	r22, r24
	back_off(speed, speed);
    1204:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_Z8back_offcc>
}
    1208:	08 95       	ret

0000120a <_Z7advancecc>:

void stop(void) {
	digitalWrite(E1, LOW);
	digitalWrite(E2, LOW);
}
void advance(char a, char b) {
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	06 2f       	mov	r16, r22
	analogWrite(E1, a); //PWM Speed Control
    1210:	68 2f       	mov	r22, r24
    1212:	77 27       	eor	r23, r23
    1214:	67 fd       	sbrc	r22, 7
    1216:	70 95       	com	r23
    1218:	80 91 76 01 	lds	r24, 0x0176
    121c:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M1, LOW);
    1220:	80 91 7a 01 	lds	r24, 0x017A
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
	analogWrite(E2, b);
    122a:	11 27       	eor	r17, r17
    122c:	07 fd       	sbrc	r16, 7
    122e:	10 95       	com	r17
    1230:	80 91 78 01 	lds	r24, 0x0178
    1234:	b8 01       	movw	r22, r16
    1236:	0e 94 35 10 	call	0x206a	; 0x206a <analogWrite>
	digitalWrite(M2, LOW);
    123a:	80 91 7c 01 	lds	r24, 0x017C
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
}
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <_Z14advanceAtSpeedhh>:
	usservo.write(angle);
}

//Functions registered for events sent from Android
void advanceAtSpeed(byte flag, byte numOfValues) {
	int speed = meetAndroid.getInt();
    124a:	8e e0       	ldi	r24, 0x0E	; 14
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11MeetAndroid6getIntEv>
    1252:	68 2f       	mov	r22, r24
	advance(speed, speed);
    1254:	0e 94 05 09 	call	0x120a	; 0x120a <_Z7advancecc>
}
    1258:	08 95       	ret

0000125a <_Z4stopv>:
	int backBool = digitalRead(IR_BACK);
	return backBool;
}

void stop(void) {
	digitalWrite(E1, LOW);
    125a:	80 91 76 01 	lds	r24, 0x0176
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
	digitalWrite(E2, LOW);
    1264:	80 91 78 01 	lds	r24, 0x0178
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
}
    126e:	08 95       	ret

00001270 <_Z13stopWithDelayhh>:
void backOffAtSpeed(byte flag, byte numOfValues) {
	int speed = meetAndroid.getInt();
	back_off(speed, speed);
}

void stopWithDelay(byte flag, byte numOfValues) {
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
	int delay = meetAndroid.getInt();
    1274:	8e e0       	ldi	r24, 0x0E	; 14
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN11MeetAndroid6getIntEv>
    127c:	ec 01       	movw	r28, r24
	if (delay <= 0) {
    127e:	18 16       	cp	r1, r24
    1280:	19 06       	cpc	r1, r25
    1282:	1c f0       	brlt	.+6      	; 0x128a <_Z13stopWithDelayhh+0x1a>
		stop();
    1284:	0e 94 2d 09 	call	0x125a	; 0x125a <_Z4stopv>
    1288:	26 c0       	rjmp	.+76     	; 0x12d6 <_Z13stopWithDelayhh+0x66>
	} else {
		if (eventTimerMode == 0) {
    128a:	80 91 fb 02 	lds	r24, 0x02FB
    128e:	90 91 fc 02 	lds	r25, 0x02FC
    1292:	89 2b       	or	r24, r25
    1294:	d1 f4       	brne	.+52     	; 0x12ca <_Z13stopWithDelayhh+0x5a>
			millisTimer = millis() + delay;
    1296:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <millis>
    129a:	9e 01       	movw	r18, r28
    129c:	44 27       	eor	r20, r20
    129e:	37 fd       	sbrc	r19, 7
    12a0:	40 95       	com	r20
    12a2:	54 2f       	mov	r21, r20
    12a4:	26 0f       	add	r18, r22
    12a6:	37 1f       	adc	r19, r23
    12a8:	48 1f       	adc	r20, r24
    12aa:	59 1f       	adc	r21, r25
    12ac:	20 93 f7 02 	sts	0x02F7, r18
    12b0:	30 93 f8 02 	sts	0x02F8, r19
    12b4:	40 93 f9 02 	sts	0x02F9, r20
    12b8:	50 93 fa 02 	sts	0x02FA, r21
			eventTimerMode = STOPDELAY;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	90 93 fc 02 	sts	0x02FC, r25
    12c4:	80 93 fb 02 	sts	0x02FB, r24
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <_Z13stopWithDelayhh+0x66>
		} else {
			Serial.print("More than one timed event not possible.");
    12ca:	85 e8       	ldi	r24, 0x85	; 133
    12cc:	93 e0       	ldi	r25, 0x03	; 3
    12ce:	6b e2       	ldi	r22, 0x2B	; 43
    12d0:	71 e0       	ldi	r23, 0x01	; 1
    12d2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN5Print5printEPKc>
		}
	}
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <_Z16getIRMeasurementv>:

	return value;
}

int getIRMeasurement() {
	int backBool = digitalRead(IR_BACK);
    12dc:	80 91 7e 01 	lds	r24, 0x017E
    12e0:	0e 94 28 11 	call	0x2250	; 0x2250 <digitalRead>
	return backBool;
}
    12e4:	08 95       	ret

000012e6 <_Z16getUSMeasurementv>:
	}
}

int getUSMeasurement() {
	int value; // This value will be populated
	unsigned long LowLevelTime = pulseIn(URPWM, LOW);
    12e6:	80 91 82 01 	lds	r24, 0x0182
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	20 e4       	ldi	r18, 0x40	; 64
    12ee:	32 e4       	ldi	r19, 0x42	; 66
    12f0:	4f e0       	ldi	r20, 0x0F	; 15
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <pulseIn>

	if (LowLevelTime == 50000) // the reading is invalid.
    12f8:	60 35       	cpi	r22, 0x50	; 80
    12fa:	23 ec       	ldi	r18, 0xC3	; 195
    12fc:	72 07       	cpc	r23, r18
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	82 07       	cpc	r24, r18
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	92 07       	cpc	r25, r18
    1306:	49 f4       	brne	.+18     	; 0x131a <_Z16getUSMeasurementv+0x34>
			{
		Serial.print("Invalid");
    1308:	85 e8       	ldi	r24, 0x85	; 133
    130a:	93 e0       	ldi	r25, 0x03	; 3
    130c:	63 e5       	ldi	r22, 0x53	; 83
    130e:	71 e0       	ldi	r23, 0x01	; 1
    1310:	0e 94 75 0d 	call	0x1aea	; 0x1aea <_ZN5Print5printEPKc>
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	3f ef       	ldi	r19, 0xFF	; 255
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <_Z16getUSMeasurementv+0x40>
		value = -1;
	} else {
		value = LowLevelTime / 50; // every 50us low level stands for 1cm
    131a:	22 e3       	ldi	r18, 0x32	; 50
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodsi4>
	}

	return value;
}
    1326:	c9 01       	movw	r24, r18
    1328:	08 95       	ret

0000132a <loop>:
	meetAndroid.registerFunction(turnLeftWithAngle, 'L');
	meetAndroid.registerFunction(turnRightWithAngle, 'R');
}

// The loop function is called in an endless loop
void loop() {
    132a:	af 92       	push	r10
    132c:	bf 92       	push	r11
    132e:	cf 92       	push	r12
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	27 97       	sbiw	r28, 0x07	; 7
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
	long startTime = millis();
    134e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <millis>
    1352:	5b 01       	movw	r10, r22
    1354:	6c 01       	movw	r12, r24
	//makes sure that data send from android to robot are received and according funtions are called
	meetAndroid.receive();
    1356:	8e e0       	ldi	r24, 0x0E	; 14
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	0e 94 3a 07 	call	0xe74	; 0xe74 <_ZN11MeetAndroid7receiveEv>

	//Give sensor readings to Android Command Center:
	int value = getUSMeasurement();
    135e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_Z16getUSMeasurementv>
    1362:	8c 01       	movw	r16, r24
	String prefix = "FRONTPROX:";
    1364:	7e 01       	movw	r14, r28
    1366:	08 94       	sec
    1368:	e1 1c       	adc	r14, r1
    136a:	f1 1c       	adc	r15, r1
    136c:	c7 01       	movw	r24, r14
    136e:	6b e5       	ldi	r22, 0x5B	; 91
    1370:	71 e0       	ldi	r23, 0x01	; 1
    1372:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN6StringC1EPKc>
	sendData(prefix, value);
    1376:	c7 01       	movw	r24, r14
    1378:	b8 01       	movw	r22, r16
    137a:	0e 94 c2 07 	call	0xf84	; 0xf84 <_Z8sendDataRK6Stringi>

	value = getIRMeasurement();
    137e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z16getIRMeasurementv>
    1382:	8c 01       	movw	r16, r24
	prefix = "BACKPROX:";
    1384:	c7 01       	movw	r24, r14
    1386:	66 e6       	ldi	r22, 0x66	; 102
    1388:	71 e0       	ldi	r23, 0x01	; 1
    138a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN6StringaSEPKc>
	sendData(prefix, value);
    138e:	c7 01       	movw	r24, r14
    1390:	b8 01       	movw	r22, r16
    1392:	0e 94 c2 07 	call	0xf84	; 0xf84 <_Z8sendDataRK6Stringi>

	//For motor events involving time like stopping with delay
	switch (eventTimerMode) {
    1396:	80 91 fb 02 	lds	r24, 0x02FB
    139a:	90 91 fc 02 	lds	r25, 0x02FC
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f1       	breq	.+88     	; 0x13fa <loop+0xd0>
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f4       	brne	.+60     	; 0x13e2 <loop+0xb8>
	case NONE:
		break;
	case STOPDELAY:
		if (millisTimer < millis()) {
    13a6:	e0 90 f7 02 	lds	r14, 0x02F7
    13aa:	f0 90 f8 02 	lds	r15, 0x02F8
    13ae:	00 91 f9 02 	lds	r16, 0x02F9
    13b2:	10 91 fa 02 	lds	r17, 0x02FA
    13b6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <millis>
    13ba:	e6 16       	cp	r14, r22
    13bc:	f7 06       	cpc	r15, r23
    13be:	08 07       	cpc	r16, r24
    13c0:	19 07       	cpc	r17, r25
    13c2:	d8 f4       	brcc	.+54     	; 0x13fa <loop+0xd0>
			stop();
    13c4:	0e 94 2d 09 	call	0x125a	; 0x125a <_Z4stopv>
			millisTimer = 0;
    13c8:	10 92 f7 02 	sts	0x02F7, r1
    13cc:	10 92 f8 02 	sts	0x02F8, r1
    13d0:	10 92 f9 02 	sts	0x02F9, r1
    13d4:	10 92 fa 02 	sts	0x02FA, r1
			eventTimerMode = NONE;
    13d8:	10 92 fc 02 	sts	0x02FC, r1
    13dc:	10 92 fb 02 	sts	0x02FB, r1
    13e0:	0c c0       	rjmp	.+24     	; 0x13fa <loop+0xd0>
		}
		break;
	default:
		eventTimerMode = 0;
    13e2:	10 92 fc 02 	sts	0x02FC, r1
    13e6:	10 92 fb 02 	sts	0x02FB, r1
		millisTimer = 0;
    13ea:	10 92 f7 02 	sts	0x02F7, r1
    13ee:	10 92 f8 02 	sts	0x02F8, r1
    13f2:	10 92 f9 02 	sts	0x02F9, r1
    13f6:	10 92 fa 02 	sts	0x02FA, r1
	}



	//Making sure that new line is started for every loop run
	Serial.println();
    13fa:	85 e8       	ldi	r24, 0x85	; 133
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN5Print7printlnEv>

	//Constant rate of loop process
	long timeConsumed = millis() - startTime;
    1402:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <millis>
	long toDelay = 100 - timeConsumed;
    1406:	a6 01       	movw	r20, r12
    1408:	95 01       	movw	r18, r10
    140a:	26 1b       	sub	r18, r22
    140c:	37 0b       	sbc	r19, r23
    140e:	48 0b       	sbc	r20, r24
    1410:	59 0b       	sbc	r21, r25
    1412:	2c 59       	subi	r18, 0x9C	; 156
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
    1416:	4f 4f       	sbci	r20, 0xFF	; 255
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
	if (toDelay > 0 && toDelay < 100) {
    141a:	da 01       	movw	r26, r20
    141c:	c9 01       	movw	r24, r18
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	a1 09       	sbc	r26, r1
    1422:	b1 09       	sbc	r27, r1
    1424:	83 36       	cpi	r24, 0x63	; 99
    1426:	91 05       	cpc	r25, r1
    1428:	a1 05       	cpc	r26, r1
    142a:	b1 05       	cpc	r27, r1
    142c:	18 f4       	brcc	.+6      	; 0x1434 <loop+0x10a>
		delay(toDelay);
    142e:	ca 01       	movw	r24, r20
    1430:	b9 01       	movw	r22, r18
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <loop+0x11c>
	} else if (toDelay > 100){
    1434:	25 36       	cpi	r18, 0x65	; 101
    1436:	31 05       	cpc	r19, r1
    1438:	41 05       	cpc	r20, r1
    143a:	51 05       	cpc	r21, r1
    143c:	34 f0       	brlt	.+12     	; 0x144a <loop+0x120>
		delay(100);
    143e:	64 e6       	ldi	r22, 0x64	; 100
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <delay>
	}
    144a:	ce 01       	movw	r24, r28
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN6StringD1Ev>
}
    1452:	27 96       	adiw	r28, 0x07	; 7
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	08 95       	ret

00001474 <setup>:
//For timed events like stopping with delay and turning
unsigned long millisTimer = 0;
int eventTimerMode = NONE;

//The setup function is called once at startup of the sketch
void setup() {
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
	//set to baud rate of bluetooth model
	Serial.begin(BAUD_RATE_BT);
    1478:	40 91 84 01 	lds	r20, 0x0184
    147c:	50 91 85 01 	lds	r21, 0x0185
    1480:	60 91 86 01 	lds	r22, 0x0186
    1484:	70 91 87 01 	lds	r23, 0x0187
    1488:	85 e8       	ldi	r24, 0x85	; 133
    148a:	93 e0       	ldi	r25, 0x03	; 3
    148c:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14HardwareSerial5beginEm>

	//init Infrared Pin for backside proximity sensor
	pinMode(IR_BACK, INPUT);
    1490:	80 91 7e 01 	lds	r24, 0x017E
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	0e 94 95 10 	call	0x212a	; 0x212a <pinMode>

	//init Motor Pins
	int i;
	for (i = 5; i <= 7; i++)
		pinMode(i, OUTPUT);
    149a:	85 e0       	ldi	r24, 0x05	; 5
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	0e 94 95 10 	call	0x212a	; 0x212a <pinMode>
    14a2:	86 e0       	ldi	r24, 0x06	; 6
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	0e 94 95 10 	call	0x212a	; 0x212a <pinMode>
    14aa:	87 e0       	ldi	r24, 0x07	; 7
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	0e 94 95 10 	call	0x212a	; 0x212a <pinMode>

	//Attach Servo for ultrasonix sensor movement
	usservo.attach(SERVO_US);
    14b2:	04 ef       	ldi	r16, 0xF4	; 244
    14b4:	12 e0       	ldi	r17, 0x02	; 2
    14b6:	60 91 80 01 	lds	r22, 0x0180
    14ba:	70 91 81 01 	lds	r23, 0x0181
    14be:	c8 01       	movw	r24, r16
    14c0:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN5Servo6attachEi>
	//Set servo to middle
	usservo.write(SERVO_MIDDLE);
    14c4:	60 91 88 01 	lds	r22, 0x0188
    14c8:	70 91 89 01 	lds	r23, 0x0189
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 23 04 	call	0x846	; 0x846 <_ZN5Servo5writeEi>

	//Register functions for events sent from Android Brain
	meetAndroid.registerFunction(advanceAtSpeed, 'A');
    14d2:	0e e0       	ldi	r16, 0x0E	; 14
    14d4:	12 e0       	ldi	r17, 0x02	; 2
    14d6:	c8 01       	movw	r24, r16
    14d8:	65 e2       	ldi	r22, 0x25	; 37
    14da:	79 e0       	ldi	r23, 0x09	; 9
    14dc:	41 e4       	ldi	r20, 0x41	; 65
    14de:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN11MeetAndroid16registerFunctionEPFvhhEh>
	meetAndroid.registerFunction(backOffAtSpeed, 'B');
    14e2:	c8 01       	movw	r24, r16
    14e4:	6d ef       	ldi	r22, 0xFD	; 253
    14e6:	78 e0       	ldi	r23, 0x08	; 8
    14e8:	42 e4       	ldi	r20, 0x42	; 66
    14ea:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN11MeetAndroid16registerFunctionEPFvhhEh>
	meetAndroid.registerFunction(stopWithDelay, 'S');
    14ee:	c8 01       	movw	r24, r16
    14f0:	68 e3       	ldi	r22, 0x38	; 56
    14f2:	79 e0       	ldi	r23, 0x09	; 9
    14f4:	43 e5       	ldi	r20, 0x53	; 83
    14f6:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN11MeetAndroid16registerFunctionEPFvhhEh>
	meetAndroid.registerFunction(turnLeftWithAngle, 'L');
    14fa:	c8 01       	movw	r24, r16
    14fc:	6e e9       	ldi	r22, 0x9E	; 158
    14fe:	78 e0       	ldi	r23, 0x08	; 8
    1500:	4c e4       	ldi	r20, 0x4C	; 76
    1502:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN11MeetAndroid16registerFunctionEPFvhhEh>
	meetAndroid.registerFunction(turnRightWithAngle, 'R');
    1506:	c8 01       	movw	r24, r16
    1508:	6f e3       	ldi	r22, 0x3F	; 63
    150a:	78 e0       	ldi	r23, 0x08	; 8
    150c:	42 e5       	ldi	r20, 0x52	; 82
    150e:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN11MeetAndroid16registerFunctionEPFvhhEh>
}
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1518:	08 95       	ret

0000151a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1532:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1536:	20 91 3d 03 	lds	r18, 0x033D
    153a:	30 91 3e 03 	lds	r19, 0x033E

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    153e:	2f 5f       	subi	r18, 0xFF	; 255
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	2f 73       	andi	r18, 0x3F	; 63
    1544:	30 70       	andi	r19, 0x00	; 0
    1546:	80 91 3f 03 	lds	r24, 0x033F
    154a:	90 91 40 03 	lds	r25, 0x0340
    154e:	28 17       	cp	r18, r24
    1550:	39 07       	cpc	r19, r25
    1552:	59 f0       	breq	.+22     	; 0x156a <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    1554:	e0 91 3d 03 	lds	r30, 0x033D
    1558:	f0 91 3e 03 	lds	r31, 0x033E
    155c:	e3 50       	subi	r30, 0x03	; 3
    155e:	fd 4f       	sbci	r31, 0xFD	; 253
    1560:	40 83       	st	Z, r20
    buffer->head = i;
    1562:	30 93 3e 03 	sts	0x033E, r19
    1566:	20 93 3d 03 	sts	0x033D, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	9f 91       	pop	r25
    1570:	8f 91       	pop	r24
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1582:	e0 91 91 03 	lds	r30, 0x0391
    1586:	f0 91 92 03 	lds	r31, 0x0392
    158a:	e0 5c       	subi	r30, 0xC0	; 192
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	81 91       	ld	r24, Z+
    1590:	91 91       	ld	r25, Z+
    1592:	20 81       	ld	r18, Z
    1594:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1596:	82 1b       	sub	r24, r18
    1598:	93 0b       	sbc	r25, r19
    159a:	8f 73       	andi	r24, 0x3F	; 63
    159c:	90 70       	andi	r25, 0x00	; 0
    159e:	89 2b       	or	r24, r25
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <_Z14serialEventRunv+0x24>
    15a2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_Z11serialEventv>
    15a6:	08 95       	ret

000015a8 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	2f 93       	push	r18
    15b4:	3f 93       	push	r19
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    15be:	20 91 81 03 	lds	r18, 0x0381
    15c2:	30 91 82 03 	lds	r19, 0x0382
    15c6:	80 91 83 03 	lds	r24, 0x0383
    15ca:	90 91 84 03 	lds	r25, 0x0384
    15ce:	28 17       	cp	r18, r24
    15d0:	39 07       	cpc	r19, r25
    15d2:	31 f4       	brne	.+12     	; 0x15e0 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    15d4:	80 91 c1 00 	lds	r24, 0x00C1
    15d8:	8f 7d       	andi	r24, 0xDF	; 223
    15da:	80 93 c1 00 	sts	0x00C1, r24
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    15e0:	e0 91 83 03 	lds	r30, 0x0383
    15e4:	f0 91 84 03 	lds	r31, 0x0384
    15e8:	ef 5b       	subi	r30, 0xBF	; 191
    15ea:	fc 4f       	sbci	r31, 0xFC	; 252
    15ec:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    15ee:	80 91 83 03 	lds	r24, 0x0383
    15f2:	90 91 84 03 	lds	r25, 0x0384
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	8f 73       	andi	r24, 0x3F	; 63
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	90 93 84 03 	sts	0x0384, r25
    1600:	80 93 83 03 	sts	0x0383, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1604:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1608:	ff 91       	pop	r31
    160a:	ef 91       	pop	r30
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
    1632:	7a 01       	movw	r14, r20
    1634:	8b 01       	movw	r16, r22
    1636:	dd 24       	eor	r13, r13
    1638:	40 30       	cpi	r20, 0x00	; 0
    163a:	81 ee       	ldi	r24, 0xE1	; 225
    163c:	58 07       	cpc	r21, r24
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	68 07       	cpc	r22, r24
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	78 07       	cpc	r23, r24
    1646:	11 f0       	breq	.+4      	; 0x164c <_ZN14HardwareSerial5beginEm+0x2e>
    1648:	dd 24       	eor	r13, r13
    164a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	a9 2e       	mov	r10, r25
    1650:	b1 2c       	mov	r11, r1
    1652:	ec 89       	ldd	r30, Y+20	; 0x14
    1654:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1656:	dd 20       	and	r13, r13
    1658:	69 f0       	breq	.+26     	; 0x1674 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    165a:	c5 01       	movw	r24, r10
    165c:	0e 8c       	ldd	r0, Y+30	; 0x1e
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <_ZN14HardwareSerial5beginEm+0x46>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <_ZN14HardwareSerial5beginEm+0x42>
    1668:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	79 e0       	ldi	r23, 0x09	; 9
    166e:	8d e3       	ldi	r24, 0x3D	; 61
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	05 c0       	rjmp	.+10     	; 0x167e <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1674:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1676:	60 e8       	ldi	r22, 0x80	; 128
    1678:	74 e8       	ldi	r23, 0x84	; 132
    167a:	8e e1       	ldi	r24, 0x1E	; 30
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a8 01       	movw	r20, r16
    1680:	97 01       	movw	r18, r14
    1682:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodsi4>
    1686:	21 50       	subi	r18, 0x01	; 1
    1688:	30 40       	sbci	r19, 0x00	; 0
    168a:	40 40       	sbci	r20, 0x00	; 0
    168c:	50 40       	sbci	r21, 0x00	; 0
    168e:	56 95       	lsr	r21
    1690:	47 95       	ror	r20
    1692:	37 95       	ror	r19
    1694:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1696:	80 e1       	ldi	r24, 0x10	; 16
    1698:	20 30       	cpi	r18, 0x00	; 0
    169a:	38 07       	cpc	r19, r24
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <_ZN14HardwareSerial5beginEm+0x88>
    169e:	dd 20       	and	r13, r13
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <_ZN14HardwareSerial5beginEm+0x88>
    16a2:	dd 24       	eor	r13, r13
    16a4:	d6 cf       	rjmp	.-84     	; 0x1652 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    16a6:	e8 89       	ldd	r30, Y+16	; 0x10
    16a8:	f9 89       	ldd	r31, Y+17	; 0x11
    16aa:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    16ac:	ea 89       	ldd	r30, Y+18	; 0x12
    16ae:	fb 89       	ldd	r31, Y+19	; 0x13
    16b0:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    16b2:	ee 89       	ldd	r30, Y+22	; 0x16
    16b4:	ff 89       	ldd	r31, Y+23	; 0x17
    16b6:	40 81       	ld	r20, Z
    16b8:	21 e0       	ldi	r18, 0x01	; 1
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	c9 01       	movw	r24, r18
    16be:	0a 8c       	ldd	r0, Y+26	; 0x1a
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <_ZN14HardwareSerial5beginEm+0xa8>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <_ZN14HardwareSerial5beginEm+0xa4>
    16ca:	48 2b       	or	r20, r24
    16cc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    16ce:	ee 89       	ldd	r30, Y+22	; 0x16
    16d0:	ff 89       	ldd	r31, Y+23	; 0x17
    16d2:	40 81       	ld	r20, Z
    16d4:	c9 01       	movw	r24, r18
    16d6:	0b 8c       	ldd	r0, Y+27	; 0x1b
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <_ZN14HardwareSerial5beginEm+0xc0>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <_ZN14HardwareSerial5beginEm+0xbc>
    16e2:	48 2b       	or	r20, r24
    16e4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    16e6:	ee 89       	ldd	r30, Y+22	; 0x16
    16e8:	ff 89       	ldd	r31, Y+23	; 0x17
    16ea:	40 81       	ld	r20, Z
    16ec:	c9 01       	movw	r24, r18
    16ee:	0c 8c       	ldd	r0, Y+28	; 0x1c
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <_ZN14HardwareSerial5beginEm+0xd8>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <_ZN14HardwareSerial5beginEm+0xd4>
    16fa:	48 2b       	or	r20, r24
    16fc:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    16fe:	ee 89       	ldd	r30, Y+22	; 0x16
    1700:	ff 89       	ldd	r31, Y+23	; 0x17
    1702:	80 81       	ld	r24, Z
    1704:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1706:	02 c0       	rjmp	.+4      	; 0x170c <_ZN14HardwareSerial5beginEm+0xee>
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <_ZN14HardwareSerial5beginEm+0xea>
    1710:	20 95       	com	r18
    1712:	28 23       	and	r18, r24
    1714:	20 83       	st	Z, r18
}
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	08 95       	ret

0000172a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    172a:	dc 01       	movw	r26, r24
    172c:	1c 96       	adiw	r26, 0x0c	; 12
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	1d 97       	sbiw	r26, 0x0d	; 13
    1734:	e0 5c       	subi	r30, 0xC0	; 192
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	21 91       	ld	r18, Z+
    173a:	31 91       	ld	r19, Z+
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	28 1b       	sub	r18, r24
    1742:	39 0b       	sbc	r19, r25
    1744:	2f 73       	andi	r18, 0x3F	; 63
    1746:	30 70       	andi	r19, 0x00	; 0
}
    1748:	c9 01       	movw	r24, r18
    174a:	08 95       	ret

0000174c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    174c:	dc 01       	movw	r26, r24
    174e:	1c 96       	adiw	r26, 0x0c	; 12
    1750:	ed 91       	ld	r30, X+
    1752:	fc 91       	ld	r31, X
    1754:	1d 97       	sbiw	r26, 0x0d	; 13
    1756:	e0 5c       	subi	r30, 0xC0	; 192
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	20 81       	ld	r18, Z
    175c:	31 81       	ldd	r19, Z+1	; 0x01
    175e:	e0 54       	subi	r30, 0x40	; 64
    1760:	f0 40       	sbci	r31, 0x00	; 0
    1762:	df 01       	movw	r26, r30
    1764:	ae 5b       	subi	r26, 0xBE	; 190
    1766:	bf 4f       	sbci	r27, 0xFF	; 255
    1768:	8d 91       	ld	r24, X+
    176a:	9c 91       	ld	r25, X
    176c:	11 97       	sbiw	r26, 0x01	; 1
    176e:	28 17       	cp	r18, r24
    1770:	39 07       	cpc	r19, r25
    1772:	19 f4       	brne	.+6      	; 0x177a <_ZN14HardwareSerial4peekEv+0x2e>
    1774:	2f ef       	ldi	r18, 0xFF	; 255
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    177a:	8d 91       	ld	r24, X+
    177c:	9c 91       	ld	r25, X
    177e:	e8 0f       	add	r30, r24
    1780:	f9 1f       	adc	r31, r25
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1788:	c9 01       	movw	r24, r18
    178a:	08 95       	ret

0000178c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    178c:	dc 01       	movw	r26, r24
    178e:	1c 96       	adiw	r26, 0x0c	; 12
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	1d 97       	sbiw	r26, 0x0d	; 13
    1796:	e0 5c       	subi	r30, 0xC0	; 192
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	20 81       	ld	r18, Z
    179c:	31 81       	ldd	r19, Z+1	; 0x01
    179e:	e0 54       	subi	r30, 0x40	; 64
    17a0:	f0 40       	sbci	r31, 0x00	; 0
    17a2:	df 01       	movw	r26, r30
    17a4:	ae 5b       	subi	r26, 0xBE	; 190
    17a6:	bf 4f       	sbci	r27, 0xFF	; 255
    17a8:	8d 91       	ld	r24, X+
    17aa:	9c 91       	ld	r25, X
    17ac:	11 97       	sbiw	r26, 0x01	; 1
    17ae:	28 17       	cp	r18, r24
    17b0:	39 07       	cpc	r19, r25
    17b2:	19 f4       	brne	.+6      	; 0x17ba <_ZN14HardwareSerial4readEv+0x2e>
    17b4:	2f ef       	ldi	r18, 0xFF	; 255
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	10 c0       	rjmp	.+32     	; 0x17da <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    17ba:	8d 91       	ld	r24, X+
    17bc:	9c 91       	ld	r25, X
    17be:	11 97       	sbiw	r26, 0x01	; 1
    17c0:	e8 0f       	add	r30, r24
    17c2:	f9 1f       	adc	r31, r25
    17c4:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    17c6:	8d 91       	ld	r24, X+
    17c8:	9c 91       	ld	r25, X
    17ca:	11 97       	sbiw	r26, 0x01	; 1
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	8f 73       	andi	r24, 0x3F	; 63
    17d0:	90 70       	andi	r25, 0x00	; 0
    17d2:	11 96       	adiw	r26, 0x01	; 1
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    return c;
    17d8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    17da:	c9 01       	movw	r24, r18
    17dc:	08 95       	ret

000017de <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    17de:	fc 01       	movw	r30, r24
    17e0:	86 85       	ldd	r24, Z+14	; 0x0e
    17e2:	97 85       	ldd	r25, Z+15	; 0x0f
    17e4:	dc 01       	movw	r26, r24
    17e6:	a0 5c       	subi	r26, 0xC0	; 192
    17e8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ea:	fc 01       	movw	r30, r24
    17ec:	ee 5b       	subi	r30, 0xBE	; 190
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	2d 91       	ld	r18, X+
    17f2:	3c 91       	ld	r19, X
    17f4:	11 97       	sbiw	r26, 0x01	; 1
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	28 17       	cp	r18, r24
    17fc:	39 07       	cpc	r19, r25
    17fe:	c1 f7       	brne	.-16     	; 0x17f0 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    1800:	08 95       	ret

00001802 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1808:	ee 85       	ldd	r30, Y+14	; 0x0e
    180a:	ff 85       	ldd	r31, Y+15	; 0x0f
    180c:	e0 5c       	subi	r30, 0xC0	; 192
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	e0 54       	subi	r30, 0x40	; 64
    1816:	f0 40       	sbci	r31, 0x00	; 0
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	2f 73       	andi	r18, 0x3F	; 63
    181e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1820:	df 01       	movw	r26, r30
    1822:	ae 5b       	subi	r26, 0xBE	; 190
    1824:	bf 4f       	sbci	r27, 0xFF	; 255
    1826:	8d 91       	ld	r24, X+
    1828:	9c 91       	ld	r25, X
    182a:	11 97       	sbiw	r26, 0x01	; 1
    182c:	28 17       	cp	r18, r24
    182e:	39 07       	cpc	r19, r25
    1830:	d1 f3       	breq	.-12     	; 0x1826 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1832:	e0 5c       	subi	r30, 0xC0	; 192
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	e0 54       	subi	r30, 0x40	; 64
    183c:	f0 40       	sbci	r31, 0x00	; 0
    183e:	e8 0f       	add	r30, r24
    1840:	f9 1f       	adc	r31, r25
    1842:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1844:	ee 85       	ldd	r30, Y+14	; 0x0e
    1846:	ff 85       	ldd	r31, Y+15	; 0x0f
    1848:	e0 5c       	subi	r30, 0xC0	; 192
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	31 83       	std	Z+1, r19	; 0x01
    184e:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1850:	ee 89       	ldd	r30, Y+22	; 0x16
    1852:	ff 89       	ldd	r31, Y+23	; 0x17
    1854:	20 81       	ld	r18, Z
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <_ZN14HardwareSerial5writeEh+0x60>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <_ZN14HardwareSerial5writeEh+0x5c>
    1866:	28 2b       	or	r18, r24
    1868:	20 83       	st	Z, r18
  
  return 1;
}
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1874:	10 92 88 03 	sts	0x0388, r1
    1878:	10 92 87 03 	sts	0x0387, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    187c:	88 ee       	ldi	r24, 0xE8	; 232
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	80 93 89 03 	sts	0x0389, r24
    1888:	90 93 8a 03 	sts	0x038A, r25
    188c:	a0 93 8b 03 	sts	0x038B, r26
    1890:	b0 93 8c 03 	sts	0x038C, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1894:	88 e9       	ldi	r24, 0x98	; 152
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	90 93 86 03 	sts	0x0386, r25
    189c:	80 93 85 03 	sts	0x0385, r24
{
  _rx_buffer = rx_buffer;
    18a0:	8d ef       	ldi	r24, 0xFD	; 253
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	90 93 92 03 	sts	0x0392, r25
    18a8:	80 93 91 03 	sts	0x0391, r24
  _tx_buffer = tx_buffer;
    18ac:	81 e4       	ldi	r24, 0x41	; 65
    18ae:	93 e0       	ldi	r25, 0x03	; 3
    18b0:	90 93 94 03 	sts	0x0394, r25
    18b4:	80 93 93 03 	sts	0x0393, r24
  _ubrrh = ubrrh;
    18b8:	85 ec       	ldi	r24, 0xC5	; 197
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	90 93 96 03 	sts	0x0396, r25
    18c0:	80 93 95 03 	sts	0x0395, r24
  _ubrrl = ubrrl;
    18c4:	84 ec       	ldi	r24, 0xC4	; 196
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	90 93 98 03 	sts	0x0398, r25
    18cc:	80 93 97 03 	sts	0x0397, r24
  _ucsra = ucsra;
    18d0:	80 ec       	ldi	r24, 0xC0	; 192
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	90 93 9a 03 	sts	0x039A, r25
    18d8:	80 93 99 03 	sts	0x0399, r24
  _ucsrb = ucsrb;
    18dc:	81 ec       	ldi	r24, 0xC1	; 193
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	90 93 9c 03 	sts	0x039C, r25
    18e4:	80 93 9b 03 	sts	0x039B, r24
  _udr = udr;
    18e8:	86 ec       	ldi	r24, 0xC6	; 198
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	90 93 9e 03 	sts	0x039E, r25
    18f0:	80 93 9d 03 	sts	0x039D, r24
  _rxen = rxen;
    18f4:	84 e0       	ldi	r24, 0x04	; 4
    18f6:	80 93 9f 03 	sts	0x039F, r24
  _txen = txen;
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	80 93 a0 03 	sts	0x03A0, r24
  _rxcie = rxcie;
    1900:	87 e0       	ldi	r24, 0x07	; 7
    1902:	80 93 a1 03 	sts	0x03A1, r24
  _udrie = udrie;
    1906:	85 e0       	ldi	r24, 0x05	; 5
    1908:	80 93 a2 03 	sts	0x03A2, r24
  _u2x = u2x;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	80 93 a3 03 	sts	0x03A3, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1912:	08 95       	ret

00001914 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	7c 01       	movw	r14, r24
    1926:	6b 01       	movw	r12, r22
    1928:	8a 01       	movw	r16, r20
    192a:	c0 e0       	ldi	r28, 0x00	; 0
    192c:	d0 e0       	ldi	r29, 0x00	; 0
    192e:	0f c0       	rjmp	.+30     	; 0x194e <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1930:	d6 01       	movw	r26, r12
    1932:	6d 91       	ld	r22, X+
    1934:	6d 01       	movw	r12, r26
    1936:	d7 01       	movw	r26, r14
    1938:	ed 91       	ld	r30, X+
    193a:	fc 91       	ld	r31, X
    193c:	01 90       	ld	r0, Z+
    193e:	f0 81       	ld	r31, Z
    1940:	e0 2d       	mov	r30, r0
    1942:	c7 01       	movw	r24, r14
    1944:	09 95       	icall
    1946:	c8 0f       	add	r28, r24
    1948:	d9 1f       	adc	r29, r25
    194a:	01 50       	subi	r16, 0x01	; 1
    194c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    194e:	01 15       	cp	r16, r1
    1950:	11 05       	cpc	r17, r1
    1952:	71 f7       	brne	.-36     	; 0x1930 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1954:	ce 01       	movw	r24, r28
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	08 95       	ret

00001968 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1968:	dc 01       	movw	r26, r24
{
  return write(c);
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	01 90       	ld	r0, Z+
    1970:	f0 81       	ld	r31, Z
    1972:	e0 2d       	mov	r30, r0
    1974:	09 95       	icall
}
    1976:	08 95       	ret

00001978 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1982:	dc 01       	movw	r26, r24
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	01 90       	ld	r0, Z+
    198a:	f0 81       	ld	r31, Z
    198c:	e0 2d       	mov	r30, r0
    198e:	6d e0       	ldi	r22, 0x0D	; 13
    1990:	09 95       	icall
    1992:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    1994:	d8 01       	movw	r26, r16
    1996:	ed 91       	ld	r30, X+
    1998:	fc 91       	ld	r31, X
    199a:	01 90       	ld	r0, Z+
    199c:	f0 81       	ld	r31, Z
    199e:	e0 2d       	mov	r30, r0
    19a0:	c8 01       	movw	r24, r16
    19a2:	6a e0       	ldi	r22, 0x0A	; 10
    19a4:	09 95       	icall
    19a6:	9c 01       	movw	r18, r24
    19a8:	2e 0d       	add	r18, r14
    19aa:	3f 1d       	adc	r19, r15
    19ac:	c9 01       	movw	r24, r18
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	08 95       	ret

000019b8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	db 01       	movw	r26, r22
    19be:	0d 90       	ld	r0, X+
    19c0:	00 20       	and	r0, r0
    19c2:	e9 f7       	brne	.-6      	; 0x19be <_ZN5Print5writeEPKc+0x6>
    19c4:	11 97       	sbiw	r26, 0x01	; 1
    19c6:	a6 1b       	sub	r26, r22
    19c8:	b7 0b       	sbc	r27, r23
    19ca:	ec 01       	movw	r28, r24
    19cc:	e8 81       	ld	r30, Y
    19ce:	f9 81       	ldd	r31, Y+1	; 0x01
    19d0:	02 80       	ldd	r0, Z+2	; 0x02
    19d2:	f3 81       	ldd	r31, Z+3	; 0x03
    19d4:	e0 2d       	mov	r30, r0
    19d6:	ad 01       	movw	r20, r26
    19d8:	09 95       	icall
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	7f 92       	push	r7
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	a1 97       	sbiw	r28, 0x21	; 33
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	2c 01       	movw	r4, r24
    1a10:	74 2e       	mov	r7, r20
    1a12:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <_ZN5Print11printNumberEmh+0x3a>
    1a18:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1a1a:	19 a2       	std	Y+33, r1	; 0x21
    1a1c:	31 e2       	ldi	r19, 0x21	; 33
    1a1e:	c3 2e       	mov	r12, r19
    1a20:	d1 2c       	mov	r13, r1
    1a22:	cc 0e       	add	r12, r28
    1a24:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1a26:	82 2e       	mov	r8, r18
    1a28:	99 24       	eor	r9, r9
    1a2a:	aa 24       	eor	r10, r10
    1a2c:	bb 24       	eor	r11, r11
    1a2e:	67 2d       	mov	r22, r7
    1a30:	75 2f       	mov	r23, r21
    1a32:	a5 01       	movw	r20, r10
    1a34:	94 01       	movw	r18, r8
    1a36:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodsi4>
    1a3a:	79 01       	movw	r14, r18
    1a3c:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1a3e:	c8 01       	movw	r24, r16
    1a40:	b7 01       	movw	r22, r14
    1a42:	a5 01       	movw	r20, r10
    1a44:	94 01       	movw	r18, r8
    1a46:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsi3>
    1a4a:	47 2d       	mov	r20, r7
    1a4c:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1a4e:	08 94       	sec
    1a50:	c1 08       	sbc	r12, r1
    1a52:	d1 08       	sbc	r13, r1
    1a54:	4a 30       	cpi	r20, 0x0A	; 10
    1a56:	14 f4       	brge	.+4      	; 0x1a5c <_ZN5Print11printNumberEmh+0x7c>
    1a58:	40 5d       	subi	r20, 0xD0	; 208
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <_ZN5Print11printNumberEmh+0x7e>
    1a5c:	49 5c       	subi	r20, 0xC9	; 201
    1a5e:	f6 01       	movw	r30, r12
    1a60:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1a62:	e1 14       	cp	r14, r1
    1a64:	f1 04       	cpc	r15, r1
    1a66:	01 05       	cpc	r16, r1
    1a68:	11 05       	cpc	r17, r1
    1a6a:	21 f0       	breq	.+8      	; 0x1a74 <_ZN5Print11printNumberEmh+0x94>
    1a6c:	7e 2c       	mov	r7, r14
    1a6e:	5f 2d       	mov	r21, r15
    1a70:	c8 01       	movw	r24, r16
    1a72:	dd cf       	rjmp	.-70     	; 0x1a2e <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1a74:	c2 01       	movw	r24, r4
    1a76:	b6 01       	movw	r22, r12
    1a78:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN5Print5writeEPKc>
}
    1a7c:	a1 96       	adiw	r28, 0x21	; 33
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	9f 90       	pop	r9
    1a9e:	8f 90       	pop	r8
    1aa0:	7f 90       	pop	r7
    1aa2:	5f 90       	pop	r5
    1aa4:	4f 90       	pop	r4
    1aa6:	08 95       	ret

00001aa8 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1aa8:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1aaa:	21 15       	cp	r18, r1
    1aac:	31 05       	cpc	r19, r1
    1aae:	41 f4       	brne	.+16     	; 0x1ac0 <_ZN5Print5printEmi+0x18>
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	fc 91       	ld	r31, X
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	f0 81       	ld	r31, Z
    1ab8:	e0 2d       	mov	r30, r0
    1aba:	64 2f       	mov	r22, r20
    1abc:	09 95       	icall
    1abe:	08 95       	ret
  else return printNumber(n, base);
    1ac0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN5Print11printNumberEmh>
}
    1ac4:	08 95       	ret

00001ac6 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1ad0:	e6 2e       	mov	r14, r22
    1ad2:	ff 24       	eor	r15, r15
    1ad4:	00 e0       	ldi	r16, 0x00	; 0
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	b8 01       	movw	r22, r16
    1ada:	a7 01       	movw	r20, r14
    1adc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEmi>
}
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1aea:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN5Print5writeEPKc>
}
    1aee:	08 95       	ret

00001af0 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    1af0:	2f 92       	push	r2
    1af2:	3f 92       	push	r3
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	3b 01       	movw	r6, r22
    1b1a:	4c 01       	movw	r8, r24
    1b1c:	19 01       	movw	r2, r18
    1b1e:	2a 01       	movw	r4, r20
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	6a 19       	sub	r22, r10
    1b2a:	7b 09       	sbc	r23, r11
    1b2c:	8c 09       	sbc	r24, r12
    1b2e:	9d 09       	sbc	r25, r13
    1b30:	62 1a       	sub	r6, r18
    1b32:	73 0a       	sbc	r7, r19
    1b34:	84 0a       	sbc	r8, r20
    1b36:	95 0a       	sbc	r9, r21
    1b38:	a4 01       	movw	r20, r8
    1b3a:	93 01       	movw	r18, r6
    1b3c:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsi3>
    1b40:	e2 18       	sub	r14, r2
    1b42:	f3 08       	sbc	r15, r3
    1b44:	04 09       	sbc	r16, r4
    1b46:	15 09       	sbc	r17, r5
    1b48:	a8 01       	movw	r20, r16
    1b4a:	97 01       	movw	r18, r14
    1b4c:	0e 94 77 12 	call	0x24ee	; 0x24ee <__divmodsi4>
    1b50:	2a 0d       	add	r18, r10
    1b52:	3b 1d       	adc	r19, r11
    1b54:	4c 1d       	adc	r20, r12
    1b56:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    1b58:	b9 01       	movw	r22, r18
    1b5a:	ca 01       	movw	r24, r20
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	7f 90       	pop	r7
    1b76:	6f 90       	pop	r6
    1b78:	5f 90       	pop	r5
    1b7a:	4f 90       	pop	r4
    1b7c:	3f 90       	pop	r3
    1b7e:	2f 90       	pop	r2
    1b80:	08 95       	ret

00001b82 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	8b 01       	movw	r16, r22
{
	if (!bufsize || !buf) return;
    1b8e:	41 15       	cp	r20, r1
    1b90:	51 05       	cpc	r21, r1
    1b92:	f9 f0       	breq	.+62     	; 0x1bd2 <_ZNK6String8getBytesEPhjj+0x50>
    1b94:	61 15       	cp	r22, r1
    1b96:	71 05       	cpc	r23, r1
    1b98:	e1 f0       	breq	.+56     	; 0x1bd2 <_ZNK6String8getBytesEPhjj+0x50>
	if (index >= len) {
    1b9a:	84 81       	ldd	r24, Z+4	; 0x04
    1b9c:	95 81       	ldd	r25, Z+5	; 0x05
    1b9e:	28 17       	cp	r18, r24
    1ba0:	39 07       	cpc	r19, r25
    1ba2:	18 f0       	brcs	.+6      	; 0x1baa <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    1ba4:	fb 01       	movw	r30, r22
    1ba6:	10 82       	st	Z, r1
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <_ZNK6String8getBytesEPhjj+0x50>
		return;
	}
	unsigned int n = bufsize - 1;
    1baa:	41 50       	subi	r20, 0x01	; 1
    1bac:	50 40       	sbci	r21, 0x00	; 0
    1bae:	ec 01       	movw	r28, r24
    1bb0:	c2 1b       	sub	r28, r18
    1bb2:	d3 0b       	sbc	r29, r19
    1bb4:	4c 17       	cp	r20, r28
    1bb6:	5d 07       	cpc	r21, r29
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <_ZNK6String8getBytesEPhjj+0x3a>
    1bba:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	62 0f       	add	r22, r18
    1bc2:	73 1f       	adc	r23, r19
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	ae 01       	movw	r20, r28
    1bc8:	0e 94 92 02 	call	0x524	; 0x524 <strncpy>
	buf[n] = 0;
    1bcc:	c0 0f       	add	r28, r16
    1bce:	d1 1f       	adc	r29, r17
    1bd0:	18 82       	st	Y, r1
}
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	ec 01       	movw	r28, r24
    1be6:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1be8:	6f 5f       	subi	r22, 0xFF	; 255
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	88 81       	ld	r24, Y
    1bee:	99 81       	ldd	r25, Y+1	; 0x01
    1bf0:	0e 94 8f 01 	call	0x31e	; 0x31e <realloc>
	if (newbuffer) {
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	11 f4       	brne	.+4      	; 0x1bfc <_ZN6String12changeBufferEj+0x20>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    1bfc:	99 83       	std	Y+1, r25	; 0x01
    1bfe:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1c00:	1b 83       	std	Y+3, r17	; 0x03
    1c02:	0a 83       	std	Y+2, r16	; 0x02
    1c04:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    1c16:	88 81       	ld	r24, Y
    1c18:	99 81       	ldd	r25, Y+1	; 0x01
    1c1a:	89 2b       	or	r24, r25
    1c1c:	29 f0       	breq	.+10     	; 0x1c28 <_ZN6String7reserveEj+0x18>
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	86 17       	cp	r24, r22
    1c24:	97 07       	cpc	r25, r23
    1c26:	60 f4       	brcc	.+24     	; 0x1c40 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    1c28:	ce 01       	movw	r24, r28
    1c2a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_ZN6String12changeBufferEj>
    1c2e:	88 23       	and	r24, r24
    1c30:	41 f0       	breq	.+16     	; 0x1c42 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	89 2b       	or	r24, r25
    1c38:	19 f4       	brne	.+6      	; 0x1c40 <_ZN6String7reserveEj+0x30>
    1c3a:	e8 81       	ld	r30, Y
    1c3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c3e:	10 82       	st	Z, r1
    1c40:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
    1c56:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    1c58:	6c 81       	ldd	r22, Y+4	; 0x04
    1c5a:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    1c5c:	e1 14       	cp	r14, r1
    1c5e:	f1 04       	cpc	r15, r1
    1c60:	c1 f0       	breq	.+48     	; 0x1c92 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    1c62:	41 15       	cp	r20, r1
    1c64:	51 05       	cpc	r21, r1
    1c66:	99 f0       	breq	.+38     	; 0x1c8e <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    1c68:	8a 01       	movw	r16, r20
    1c6a:	06 0f       	add	r16, r22
    1c6c:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    1c6e:	b8 01       	movw	r22, r16
    1c70:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN6String7reserveEj>
    1c74:	88 23       	and	r24, r24
    1c76:	69 f0       	breq	.+26     	; 0x1c92 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    1c78:	88 81       	ld	r24, Y
    1c7a:	99 81       	ldd	r25, Y+1	; 0x01
    1c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	b7 01       	movw	r22, r14
    1c86:	0e 94 8b 02 	call	0x516	; 0x516 <strcpy>
	len = newlen;
    1c8a:	1d 83       	std	Y+5, r17	; 0x05
    1c8c:	0c 83       	std	Y+4, r16	; 0x04
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    1c92:	80 e0       	ldi	r24, 0x00	; 0
}
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	08 95       	ret

00001ca2 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	27 97       	sbiw	r28, 0x07	; 7
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	7c 01       	movw	r14, r24
    1cc0:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    1cc2:	8e 01       	movw	r16, r28
    1cc4:	0f 5f       	subi	r16, 0xFF	; 255
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	b8 01       	movw	r22, r16
    1cca:	4a e0       	ldi	r20, 0x0A	; 10
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	0e 94 a1 02 	call	0x542	; 0x542 <itoa>
	return concat(buf, strlen(buf));
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	01 90       	ld	r0, Z+
    1cd6:	00 20       	and	r0, r0
    1cd8:	e9 f7       	brne	.-6      	; 0x1cd4 <_ZN6String6concatEi+0x32>
    1cda:	31 97       	sbiw	r30, 0x01	; 1
    1cdc:	e0 1b       	sub	r30, r16
    1cde:	f1 0b       	sbc	r31, r17
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	b8 01       	movw	r22, r16
    1ce4:	af 01       	movw	r20, r30
    1ce6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN6String6concatEPKcj>
}
    1cea:	27 96       	adiw	r28, 0x07	; 7
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	08 95       	ret

00001d04 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    1d0a:	88 81       	ld	r24, Y
    1d0c:	99 81       	ldd	r25, Y+1	; 0x01
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <_ZN6String10invalidateEv+0x12>
    1d12:	0e 94 37 01 	call	0x26e	; 0x26e <free>
	buffer = NULL;
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	18 82       	st	Y, r1
	capacity = len = 0;
    1d1a:	1d 82       	std	Y+5, r1	; 0x05
    1d1c:	1c 82       	std	Y+4, r1	; 0x04
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	1a 82       	std	Y+2, r1	; 0x02
}
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	08 95       	ret

00001d28 <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	18 2f       	mov	r17, r24
    1d2e:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    1d30:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN6String6concatEi>
    1d34:	88 23       	and	r24, r24
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <_ZplRK15StringSumHelperi+0x18>
    1d38:	81 2f       	mov	r24, r17
    1d3a:	90 2f       	mov	r25, r16
    1d3c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN6String10invalidateEv>
	return a;
}
    1d40:	81 2f       	mov	r24, r17
    1d42:	90 2f       	mov	r25, r16
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	08 95       	ret

00001d4a <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	ec 01       	movw	r28, r24
    1d58:	7b 01       	movw	r14, r22
    1d5a:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    1d5c:	ba 01       	movw	r22, r20
    1d5e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN6String7reserveEj>
    1d62:	88 23       	and	r24, r24
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <_ZN6String4copyEPKcj+0x24>
		invalidate();
    1d66:	ce 01       	movw	r24, r28
    1d68:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN6String10invalidateEv>
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    1d6e:	1d 83       	std	Y+5, r17	; 0x05
    1d70:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1d72:	88 81       	ld	r24, Y
    1d74:	99 81       	ldd	r25, Y+1	; 0x01
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 8b 02 	call	0x516	; 0x516 <strcpy>
	return *this;
}
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	08 95       	ret

00001d8c <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1d92:	19 82       	std	Y+1, r1	; 0x01
    1d94:	18 82       	st	Y, r1
	capacity = 0;
    1d96:	1b 82       	std	Y+3, r1	; 0x03
    1d98:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    1d9a:	1d 82       	std	Y+5, r1	; 0x05
    1d9c:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    1d9e:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1da0:	61 15       	cp	r22, r1
    1da2:	71 05       	cpc	r23, r1
    1da4:	51 f0       	breq	.+20     	; 0x1dba <_ZN6StringC1EPKc+0x2e>
    1da6:	db 01       	movw	r26, r22
    1da8:	0d 90       	ld	r0, X+
    1daa:	00 20       	and	r0, r0
    1dac:	e9 f7       	brne	.-6      	; 0x1da8 <_ZN6StringC1EPKc+0x1c>
    1dae:	11 97       	sbiw	r26, 0x01	; 1
    1db0:	a6 1b       	sub	r26, r22
    1db2:	b7 0b       	sbc	r27, r23
    1db4:	ad 01       	movw	r20, r26
    1db6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN6String4copyEPKcj>
}
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	18 2f       	mov	r17, r24
    1dc6:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    1dc8:	61 15       	cp	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <_ZN6StringaSEPKc+0x24>
    1dce:	db 01       	movw	r26, r22
    1dd0:	0d 90       	ld	r0, X+
    1dd2:	00 20       	and	r0, r0
    1dd4:	e9 f7       	brne	.-6      	; 0x1dd0 <_ZN6StringaSEPKc+0x10>
    1dd6:	11 97       	sbiw	r26, 0x01	; 1
    1dd8:	a6 1b       	sub	r26, r22
    1dda:	b7 0b       	sbc	r27, r23
    1ddc:	ad 01       	movw	r20, r26
    1dde:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN6String4copyEPKcj>
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    1de4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN6String10invalidateEv>
	
	return *this;
}
    1de8:	81 2f       	mov	r24, r17
    1dea:	90 2f       	mov	r25, r16
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	08 95       	ret

00001df2 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	ec 01       	movw	r28, r24
    1df8:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    1dfa:	86 17       	cp	r24, r22
    1dfc:	97 07       	cpc	r25, r23
    1dfe:	61 f0       	breq	.+24     	; 0x1e18 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	61 15       	cp	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	29 f0       	breq	.+10     	; 0x1e14 <_ZN6StringaSERKS_+0x22>
    1e0a:	44 81       	ldd	r20, Z+4	; 0x04
    1e0c:	55 81       	ldd	r21, Z+5	; 0x05
    1e0e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN6String4copyEPKcj>
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    1e14:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN6String10invalidateEv>
	
	return *this;
}
    1e18:	ce 01       	movw	r24, r28
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    1e20:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1e22:	11 82       	std	Z+1, r1	; 0x01
    1e24:	10 82       	st	Z, r1
	capacity = 0;
    1e26:	13 82       	std	Z+3, r1	; 0x03
    1e28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1e2a:	15 82       	std	Z+5, r1	; 0x05
    1e2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    1e2e:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    1e30:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6StringaSERKS_>
}
    1e34:	08 95       	ret

00001e36 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    1e36:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1e38:	11 82       	std	Z+1, r1	; 0x01
    1e3a:	10 82       	st	Z, r1
	capacity = 0;
    1e3c:	13 82       	std	Z+3, r1	; 0x03
    1e3e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1e40:	15 82       	std	Z+5, r1	; 0x05
    1e42:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    1e44:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    1e46:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6StringaSERKS_>
}
    1e4a:	08 95       	ret

00001e4c <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    1e4c:	fc 01       	movw	r30, r24
{
	free(buffer);
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	0e 94 37 01 	call	0x26e	; 0x26e <free>
}
    1e56:	08 95       	ret

00001e58 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    1e58:	fc 01       	movw	r30, r24
{
	free(buffer);
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	0e 94 37 01 	call	0x26e	; 0x26e <free>
}
    1e62:	08 95       	ret

00001e64 <main>:
#include <Arduino.h>

int main(void)
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
{
	init();
    1e68:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e6c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e70:	c1 ec       	ldi	r28, 0xC1	; 193
    1e72:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e74:	0e 94 95 09 	call	0x132a	; 0x132a <loop>
		if (serialEventRun) serialEventRun();
    1e78:	20 97       	sbiw	r28, 0x00	; 0
    1e7a:	e1 f3       	breq	.-8      	; 0x1e74 <main+0x10>
    1e7c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_Z14serialEventRunv>
    1e80:	f9 cf       	rjmp	.-14     	; 0x1e74 <main+0x10>

00001e82 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1e82:	1f 92       	push	r1
    1e84:	0f 92       	push	r0
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	0f 92       	push	r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	2f 93       	push	r18
    1e8e:	3f 93       	push	r19
    1e90:	8f 93       	push	r24
    1e92:	9f 93       	push	r25
    1e94:	af 93       	push	r26
    1e96:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1e98:	80 91 a8 03 	lds	r24, 0x03A8
    1e9c:	90 91 a9 03 	lds	r25, 0x03A9
    1ea0:	a0 91 aa 03 	lds	r26, 0x03AA
    1ea4:	b0 91 ab 03 	lds	r27, 0x03AB
	unsigned char f = timer0_fract;
    1ea8:	30 91 ac 03 	lds	r19, 0x03AC

	m += MILLIS_INC;
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1eb2:	23 2f       	mov	r18, r19
    1eb4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1eb6:	2d 37       	cpi	r18, 0x7D	; 125
    1eb8:	20 f0       	brcs	.+8      	; 0x1ec2 <__vector_16+0x40>
		f -= FRACT_MAX;
    1eba:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	a1 1d       	adc	r26, r1
    1ec0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1ec2:	20 93 ac 03 	sts	0x03AC, r18
	timer0_millis = m;
    1ec6:	80 93 a8 03 	sts	0x03A8, r24
    1eca:	90 93 a9 03 	sts	0x03A9, r25
    1ece:	a0 93 aa 03 	sts	0x03AA, r26
    1ed2:	b0 93 ab 03 	sts	0x03AB, r27
	timer0_overflow_count++;
    1ed6:	80 91 a4 03 	lds	r24, 0x03A4
    1eda:	90 91 a5 03 	lds	r25, 0x03A5
    1ede:	a0 91 a6 03 	lds	r26, 0x03A6
    1ee2:	b0 91 a7 03 	lds	r27, 0x03A7
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	b1 1d       	adc	r27, r1
    1eec:	80 93 a4 03 	sts	0x03A4, r24
    1ef0:	90 93 a5 03 	sts	0x03A5, r25
    1ef4:	a0 93 a6 03 	sts	0x03A6, r26
    1ef8:	b0 93 a7 03 	sts	0x03A7, r27
}
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	3f 91       	pop	r19
    1f06:	2f 91       	pop	r18
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1f12:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1f14:	f8 94       	cli
	m = timer0_millis;
    1f16:	20 91 a8 03 	lds	r18, 0x03A8
    1f1a:	30 91 a9 03 	lds	r19, 0x03A9
    1f1e:	40 91 aa 03 	lds	r20, 0x03AA
    1f22:	50 91 ab 03 	lds	r21, 0x03AB
	SREG = oldSREG;
    1f26:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1f28:	b9 01       	movw	r22, r18
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	08 95       	ret

00001f2e <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    1f2e:	9b 01       	movw	r18, r22
    1f30:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1f32:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1f34:	f8 94       	cli
	m = timer0_overflow_count;
    1f36:	80 91 a4 03 	lds	r24, 0x03A4
    1f3a:	90 91 a5 03 	lds	r25, 0x03A5
    1f3e:	a0 91 a6 03 	lds	r26, 0x03A6
    1f42:	b0 91 a7 03 	lds	r27, 0x03A7
#if defined(TCNT0)
	t = TCNT0;
    1f46:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1f48:	a8 9b       	sbis	0x15, 0	; 21
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <delay+0x28>
    1f4c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <delay+0x28>
		m++;
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	a1 1d       	adc	r26, r1
    1f54:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1f56:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1f58:	ba 2f       	mov	r27, r26
    1f5a:	a9 2f       	mov	r26, r25
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	88 27       	eor	r24, r24
    1f60:	86 0f       	add	r24, r22
    1f62:	91 1d       	adc	r25, r1
    1f64:	a1 1d       	adc	r26, r1
    1f66:	b1 1d       	adc	r27, r1
    1f68:	62 e0       	ldi	r22, 0x02	; 2
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	aa 1f       	adc	r26, r26
    1f70:	bb 1f       	adc	r27, r27
    1f72:	6a 95       	dec	r22
    1f74:	d1 f7       	brne	.-12     	; 0x1f6a <delay+0x3c>
    1f76:	bc 01       	movw	r22, r24
    1f78:	2d c0       	rjmp	.+90     	; 0x1fd4 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1f7a:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1f7c:	f8 94       	cli
	m = timer0_overflow_count;
    1f7e:	80 91 a4 03 	lds	r24, 0x03A4
    1f82:	90 91 a5 03 	lds	r25, 0x03A5
    1f86:	a0 91 a6 03 	lds	r26, 0x03A6
    1f8a:	b0 91 a7 03 	lds	r27, 0x03A7
#if defined(TCNT0)
	t = TCNT0;
    1f8e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1f90:	a8 9b       	sbis	0x15, 0	; 21
    1f92:	05 c0       	rjmp	.+10     	; 0x1f9e <delay+0x70>
    1f94:	ef 3f       	cpi	r30, 0xFF	; 255
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <delay+0x70>
		m++;
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	a1 1d       	adc	r26, r1
    1f9c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1f9e:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1fa0:	ba 2f       	mov	r27, r26
    1fa2:	a9 2f       	mov	r26, r25
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	88 27       	eor	r24, r24
    1fa8:	8e 0f       	add	r24, r30
    1faa:	91 1d       	adc	r25, r1
    1fac:	a1 1d       	adc	r26, r1
    1fae:	b1 1d       	adc	r27, r1
    1fb0:	e2 e0       	ldi	r30, 0x02	; 2
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	aa 1f       	adc	r26, r26
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	ea 95       	dec	r30
    1fbc:	d1 f7       	brne	.-12     	; 0x1fb2 <delay+0x84>
    1fbe:	86 1b       	sub	r24, r22
    1fc0:	97 0b       	sbc	r25, r23
    1fc2:	88 5e       	subi	r24, 0xE8	; 232
    1fc4:	93 40       	sbci	r25, 0x03	; 3
    1fc6:	c8 f2       	brcs	.-78     	; 0x1f7a <delay+0x4c>
			ms--;
    1fc8:	21 50       	subi	r18, 0x01	; 1
    1fca:	30 40       	sbci	r19, 0x00	; 0
    1fcc:	40 40       	sbci	r20, 0x00	; 0
    1fce:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1fd0:	68 51       	subi	r22, 0x18	; 24
    1fd2:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1fd4:	21 15       	cp	r18, r1
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	41 05       	cpc	r20, r1
    1fda:	51 05       	cpc	r21, r1
    1fdc:	71 f6       	brne	.-100    	; 0x1f7a <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1fde:	08 95       	ret

00001fe0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	39 f0       	breq	.+14     	; 0x1ff2 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1fec:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <delayMicroseconds+0xe>
    1ff2:	08 95       	ret

00001ff4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ff4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1ff6:	84 b5       	in	r24, 0x24	; 36
    1ff8:	82 60       	ori	r24, 0x02	; 2
    1ffa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1ffc:	84 b5       	in	r24, 0x24	; 36
    1ffe:	81 60       	ori	r24, 0x01	; 1
    2000:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2002:	85 b5       	in	r24, 0x25	; 37
    2004:	82 60       	ori	r24, 0x02	; 2
    2006:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2008:	85 b5       	in	r24, 0x25	; 37
    200a:	81 60       	ori	r24, 0x01	; 1
    200c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    200e:	ee e6       	ldi	r30, 0x6E	; 110
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	81 60       	ori	r24, 0x01	; 1
    2016:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2018:	e1 e8       	ldi	r30, 0x81	; 129
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    201e:	80 81       	ld	r24, Z
    2020:	82 60       	ori	r24, 0x02	; 2
    2022:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2024:	80 81       	ld	r24, Z
    2026:	81 60       	ori	r24, 0x01	; 1
    2028:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    202a:	e0 e8       	ldi	r30, 0x80	; 128
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2034:	e1 eb       	ldi	r30, 0xB1	; 177
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	84 60       	ori	r24, 0x04	; 4
    203c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    203e:	e0 eb       	ldi	r30, 0xB0	; 176
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	81 60       	ori	r24, 0x01	; 1
    2046:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2048:	ea e7       	ldi	r30, 0x7A	; 122
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	84 60       	ori	r24, 0x04	; 4
    2050:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2052:	80 81       	ld	r24, Z
    2054:	82 60       	ori	r24, 0x02	; 2
    2056:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2058:	80 81       	ld	r24, Z
    205a:	81 60       	ori	r24, 0x01	; 1
    205c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    205e:	80 81       	ld	r24, Z
    2060:	80 68       	ori	r24, 0x80	; 128
    2062:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2064:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2068:	08 95       	ret

0000206a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    206a:	1f 93       	push	r17
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	18 2f       	mov	r17, r24
    2072:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	0e 94 95 10 	call	0x212a	; 0x212a <pinMode>
	if (val == 0)
    207a:	20 97       	sbiw	r28, 0x00	; 0
    207c:	09 f4       	brne	.+2      	; 0x2080 <analogWrite+0x16>
    207e:	4a c0       	rjmp	.+148    	; 0x2114 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2080:	cf 3f       	cpi	r28, 0xFF	; 255
    2082:	d1 05       	cpc	r29, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <analogWrite+0x1e>
    2086:	49 c0       	rjmp	.+146    	; 0x211a <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2088:	e1 2f       	mov	r30, r17
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	e2 55       	subi	r30, 0x52	; 82
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	84 91       	lpm	r24, Z+
    2092:	83 30       	cpi	r24, 0x03	; 3
    2094:	c1 f0       	breq	.+48     	; 0x20c6 <analogWrite+0x5c>
    2096:	84 30       	cpi	r24, 0x04	; 4
    2098:	28 f4       	brcc	.+10     	; 0x20a4 <analogWrite+0x3a>
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	51 f0       	breq	.+20     	; 0x20b2 <analogWrite+0x48>
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	b1 f5       	brne	.+108    	; 0x210e <analogWrite+0xa4>
    20a2:	0c c0       	rjmp	.+24     	; 0x20bc <analogWrite+0x52>
    20a4:	86 30       	cpi	r24, 0x06	; 6
    20a6:	19 f1       	breq	.+70     	; 0x20ee <analogWrite+0x84>
    20a8:	87 30       	cpi	r24, 0x07	; 7
    20aa:	49 f1       	breq	.+82     	; 0x20fe <analogWrite+0x94>
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	79 f5       	brne	.+94     	; 0x210e <analogWrite+0xa4>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    20b2:	84 b5       	in	r24, 0x24	; 36
    20b4:	80 68       	ori	r24, 0x80	; 128
    20b6:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    20b8:	c7 bd       	out	0x27, r28	; 39
    20ba:	33 c0       	rjmp	.+102    	; 0x2122 <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    20bc:	84 b5       	in	r24, 0x24	; 36
    20be:	80 62       	ori	r24, 0x20	; 32
    20c0:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    20c2:	c8 bd       	out	0x28, r28	; 40
    20c4:	2e c0       	rjmp	.+92     	; 0x2122 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    20c6:	80 91 80 00 	lds	r24, 0x0080
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    20d0:	d0 93 89 00 	sts	0x0089, r29
    20d4:	c0 93 88 00 	sts	0x0088, r28
    20d8:	24 c0       	rjmp	.+72     	; 0x2122 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    20da:	80 91 80 00 	lds	r24, 0x0080
    20de:	80 62       	ori	r24, 0x20	; 32
    20e0:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    20e4:	d0 93 8b 00 	sts	0x008B, r29
    20e8:	c0 93 8a 00 	sts	0x008A, r28
    20ec:	1a c0       	rjmp	.+52     	; 0x2122 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    20ee:	80 91 b0 00 	lds	r24, 0x00B0
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    20f8:	c0 93 b3 00 	sts	0x00B3, r28
    20fc:	12 c0       	rjmp	.+36     	; 0x2122 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    20fe:	80 91 b0 00 	lds	r24, 0x00B0
    2102:	80 62       	ori	r24, 0x20	; 32
    2104:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2108:	c0 93 b4 00 	sts	0x00B4, r28
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    210e:	c0 38       	cpi	r28, 0x80	; 128
    2110:	d1 05       	cpc	r29, r1
    2112:	1c f4       	brge	.+6      	; 0x211a <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    2114:	81 2f       	mov	r24, r17
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    211a:	81 2f       	mov	r24, r17
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
				}
		}
	}
}
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	08 95       	ret

0000212a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    212e:	48 2f       	mov	r20, r24
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	ca 01       	movw	r24, r20
    2134:	86 56       	subi	r24, 0x66	; 102
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	fc 01       	movw	r30, r24
    213a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    213c:	4a 57       	subi	r20, 0x7A	; 122
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	fa 01       	movw	r30, r20
    2142:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2144:	88 23       	and	r24, r24
    2146:	69 f1       	breq	.+90     	; 0x21a2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	fc 01       	movw	r30, r24
    2150:	e8 59       	subi	r30, 0x98	; 152
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	a5 91       	lpm	r26, Z+
    2156:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    2158:	fc 01       	movw	r30, r24
    215a:	ee 58       	subi	r30, 0x8E	; 142
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	c5 91       	lpm	r28, Z+
    2160:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    2162:	66 23       	and	r22, r22
    2164:	51 f4       	brne	.+20     	; 0x217a <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2166:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2168:	f8 94       	cli
		*reg &= ~bit;
    216a:	8c 91       	ld	r24, X
    216c:	93 2f       	mov	r25, r19
    216e:	90 95       	com	r25
    2170:	89 23       	and	r24, r25
    2172:	8c 93       	st	X, r24
		*out &= ~bit;
    2174:	88 81       	ld	r24, Y
    2176:	89 23       	and	r24, r25
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    217a:	62 30       	cpi	r22, 0x02	; 2
    217c:	61 f4       	brne	.+24     	; 0x2196 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    217e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2180:	f8 94       	cli
		*reg &= ~bit;
    2182:	8c 91       	ld	r24, X
    2184:	93 2f       	mov	r25, r19
    2186:	90 95       	com	r25
    2188:	89 23       	and	r24, r25
    218a:	8c 93       	st	X, r24
		*out |= bit;
    218c:	88 81       	ld	r24, Y
    218e:	83 2b       	or	r24, r19
    2190:	88 83       	st	Y, r24
		SREG = oldSREG;
    2192:	2f bf       	out	0x3f, r18	; 63
    2194:	06 c0       	rjmp	.+12     	; 0x21a2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2196:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2198:	f8 94       	cli
		*reg |= bit;
    219a:	8c 91       	ld	r24, X
    219c:	83 2b       	or	r24, r19
    219e:	8c 93       	st	X, r24
		SREG = oldSREG;
    21a0:	9f bf       	out	0x3f, r25	; 63
	}
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	08 95       	ret

000021a8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    21a8:	48 2f       	mov	r20, r24
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	ca 01       	movw	r24, r20
    21ae:	82 55       	subi	r24, 0x52	; 82
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	fc 01       	movw	r30, r24
    21b4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    21b6:	ca 01       	movw	r24, r20
    21b8:	86 56       	subi	r24, 0x66	; 102
    21ba:	9f 4f       	sbci	r25, 0xFF	; 255
    21bc:	fc 01       	movw	r30, r24
    21be:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    21c0:	4a 57       	subi	r20, 0x7A	; 122
    21c2:	5f 4f       	sbci	r21, 0xFF	; 255
    21c4:	fa 01       	movw	r30, r20
    21c6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21c8:	33 23       	and	r19, r19
    21ca:	09 f4       	brne	.+2      	; 0x21ce <digitalWrite+0x26>
    21cc:	40 c0       	rjmp	.+128    	; 0x224e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21ce:	22 23       	and	r18, r18
    21d0:	51 f1       	breq	.+84     	; 0x2226 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21d2:	23 30       	cpi	r18, 0x03	; 3
    21d4:	71 f0       	breq	.+28     	; 0x21f2 <digitalWrite+0x4a>
    21d6:	24 30       	cpi	r18, 0x04	; 4
    21d8:	28 f4       	brcc	.+10     	; 0x21e4 <digitalWrite+0x3c>
    21da:	21 30       	cpi	r18, 0x01	; 1
    21dc:	a1 f0       	breq	.+40     	; 0x2206 <digitalWrite+0x5e>
    21de:	22 30       	cpi	r18, 0x02	; 2
    21e0:	11 f5       	brne	.+68     	; 0x2226 <digitalWrite+0x7e>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <digitalWrite+0x64>
    21e4:	26 30       	cpi	r18, 0x06	; 6
    21e6:	b1 f0       	breq	.+44     	; 0x2214 <digitalWrite+0x6c>
    21e8:	27 30       	cpi	r18, 0x07	; 7
    21ea:	c1 f0       	breq	.+48     	; 0x221c <digitalWrite+0x74>
    21ec:	24 30       	cpi	r18, 0x04	; 4
    21ee:	d9 f4       	brne	.+54     	; 0x2226 <digitalWrite+0x7e>
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    21f2:	80 91 80 00 	lds	r24, 0x0080
    21f6:	8f 77       	andi	r24, 0x7F	; 127
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21fa:	80 91 80 00 	lds	r24, 0x0080
    21fe:	8f 7d       	andi	r24, 0xDF	; 223
    2200:	80 93 80 00 	sts	0x0080, r24
    2204:	10 c0       	rjmp	.+32     	; 0x2226 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2206:	84 b5       	in	r24, 0x24	; 36
    2208:	8f 77       	andi	r24, 0x7F	; 127
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    220c:	84 b5       	in	r24, 0x24	; 36
    220e:	8f 7d       	andi	r24, 0xDF	; 223
    2210:	84 bd       	out	0x24, r24	; 36
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2214:	80 91 b0 00 	lds	r24, 0x00B0
    2218:	8f 77       	andi	r24, 0x7F	; 127
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    221c:	80 91 b0 00 	lds	r24, 0x00B0
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    2226:	e3 2f       	mov	r30, r19
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 58       	subi	r30, 0x8E	; 142
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	a5 91       	lpm	r26, Z+
    2234:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    2236:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2238:	f8 94       	cli

	if (val == LOW) {
    223a:	66 23       	and	r22, r22
    223c:	21 f4       	brne	.+8      	; 0x2246 <digitalWrite+0x9e>
		*out &= ~bit;
    223e:	8c 91       	ld	r24, X
    2240:	90 95       	com	r25
    2242:	89 23       	and	r24, r25
    2244:	02 c0       	rjmp	.+4      	; 0x224a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    2246:	8c 91       	ld	r24, X
    2248:	89 2b       	or	r24, r25
    224a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    224c:	2f bf       	out	0x3f, r18	; 63
    224e:	08 95       	ret

00002250 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    2250:	68 2f       	mov	r22, r24
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	cb 01       	movw	r24, r22
    2256:	82 55       	subi	r24, 0x52	; 82
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	fc 01       	movw	r30, r24
    225c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    225e:	cb 01       	movw	r24, r22
    2260:	86 56       	subi	r24, 0x66	; 102
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	fc 01       	movw	r30, r24
    2266:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    2268:	6a 57       	subi	r22, 0x7A	; 122
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
    226c:	fb 01       	movw	r30, r22
    226e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    2270:	99 23       	and	r25, r25
    2272:	19 f4       	brne	.+6      	; 0x227a <digitalRead+0x2a>
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	3c c0       	rjmp	.+120    	; 0x22f2 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    227a:	22 23       	and	r18, r18
    227c:	51 f1       	breq	.+84     	; 0x22d2 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    227e:	23 30       	cpi	r18, 0x03	; 3
    2280:	71 f0       	breq	.+28     	; 0x229e <digitalRead+0x4e>
    2282:	24 30       	cpi	r18, 0x04	; 4
    2284:	28 f4       	brcc	.+10     	; 0x2290 <digitalRead+0x40>
    2286:	21 30       	cpi	r18, 0x01	; 1
    2288:	a1 f0       	breq	.+40     	; 0x22b2 <digitalRead+0x62>
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	11 f5       	brne	.+68     	; 0x22d2 <digitalRead+0x82>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <digitalRead+0x68>
    2290:	26 30       	cpi	r18, 0x06	; 6
    2292:	b1 f0       	breq	.+44     	; 0x22c0 <digitalRead+0x70>
    2294:	27 30       	cpi	r18, 0x07	; 7
    2296:	c1 f0       	breq	.+48     	; 0x22c8 <digitalRead+0x78>
    2298:	24 30       	cpi	r18, 0x04	; 4
    229a:	d9 f4       	brne	.+54     	; 0x22d2 <digitalRead+0x82>
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    229e:	80 91 80 00 	lds	r24, 0x0080
    22a2:	8f 77       	andi	r24, 0x7F	; 127
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22a6:	80 91 80 00 	lds	r24, 0x0080
    22aa:	8f 7d       	andi	r24, 0xDF	; 223
    22ac:	80 93 80 00 	sts	0x0080, r24
    22b0:	10 c0       	rjmp	.+32     	; 0x22d2 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    22b2:	84 b5       	in	r24, 0x24	; 36
    22b4:	8f 77       	andi	r24, 0x7F	; 127
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    22b8:	84 b5       	in	r24, 0x24	; 36
    22ba:	8f 7d       	andi	r24, 0xDF	; 223
    22bc:	84 bd       	out	0x24, r24	; 36
    22be:	09 c0       	rjmp	.+18     	; 0x22d2 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    22c0:	80 91 b0 00 	lds	r24, 0x00B0
    22c4:	8f 77       	andi	r24, 0x7F	; 127
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    22c8:	80 91 b0 00 	lds	r24, 0x00B0
    22cc:	8f 7d       	andi	r24, 0xDF	; 223
    22ce:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    22d2:	89 2f       	mov	r24, r25
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	84 58       	subi	r24, 0x84	; 132
    22dc:	9f 4f       	sbci	r25, 0xFF	; 255
    22de:	fc 01       	movw	r30, r24
    22e0:	a5 91       	lpm	r26, Z+
    22e2:	b4 91       	lpm	r27, Z+
    22e4:	8c 91       	ld	r24, X
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	84 23       	and	r24, r20
    22ec:	11 f0       	breq	.+4      	; 0x22f2 <digitalRead+0xa2>
    22ee:	21 e0       	ldi	r18, 0x01	; 1
    22f0:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    22f2:	c9 01       	movw	r24, r18
    22f4:	08 95       	ret

000022f6 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    230e:	a8 2f       	mov	r26, r24
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	cd 01       	movw	r24, r26
    2314:	86 56       	subi	r24, 0x66	; 102
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	fc 01       	movw	r30, r24
    231a:	84 90       	lpm	r8, Z+
	uint8_t port = digitalPinToPort(pin);
    231c:	aa 57       	subi	r26, 0x7A	; 122
    231e:	bf 4f       	sbci	r27, 0xFF	; 255
    2320:	fd 01       	movw	r30, r26
    2322:	84 91       	lpm	r24, Z+
	uint8_t stateMask = (state ? bit : 0);
    2324:	66 23       	and	r22, r22
    2326:	11 f4       	brne	.+4      	; 0x232c <pulseIn+0x36>
    2328:	99 24       	eor	r9, r9
    232a:	01 c0       	rjmp	.+2      	; 0x232e <pulseIn+0x38>
    232c:	98 2c       	mov	r9, r8
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    232e:	6f ef       	ldi	r22, 0xFF	; 255
    2330:	a6 2e       	mov	r10, r22
    2332:	6f ef       	ldi	r22, 0xFF	; 255
    2334:	b6 2e       	mov	r11, r22
    2336:	6f ef       	ldi	r22, 0xFF	; 255
    2338:	c6 2e       	mov	r12, r22
    233a:	6f e0       	ldi	r22, 0x0F	; 15
    233c:	d6 2e       	mov	r13, r22
    233e:	a2 22       	and	r10, r18
    2340:	b3 22       	and	r11, r19
    2342:	c4 22       	and	r12, r20
    2344:	d5 22       	and	r13, r21
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    2346:	68 2f       	mov	r22, r24
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	64 58       	subi	r22, 0x84	; 132
    2350:	7f 4f       	sbci	r23, 0xFF	; 255
    2352:	ee 24       	eor	r14, r14
    2354:	ff 24       	eor	r15, r15
    2356:	87 01       	movw	r16, r14
    2358:	fb 01       	movw	r30, r22
    235a:	a5 91       	lpm	r26, Z+
    235c:	b4 91       	lpm	r27, Z+
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <pulseIn+0x80>
		if (numloops++ == maxloops)
    2360:	ea 14       	cp	r14, r10
    2362:	fb 04       	cpc	r15, r11
    2364:	0c 05       	cpc	r16, r12
    2366:	1d 05       	cpc	r17, r13
    2368:	09 f4       	brne	.+2      	; 0x236c <pulseIn+0x76>
    236a:	4e c0       	rjmp	.+156    	; 0x2408 <pulseIn+0x112>
    236c:	08 94       	sec
    236e:	e1 1c       	adc	r14, r1
    2370:	f1 1c       	adc	r15, r1
    2372:	01 1d       	adc	r16, r1
    2374:	11 1d       	adc	r17, r1
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    2376:	8c 91       	ld	r24, X
    2378:	88 21       	and	r24, r8
    237a:	89 15       	cp	r24, r9
    237c:	89 f3       	breq	.-30     	; 0x2360 <pulseIn+0x6a>
    237e:	0c c0       	rjmp	.+24     	; 0x2398 <pulseIn+0xa2>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
    2380:	ea 14       	cp	r14, r10
    2382:	fb 04       	cpc	r15, r11
    2384:	0c 05       	cpc	r16, r12
    2386:	1d 05       	cpc	r17, r13
    2388:	09 f4       	brne	.+2      	; 0x238c <pulseIn+0x96>
    238a:	3e c0       	rjmp	.+124    	; 0x2408 <pulseIn+0x112>
    238c:	08 94       	sec
    238e:	e1 1c       	adc	r14, r1
    2390:	f1 1c       	adc	r15, r1
    2392:	01 1d       	adc	r16, r1
    2394:	11 1d       	adc	r17, r1
    2396:	03 c0       	rjmp	.+6      	; 0x239e <pulseIn+0xa8>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
    2398:	fb 01       	movw	r30, r22
    239a:	a5 91       	lpm	r26, Z+
    239c:	b4 91       	lpm	r27, Z+
    239e:	8c 91       	ld	r24, X
    23a0:	88 21       	and	r24, r8
    23a2:	89 15       	cp	r24, r9
    23a4:	69 f7       	brne	.-38     	; 0x2380 <pulseIn+0x8a>
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    23ae:	fb 01       	movw	r30, r22
    23b0:	c5 91       	lpm	r28, Z+
    23b2:	d4 91       	lpm	r29, Z+
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <pulseIn+0xde>
		if (numloops++ == maxloops)
    23b6:	da 01       	movw	r26, r20
    23b8:	c9 01       	movw	r24, r18
    23ba:	8e 0d       	add	r24, r14
    23bc:	9f 1d       	adc	r25, r15
    23be:	a0 1f       	adc	r26, r16
    23c0:	b1 1f       	adc	r27, r17
    23c2:	8a 15       	cp	r24, r10
    23c4:	9b 05       	cpc	r25, r11
    23c6:	ac 05       	cpc	r26, r12
    23c8:	bd 05       	cpc	r27, r13
    23ca:	f1 f0       	breq	.+60     	; 0x2408 <pulseIn+0x112>
			return 0;
		width++;
    23cc:	2f 5f       	subi	r18, 0xFF	; 255
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	4f 4f       	sbci	r20, 0xFF	; 255
    23d2:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    23d4:	88 81       	ld	r24, Y
    23d6:	88 21       	and	r24, r8
    23d8:	89 15       	cp	r24, r9
    23da:	69 f3       	breq	.-38     	; 0x23b6 <pulseIn+0xc0>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
    23dc:	ca 01       	movw	r24, r20
    23de:	b9 01       	movw	r22, r18
    23e0:	25 e1       	ldi	r18, 0x15	; 21
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	0e 94 17 12 	call	0x242e	; 0x242e <__mulsi3>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	20 5f       	subi	r18, 0xF0	; 240
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	4f 4f       	sbci	r20, 0xFF	; 255
    23f6:	5f 4f       	sbci	r21, 0xFF	; 255
    23f8:	84 e0       	ldi	r24, 0x04	; 4
    23fa:	56 95       	lsr	r21
    23fc:	47 95       	ror	r20
    23fe:	37 95       	ror	r19
    2400:	27 95       	ror	r18
    2402:	8a 95       	dec	r24
    2404:	d1 f7       	brne	.-12     	; 0x23fa <pulseIn+0x104>
    2406:	04 c0       	rjmp	.+8      	; 0x2410 <pulseIn+0x11a>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
}
    2410:	b9 01       	movw	r22, r18
    2412:	ca 01       	movw	r24, r20
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	ff 90       	pop	r15
    241e:	ef 90       	pop	r14
    2420:	df 90       	pop	r13
    2422:	cf 90       	pop	r12
    2424:	bf 90       	pop	r11
    2426:	af 90       	pop	r10
    2428:	9f 90       	pop	r9
    242a:	8f 90       	pop	r8
    242c:	08 95       	ret

0000242e <__mulsi3>:
    242e:	62 9f       	mul	r22, r18
    2430:	d0 01       	movw	r26, r0
    2432:	73 9f       	mul	r23, r19
    2434:	f0 01       	movw	r30, r0
    2436:	82 9f       	mul	r24, r18
    2438:	e0 0d       	add	r30, r0
    243a:	f1 1d       	adc	r31, r1
    243c:	64 9f       	mul	r22, r20
    243e:	e0 0d       	add	r30, r0
    2440:	f1 1d       	adc	r31, r1
    2442:	92 9f       	mul	r25, r18
    2444:	f0 0d       	add	r31, r0
    2446:	83 9f       	mul	r24, r19
    2448:	f0 0d       	add	r31, r0
    244a:	74 9f       	mul	r23, r20
    244c:	f0 0d       	add	r31, r0
    244e:	65 9f       	mul	r22, r21
    2450:	f0 0d       	add	r31, r0
    2452:	99 27       	eor	r25, r25
    2454:	72 9f       	mul	r23, r18
    2456:	b0 0d       	add	r27, r0
    2458:	e1 1d       	adc	r30, r1
    245a:	f9 1f       	adc	r31, r25
    245c:	63 9f       	mul	r22, r19
    245e:	b0 0d       	add	r27, r0
    2460:	e1 1d       	adc	r30, r1
    2462:	f9 1f       	adc	r31, r25
    2464:	bd 01       	movw	r22, r26
    2466:	cf 01       	movw	r24, r30
    2468:	11 24       	eor	r1, r1
    246a:	08 95       	ret

0000246c <__udivmodqi4>:
    246c:	99 1b       	sub	r25, r25
    246e:	79 e0       	ldi	r23, 0x09	; 9
    2470:	04 c0       	rjmp	.+8      	; 0x247a <__udivmodqi4_ep>

00002472 <__udivmodqi4_loop>:
    2472:	99 1f       	adc	r25, r25
    2474:	96 17       	cp	r25, r22
    2476:	08 f0       	brcs	.+2      	; 0x247a <__udivmodqi4_ep>
    2478:	96 1b       	sub	r25, r22

0000247a <__udivmodqi4_ep>:
    247a:	88 1f       	adc	r24, r24
    247c:	7a 95       	dec	r23
    247e:	c9 f7       	brne	.-14     	; 0x2472 <__udivmodqi4_loop>
    2480:	80 95       	com	r24
    2482:	08 95       	ret

00002484 <__divmodhi4>:
    2484:	97 fb       	bst	r25, 7
    2486:	09 2e       	mov	r0, r25
    2488:	07 26       	eor	r0, r23
    248a:	0a d0       	rcall	.+20     	; 0x24a0 <__divmodhi4_neg1>
    248c:	77 fd       	sbrc	r23, 7
    248e:	04 d0       	rcall	.+8      	; 0x2498 <__divmodhi4_neg2>
    2490:	49 d0       	rcall	.+146    	; 0x2524 <__udivmodhi4>
    2492:	06 d0       	rcall	.+12     	; 0x24a0 <__divmodhi4_neg1>
    2494:	00 20       	and	r0, r0
    2496:	1a f4       	brpl	.+6      	; 0x249e <__divmodhi4_exit>

00002498 <__divmodhi4_neg2>:
    2498:	70 95       	com	r23
    249a:	61 95       	neg	r22
    249c:	7f 4f       	sbci	r23, 0xFF	; 255

0000249e <__divmodhi4_exit>:
    249e:	08 95       	ret

000024a0 <__divmodhi4_neg1>:
    24a0:	f6 f7       	brtc	.-4      	; 0x249e <__divmodhi4_exit>
    24a2:	90 95       	com	r25
    24a4:	81 95       	neg	r24
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	08 95       	ret

000024aa <__udivmodsi4>:
    24aa:	a1 e2       	ldi	r26, 0x21	; 33
    24ac:	1a 2e       	mov	r1, r26
    24ae:	aa 1b       	sub	r26, r26
    24b0:	bb 1b       	sub	r27, r27
    24b2:	fd 01       	movw	r30, r26
    24b4:	0d c0       	rjmp	.+26     	; 0x24d0 <__udivmodsi4_ep>

000024b6 <__udivmodsi4_loop>:
    24b6:	aa 1f       	adc	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	ee 1f       	adc	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	a2 17       	cp	r26, r18
    24c0:	b3 07       	cpc	r27, r19
    24c2:	e4 07       	cpc	r30, r20
    24c4:	f5 07       	cpc	r31, r21
    24c6:	20 f0       	brcs	.+8      	; 0x24d0 <__udivmodsi4_ep>
    24c8:	a2 1b       	sub	r26, r18
    24ca:	b3 0b       	sbc	r27, r19
    24cc:	e4 0b       	sbc	r30, r20
    24ce:	f5 0b       	sbc	r31, r21

000024d0 <__udivmodsi4_ep>:
    24d0:	66 1f       	adc	r22, r22
    24d2:	77 1f       	adc	r23, r23
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	1a 94       	dec	r1
    24da:	69 f7       	brne	.-38     	; 0x24b6 <__udivmodsi4_loop>
    24dc:	60 95       	com	r22
    24de:	70 95       	com	r23
    24e0:	80 95       	com	r24
    24e2:	90 95       	com	r25
    24e4:	9b 01       	movw	r18, r22
    24e6:	ac 01       	movw	r20, r24
    24e8:	bd 01       	movw	r22, r26
    24ea:	cf 01       	movw	r24, r30
    24ec:	08 95       	ret

000024ee <__divmodsi4>:
    24ee:	97 fb       	bst	r25, 7
    24f0:	09 2e       	mov	r0, r25
    24f2:	05 26       	eor	r0, r21
    24f4:	0e d0       	rcall	.+28     	; 0x2512 <__divmodsi4_neg1>
    24f6:	57 fd       	sbrc	r21, 7
    24f8:	04 d0       	rcall	.+8      	; 0x2502 <__divmodsi4_neg2>
    24fa:	d7 df       	rcall	.-82     	; 0x24aa <__udivmodsi4>
    24fc:	0a d0       	rcall	.+20     	; 0x2512 <__divmodsi4_neg1>
    24fe:	00 1c       	adc	r0, r0
    2500:	38 f4       	brcc	.+14     	; 0x2510 <__divmodsi4_exit>

00002502 <__divmodsi4_neg2>:
    2502:	50 95       	com	r21
    2504:	40 95       	com	r20
    2506:	30 95       	com	r19
    2508:	21 95       	neg	r18
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	4f 4f       	sbci	r20, 0xFF	; 255
    250e:	5f 4f       	sbci	r21, 0xFF	; 255

00002510 <__divmodsi4_exit>:
    2510:	08 95       	ret

00002512 <__divmodsi4_neg1>:
    2512:	f6 f7       	brtc	.-4      	; 0x2510 <__divmodsi4_exit>
    2514:	90 95       	com	r25
    2516:	80 95       	com	r24
    2518:	70 95       	com	r23
    251a:	61 95       	neg	r22
    251c:	7f 4f       	sbci	r23, 0xFF	; 255
    251e:	8f 4f       	sbci	r24, 0xFF	; 255
    2520:	9f 4f       	sbci	r25, 0xFF	; 255
    2522:	08 95       	ret

00002524 <__udivmodhi4>:
    2524:	aa 1b       	sub	r26, r26
    2526:	bb 1b       	sub	r27, r27
    2528:	51 e1       	ldi	r21, 0x11	; 17
    252a:	07 c0       	rjmp	.+14     	; 0x253a <__udivmodhi4_ep>

0000252c <__udivmodhi4_loop>:
    252c:	aa 1f       	adc	r26, r26
    252e:	bb 1f       	adc	r27, r27
    2530:	a6 17       	cp	r26, r22
    2532:	b7 07       	cpc	r27, r23
    2534:	10 f0       	brcs	.+4      	; 0x253a <__udivmodhi4_ep>
    2536:	a6 1b       	sub	r26, r22
    2538:	b7 0b       	sbc	r27, r23

0000253a <__udivmodhi4_ep>:
    253a:	88 1f       	adc	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	5a 95       	dec	r21
    2540:	a9 f7       	brne	.-22     	; 0x252c <__udivmodhi4_loop>
    2542:	80 95       	com	r24
    2544:	90 95       	com	r25
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	08 95       	ret

0000254c <__tablejump2__>:
    254c:	ee 0f       	add	r30, r30
    254e:	ff 1f       	adc	r31, r31

00002550 <__tablejump__>:
    2550:	05 90       	lpm	r0, Z+
    2552:	f4 91       	lpm	r31, Z+
    2554:	e0 2d       	mov	r30, r0
    2556:	09 94       	ijmp

00002558 <__prologue_saves__>:
    2558:	2f 92       	push	r2
    255a:	3f 92       	push	r3
    255c:	4f 92       	push	r4
    255e:	5f 92       	push	r5
    2560:	6f 92       	push	r6
    2562:	7f 92       	push	r7
    2564:	8f 92       	push	r8
    2566:	9f 92       	push	r9
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	cf 92       	push	r12
    256e:	df 92       	push	r13
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	ca 1b       	sub	r28, r26
    2582:	db 0b       	sbc	r29, r27
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	09 94       	ijmp

00002590 <__epilogue_restores__>:
    2590:	2a 88       	ldd	r2, Y+18	; 0x12
    2592:	39 88       	ldd	r3, Y+17	; 0x11
    2594:	48 88       	ldd	r4, Y+16	; 0x10
    2596:	5f 84       	ldd	r5, Y+15	; 0x0f
    2598:	6e 84       	ldd	r6, Y+14	; 0x0e
    259a:	7d 84       	ldd	r7, Y+13	; 0x0d
    259c:	8c 84       	ldd	r8, Y+12	; 0x0c
    259e:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a2:	b9 84       	ldd	r11, Y+9	; 0x09
    25a4:	c8 84       	ldd	r12, Y+8	; 0x08
    25a6:	df 80       	ldd	r13, Y+7	; 0x07
    25a8:	ee 80       	ldd	r14, Y+6	; 0x06
    25aa:	fd 80       	ldd	r15, Y+5	; 0x05
    25ac:	0c 81       	ldd	r16, Y+4	; 0x04
    25ae:	1b 81       	ldd	r17, Y+3	; 0x03
    25b0:	aa 81       	ldd	r26, Y+2	; 0x02
    25b2:	b9 81       	ldd	r27, Y+1	; 0x01
    25b4:	ce 0f       	add	r28, r30
    25b6:	d1 1d       	adc	r29, r1
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	ed 01       	movw	r28, r26
    25c4:	08 95       	ret

000025c6 <_exit>:
    25c6:	f8 94       	cli

000025c8 <__stop_program>:
    25c8:	ff cf       	rjmp	.-2      	; 0x25c8 <__stop_program>
